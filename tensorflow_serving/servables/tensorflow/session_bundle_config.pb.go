// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: tensorflow_serving/servables/tensorflow/session_bundle_config.proto

package tensorflow

import (
	protobuf "github.com/yangchnet/tf-serving/tensorflow/core/protobuf"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Options related to model-warmup.
type ModelWarmupOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of times a request is iterated during warmup replay. By default 1.
	NumRequestIterations *wrapperspb.Int32Value `protobuf:"bytes,1,opt,name=num_request_iterations,json=numRequestIterations,proto3" json:"num_request_iterations,omitempty"`
	// The number of threads to parallel execute warm up queries. By default 1.
	NumModelWarmupThreads *wrapperspb.Int32Value `protobuf:"bytes,2,opt,name=num_model_warmup_threads,json=numModelWarmupThreads,proto3" json:"num_model_warmup_threads,omitempty"`
}

func (x *ModelWarmupOptions) Reset() {
	*x = ModelWarmupOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_serving_servables_tensorflow_session_bundle_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelWarmupOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelWarmupOptions) ProtoMessage() {}

func (x *ModelWarmupOptions) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_serving_servables_tensorflow_session_bundle_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelWarmupOptions.ProtoReflect.Descriptor instead.
func (*ModelWarmupOptions) Descriptor() ([]byte, []int) {
	return file_tensorflow_serving_servables_tensorflow_session_bundle_config_proto_rawDescGZIP(), []int{0}
}

func (x *ModelWarmupOptions) GetNumRequestIterations() *wrapperspb.Int32Value {
	if x != nil {
		return x.NumRequestIterations
	}
	return nil
}

func (x *ModelWarmupOptions) GetNumModelWarmupThreads() *wrapperspb.Int32Value {
	if x != nil {
		return x.NumModelWarmupThreads
	}
	return nil
}

// Configuration parameters for a SessionBundle, with optional batching.
type SessionBundleConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The TensorFlow runtime to connect to.
	// See full documentation in tensorflow/core/public/session_options.h.
	//
	// For single machine serving, we recommend using the empty string "", which
	// will configure the local TensorFlow runtime implementation. This provides
	// the best isolation currently available across multiple Session servables.
	SessionTarget string `protobuf:"bytes,1,opt,name=session_target,json=sessionTarget,proto3" json:"session_target,omitempty"`
	// TensorFlow Session configuration options.
	// See details at tensorflow/core/protobuf/config.proto.
	SessionConfig *protobuf.ConfigProto `protobuf:"bytes,2,opt,name=session_config,json=sessionConfig,proto3" json:"session_config,omitempty"`
	// If set, each emitted session is wrapped with a layer that schedules Run()
	// calls in batches. The batching layer is transparent to the client
	// (implements the tensorflow::Session API).
	//
	// IMPORTANT: With batching enabled, client threads will spend most of their
	// time blocked on Session::Run() calls, waiting for enough peer threads to
	// also call Session::Run() such that a large batch can be formed. For good
	// throughput, we recommend setting the number of client threads equal to
	// roughly twice the maximum batch size ('max_batch_size' below).
	//
	// The batching layer uses a SharedBatchScheduler to coordinate batching
	// across multiple session servables emitted by this source adapter. A
	// BatchSchedulerRetrier is added on top of each batching session.
	BatchingParameters *BatchingParameters `protobuf:"bytes,3,opt,name=batching_parameters,json=batchingParameters,proto3" json:"batching_parameters,omitempty"`
	// If set, session run calls use a separate threadpool for restore and init
	// ops as part of loading the session-bundle. The value of this field should
	// correspond to the index of the tensorflow::ThreadPoolOptionProto defined as
	// part of `session_config.session_inter_op_thread_pool`.
	SessionRunLoadThreadpoolIndex *wrapperspb.Int32Value `protobuf:"bytes,4,opt,name=session_run_load_threadpool_index,json=sessionRunLoadThreadpoolIndex,proto3" json:"session_run_load_threadpool_index,omitempty"`
	// EXPERIMENTAL. THIS FIELD MAY CHANGE OR GO AWAY. USE WITH CAUTION.
	//
	// Transient memory used while loading a model, which is released once the
	// loading phase has completed. (This is on top of the memory used in steady-
	// state while the model is in memory after it has finished loading.)
	//
	// TODO(b/38376838): This is a temporary hack, and it applies to all models.
	// Remove it once resource estimates are moved inside SavedModel.
	ExperimentalTransientRamBytesDuringLoad uint64 `protobuf:"varint,5,opt,name=experimental_transient_ram_bytes_during_load,json=experimentalTransientRamBytesDuringLoad,proto3" json:"experimental_transient_ram_bytes_during_load,omitempty"`
	// Set of SavedModel tags identifying the specific meta graph def to be
	// loaded.
	SavedModelTags []string `protobuf:"bytes,6,rep,name=saved_model_tags,json=savedModelTags,proto3" json:"saved_model_tags,omitempty"`
	// EXPERIMENTAL. THIS FIELD MAY CHANGE OR GO AWAY. USE WITH CAUTION.
	//
	// Input tensors to append to every Session::Run() call.
	ExperimentalFixedInputTensors []*protobuf.NamedTensorProto `protobuf:"bytes,778,rep,name=experimental_fixed_input_tensors,json=experimentalFixedInputTensors,proto3" json:"experimental_fixed_input_tensors,omitempty"`
	// Enables model warmup.
	EnableModelWarmup  bool                `protobuf:"varint,779,opt,name=enable_model_warmup,json=enableModelWarmup,proto3" json:"enable_model_warmup,omitempty"`
	ModelWarmupOptions *ModelWarmupOptions `protobuf:"bytes,780,opt,name=model_warmup_options,json=modelWarmupOptions,proto3" json:"model_warmup_options,omitempty"`
	// EXPERIMENTAL. THIS FIELD MAY CHANGE OR GO AWAY. USE WITH CAUTION.
	//
	// Enables passing in the SessionMetadata to the Session. The SessionMetadata
	// consists of information like the model name, version, which can then be
	// used by the TensorFlow runtime appropriately (for debugging, logging, etc).
	EnableSessionMetadata bool `protobuf:"varint,781,opt,name=enable_session_metadata,json=enableSessionMetadata,proto3" json:"enable_session_metadata,omitempty"`
	// EXPERIMENTAL. THIS FIELD MAY CHANGE OR GO AWAY. USE WITH CAUTION.
	//
	// Remove unused fields from metagraph proto message in SavedModelBundle.
	// This message is stored alongside the `Session` object. Removing unwanted
	// fields helps reduce memory footprint.
	RemoveUnusedFieldsFromBundleMetagraph bool `protobuf:"varint,782,opt,name=remove_unused_fields_from_bundle_metagraph,json=removeUnusedFieldsFromBundleMetagraph,proto3" json:"remove_unused_fields_from_bundle_metagraph,omitempty"`
	// EXPERIMENTAL. THIS FIELD MAY CHANGE OR GO AWAY. USE WITH CAUTION.
	//
	// Prefer TensorFlow Lite model from `model.tflite` file in SavedModel
	// directory, instead of the TensorFlow model from `saved_model.pb` file.
	// If no TensorFlow Lite model found, fallback to TensorFlow model.
	PreferTfliteModel bool `protobuf:"varint,783,opt,name=prefer_tflite_model,json=preferTfliteModel,proto3" json:"prefer_tflite_model,omitempty"`
	// Tries to use infra validation result to estimate resource usage.
	ResourceEstimationUsesValidationResult bool `protobuf:"varint,784,opt,name=resource_estimation_uses_validation_result,json=resourceEstimationUsesValidationResult,proto3" json:"resource_estimation_uses_validation_result,omitempty"`
	// Deprecated: Do not use.
	NumTfliteInterpreters int32 `protobuf:"varint,785,opt,name=num_tflite_interpreters,json=numTfliteInterpreters,proto3" json:"num_tflite_interpreters,omitempty"`
	// EXPERIMENTAL. THIS FIELD MAY CHANGE OR GO AWAY. USE WITH CAUTION.
	//
	// Number of TFLite interpreters in an interpreter pool of TfLiteSession.
	NumTfliteInterpretersPerPool int32 `protobuf:"varint,786,opt,name=num_tflite_interpreters_per_pool,json=numTfliteInterpretersPerPool,proto3" json:"num_tflite_interpreters_per_pool,omitempty"`
	// EXPERIMENTAL. THIS FIELD MAY CHANGE OR GO AWAY. USE WITH CAUTION.
	//
	// Number of TFLite interpreter pools in a TfLiteSession.
	NumTflitePools int32 `protobuf:"varint,787,opt,name=num_tflite_pools,json=numTflitePools,proto3" json:"num_tflite_pools,omitempty"`
	// EXPERIMENTAL. THIS FIELD MAY CHANGE OR GO AWAY. USE WITH CAUTION.
	//
	// Use SessionWrapperIgnoreThreadPoolOptions instead.
	WrapSessionWithNoThreadingParams bool `protobuf:"varint,788,opt,name=wrap_session_with_no_threading_params,json=wrapSessionWithNoThreadingParams,proto3" json:"wrap_session_with_no_threading_params,omitempty"`
	// EXPERIMENTAL. THIS FIELD MAY CHANGE OR GO AWAY. USE WITH CAUTION.
	//
	// Enable per-model batching parameters (present in SavedModel). If this
	// option is enabled, model specific batching params (e.g. timeout, batch
	// sizes etc.) from `batching_parameters` field above are *ignored* and
	// instead the one in SavedModel directory are used. This field is only
	// used if batching is enabled (i.e. `batching_parameters` message above
	// is set).
	EnablePerModelBatchingParams bool `protobuf:"varint,789,opt,name=enable_per_model_batching_params,json=enablePerModelBatchingParams,proto3" json:"enable_per_model_batching_params,omitempty"`
}

func (x *SessionBundleConfig) Reset() {
	*x = SessionBundleConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_serving_servables_tensorflow_session_bundle_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionBundleConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionBundleConfig) ProtoMessage() {}

func (x *SessionBundleConfig) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_serving_servables_tensorflow_session_bundle_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionBundleConfig.ProtoReflect.Descriptor instead.
func (*SessionBundleConfig) Descriptor() ([]byte, []int) {
	return file_tensorflow_serving_servables_tensorflow_session_bundle_config_proto_rawDescGZIP(), []int{1}
}

func (x *SessionBundleConfig) GetSessionTarget() string {
	if x != nil {
		return x.SessionTarget
	}
	return ""
}

func (x *SessionBundleConfig) GetSessionConfig() *protobuf.ConfigProto {
	if x != nil {
		return x.SessionConfig
	}
	return nil
}

func (x *SessionBundleConfig) GetBatchingParameters() *BatchingParameters {
	if x != nil {
		return x.BatchingParameters
	}
	return nil
}

func (x *SessionBundleConfig) GetSessionRunLoadThreadpoolIndex() *wrapperspb.Int32Value {
	if x != nil {
		return x.SessionRunLoadThreadpoolIndex
	}
	return nil
}

func (x *SessionBundleConfig) GetExperimentalTransientRamBytesDuringLoad() uint64 {
	if x != nil {
		return x.ExperimentalTransientRamBytesDuringLoad
	}
	return 0
}

func (x *SessionBundleConfig) GetSavedModelTags() []string {
	if x != nil {
		return x.SavedModelTags
	}
	return nil
}

func (x *SessionBundleConfig) GetExperimentalFixedInputTensors() []*protobuf.NamedTensorProto {
	if x != nil {
		return x.ExperimentalFixedInputTensors
	}
	return nil
}

func (x *SessionBundleConfig) GetEnableModelWarmup() bool {
	if x != nil {
		return x.EnableModelWarmup
	}
	return false
}

func (x *SessionBundleConfig) GetModelWarmupOptions() *ModelWarmupOptions {
	if x != nil {
		return x.ModelWarmupOptions
	}
	return nil
}

func (x *SessionBundleConfig) GetEnableSessionMetadata() bool {
	if x != nil {
		return x.EnableSessionMetadata
	}
	return false
}

func (x *SessionBundleConfig) GetRemoveUnusedFieldsFromBundleMetagraph() bool {
	if x != nil {
		return x.RemoveUnusedFieldsFromBundleMetagraph
	}
	return false
}

func (x *SessionBundleConfig) GetPreferTfliteModel() bool {
	if x != nil {
		return x.PreferTfliteModel
	}
	return false
}

func (x *SessionBundleConfig) GetResourceEstimationUsesValidationResult() bool {
	if x != nil {
		return x.ResourceEstimationUsesValidationResult
	}
	return false
}

// Deprecated: Do not use.
func (x *SessionBundleConfig) GetNumTfliteInterpreters() int32 {
	if x != nil {
		return x.NumTfliteInterpreters
	}
	return 0
}

func (x *SessionBundleConfig) GetNumTfliteInterpretersPerPool() int32 {
	if x != nil {
		return x.NumTfliteInterpretersPerPool
	}
	return 0
}

func (x *SessionBundleConfig) GetNumTflitePools() int32 {
	if x != nil {
		return x.NumTflitePools
	}
	return 0
}

func (x *SessionBundleConfig) GetWrapSessionWithNoThreadingParams() bool {
	if x != nil {
		return x.WrapSessionWithNoThreadingParams
	}
	return false
}

func (x *SessionBundleConfig) GetEnablePerModelBatchingParams() bool {
	if x != nil {
		return x.EnablePerModelBatchingParams
	}
	return false
}

// Batching parameters. Each individual parameter is optional. If omitted, the
// default value from the relevant batching config struct (SharedBatchScheduler
// ::Options or BatchSchedulerRetrier::Options) is used.
type BatchingParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum size of each input batch.
	//
	// IMPORTANT: As discussed above, use 'max_batch_size * 2' client threads to
	// achieve high throughput with batching.
	MaxBatchSize *wrapperspb.Int64Value `protobuf:"bytes,1,opt,name=max_batch_size,json=maxBatchSize,proto3" json:"max_batch_size,omitempty"`
	// If a task has been enqueued for this amount of time (in microseconds), and
	// a thread is available, the scheduler will immediately form a batch from
	// enqueued tasks and assign the batch to the thread for processing, even if
	// the batch's size is below 'max_batch_size'.
	BatchTimeoutMicros *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=batch_timeout_micros,json=batchTimeoutMicros,proto3" json:"batch_timeout_micros,omitempty"`
	// The maximum length of the queue, in terms of the number of batches. (A
	// batch that has been scheduled on a thread is considered to have been
	// removed from the queue.)
	MaxEnqueuedBatches *wrapperspb.Int64Value `protobuf:"bytes,3,opt,name=max_enqueued_batches,json=maxEnqueuedBatches,proto3" json:"max_enqueued_batches,omitempty"`
	// The number of threads to use to process batches.
	// Must be >= 1, and should be tuned carefully.
	NumBatchThreads *wrapperspb.Int64Value `protobuf:"bytes,4,opt,name=num_batch_threads,json=numBatchThreads,proto3" json:"num_batch_threads,omitempty"`
	// The name to use for the pool of batch threads.
	ThreadPoolName *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=thread_pool_name,json=threadPoolName,proto3" json:"thread_pool_name,omitempty"`
	// If true, queue implementation would split one input batch task into
	// subtasks (as specified by `split_input_task_func` below) and fit subtasks
	// into different batches.
	EnableLargeBatchSplitting *wrapperspb.BoolValue `protobuf:"bytes,8,opt,name=enable_large_batch_splitting,json=enableLargeBatchSplitting,proto3" json:"enable_large_batch_splitting,omitempty"`
	// The maximum size of each enqueued batch to be processed (i.e., in
	// `batches_`). Relevant iff enable_large_batch_splitting is true. And when
	// relevant, 'max_batch_size' should be greater or equal than
	// `max_execution_batch_size`
	//
	// The scheduler may form batches of any size between 1 and this number
	// (inclusive).
	MaxExecutionBatchSize *wrapperspb.Int64Value `protobuf:"bytes,9,opt,name=max_execution_batch_size,json=maxExecutionBatchSize,proto3" json:"max_execution_batch_size,omitempty"`
	// The allowed batch sizes. (Ignored if left empty.)
	// Requirements:
	//   - The entries must be in increasing order.
	//   - The final entry must equal 'max_batch_size'.
	AllowedBatchSizes []int64 `protobuf:"varint,6,rep,packed,name=allowed_batch_sizes,json=allowedBatchSizes,proto3" json:"allowed_batch_sizes,omitempty"`
	// Whether to pad variable-length inputs when a batch is formed.
	PadVariableLengthInputs bool `protobuf:"varint,7,opt,name=pad_variable_length_inputs,json=padVariableLengthInputs,proto3" json:"pad_variable_length_inputs,omitempty"`
}

func (x *BatchingParameters) Reset() {
	*x = BatchingParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_serving_servables_tensorflow_session_bundle_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchingParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchingParameters) ProtoMessage() {}

func (x *BatchingParameters) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_serving_servables_tensorflow_session_bundle_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchingParameters.ProtoReflect.Descriptor instead.
func (*BatchingParameters) Descriptor() ([]byte, []int) {
	return file_tensorflow_serving_servables_tensorflow_session_bundle_config_proto_rawDescGZIP(), []int{2}
}

func (x *BatchingParameters) GetMaxBatchSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxBatchSize
	}
	return nil
}

func (x *BatchingParameters) GetBatchTimeoutMicros() *wrapperspb.Int64Value {
	if x != nil {
		return x.BatchTimeoutMicros
	}
	return nil
}

func (x *BatchingParameters) GetMaxEnqueuedBatches() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxEnqueuedBatches
	}
	return nil
}

func (x *BatchingParameters) GetNumBatchThreads() *wrapperspb.Int64Value {
	if x != nil {
		return x.NumBatchThreads
	}
	return nil
}

func (x *BatchingParameters) GetThreadPoolName() *wrapperspb.StringValue {
	if x != nil {
		return x.ThreadPoolName
	}
	return nil
}

func (x *BatchingParameters) GetEnableLargeBatchSplitting() *wrapperspb.BoolValue {
	if x != nil {
		return x.EnableLargeBatchSplitting
	}
	return nil
}

func (x *BatchingParameters) GetMaxExecutionBatchSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.MaxExecutionBatchSize
	}
	return nil
}

func (x *BatchingParameters) GetAllowedBatchSizes() []int64 {
	if x != nil {
		return x.AllowedBatchSizes
	}
	return nil
}

func (x *BatchingParameters) GetPadVariableLengthInputs() bool {
	if x != nil {
		return x.PadVariableLengthInputs
	}
	return false
}

var File_tensorflow_serving_servables_tensorflow_session_bundle_config_proto protoreflect.FileDescriptor

var file_tensorflow_serving_servables_tensorflow_session_bundle_config_proto_rawDesc = []byte{
	0x0a, 0x43, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x6e, 0x67, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2f, 0x74,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x74, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2b, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x64,
	0x5f, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbd, 0x01,
	0x0a, 0x12, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x57, 0x61, 0x72, 0x6d, 0x75, 0x70, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x51, 0x0a, 0x16, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x14, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x74, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x54, 0x0a, 0x18, 0x6e, 0x75, 0x6d, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x77, 0x61, 0x72, 0x6d, 0x75, 0x70, 0x5f, 0x74, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x6e, 0x75, 0x6d, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x57, 0x61, 0x72, 0x6d, 0x75, 0x70, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x22, 0xa8, 0x0a,
	0x0a, 0x13, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x3e, 0x0a, 0x0e,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0d, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x57, 0x0a, 0x13,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x74, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2e, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x52, 0x12, 0x62, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x65, 0x0a, 0x21, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1d, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6e, 0x4c, 0x6f, 0x61, 0x64, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x5d, 0x0a, 0x2c,
	0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x61, 0x6d, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x5f, 0x64, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x27, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x6d, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x44, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x6f, 0x61, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x73,
	0x61, 0x76, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x61, 0x76, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x54, 0x61, 0x67, 0x73, 0x12, 0x66, 0x0a, 0x20, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x5f, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x8a, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4e, 0x61,
	0x6d, 0x65, 0x64, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x1d,
	0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x46, 0x69, 0x78, 0x65,
	0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x12, 0x2f, 0x0a,
	0x13, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x77, 0x61,
	0x72, 0x6d, 0x75, 0x70, 0x18, 0x8b, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x57, 0x61, 0x72, 0x6d, 0x75, 0x70, 0x12, 0x59,
	0x0a, 0x14, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x77, 0x61, 0x72, 0x6d, 0x75, 0x70, 0x5f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x8c, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x6e, 0x67, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x57, 0x61, 0x72, 0x6d, 0x75, 0x70, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x12, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x57, 0x61, 0x72, 0x6d,
	0x75, 0x70, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x37, 0x0a, 0x17, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x8d, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x5a, 0x0a, 0x2a, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x75, 0x6e, 0x75,
	0x73, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x18, 0x8e, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x25, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x55,
	0x6e, 0x75, 0x73, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x42,
	0x75, 0x6e, 0x64, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x67, 0x72, 0x61, 0x70, 0x68, 0x12, 0x2f,
	0x0a, 0x13, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x8f, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x70, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x54, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12,
	0x5b, 0x0a, 0x2a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x65, 0x73, 0x74, 0x69,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x90, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x26, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x73,
	0x74, 0x69, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3b, 0x0a, 0x17,
	0x6e, 0x75, 0x6d, 0x5f, 0x74, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x91, 0x06, 0x20, 0x01, 0x28, 0x05, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x15, 0x6e, 0x75, 0x6d, 0x54, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x47, 0x0a, 0x20, 0x6e, 0x75, 0x6d,
	0x5f, 0x74, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x18, 0x92, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x1c, 0x6e, 0x75, 0x6d, 0x54, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x65, 0x74, 0x65, 0x72, 0x73, 0x50, 0x65, 0x72, 0x50, 0x6f,
	0x6f, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x5f, 0x74, 0x66, 0x6c, 0x69, 0x74, 0x65,
	0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x93, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6e,
	0x75, 0x6d, 0x54, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x50, 0x0a,
	0x25, 0x77, 0x72, 0x61, 0x70, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x69,
	0x74, 0x68, 0x5f, 0x6e, 0x6f, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x94, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x20, 0x77,
	0x72, 0x61, 0x70, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x6f,
	0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x47, 0x0a, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x18, 0x95, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x50, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x69,
	0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0xa6, 0x05, 0x0a, 0x12, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x41, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x4d, 0x0a, 0x14, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x69, 0x63, 0x72, 0x6f,
	0x73, 0x12, 0x4d, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x5f, 0x65, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x64, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x6d, 0x61,
	0x78, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73,
	0x12, 0x47, 0x0a, 0x11, 0x6e, 0x75, 0x6d, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x12, 0x46, 0x0a, 0x10, 0x74, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0e, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x50, 0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x5b, 0x0a, 0x1c, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x61, 0x72, 0x67,
	0x65, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x19, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x61, 0x72, 0x67, 0x65,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x54,
	0x0a, 0x18, 0x6d, 0x61, 0x78, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x6d,
	0x61, 0x78, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53,
	0x69, 0x7a, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x70, 0x61, 0x64, 0x5f, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x70, 0x61, 0x64, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x42, 0xe5, 0x01, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x42, 0x18, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x02, 0x50, 0x01, 0x5a, 0x46, 0x67, 0x69, 0x74, 0x65,
	0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x71, 0x63, 0x69, 0x69, 0x70, 0x2d, 0x69, 0x63, 0x70, 0x2f,
	0x74, 0x66, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2f, 0x74, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2f, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c,
	0x6f, 0x77, 0xa2, 0x02, 0x03, 0x54, 0x53, 0x58, 0xaa, 0x02, 0x12, 0x54, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0xca, 0x02, 0x12,
	0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5c, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x6e, 0x67, 0xe2, 0x02, 0x1e, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5c,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xea, 0x02, 0x13, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77,
	0x3a, 0x3a, 0x53, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_tensorflow_serving_servables_tensorflow_session_bundle_config_proto_rawDescOnce sync.Once
	file_tensorflow_serving_servables_tensorflow_session_bundle_config_proto_rawDescData = file_tensorflow_serving_servables_tensorflow_session_bundle_config_proto_rawDesc
)

func file_tensorflow_serving_servables_tensorflow_session_bundle_config_proto_rawDescGZIP() []byte {
	file_tensorflow_serving_servables_tensorflow_session_bundle_config_proto_rawDescOnce.Do(func() {
		file_tensorflow_serving_servables_tensorflow_session_bundle_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_tensorflow_serving_servables_tensorflow_session_bundle_config_proto_rawDescData)
	})
	return file_tensorflow_serving_servables_tensorflow_session_bundle_config_proto_rawDescData
}

var file_tensorflow_serving_servables_tensorflow_session_bundle_config_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_tensorflow_serving_servables_tensorflow_session_bundle_config_proto_goTypes = []interface{}{
	(*ModelWarmupOptions)(nil),        // 0: tensorflow.serving.ModelWarmupOptions
	(*SessionBundleConfig)(nil),       // 1: tensorflow.serving.SessionBundleConfig
	(*BatchingParameters)(nil),        // 2: tensorflow.serving.BatchingParameters
	(*wrapperspb.Int32Value)(nil),     // 3: google.protobuf.Int32Value
	(*protobuf.ConfigProto)(nil),      // 4: tensorflow.ConfigProto
	(*protobuf.NamedTensorProto)(nil), // 5: tensorflow.NamedTensorProto
	(*wrapperspb.Int64Value)(nil),     // 6: google.protobuf.Int64Value
	(*wrapperspb.StringValue)(nil),    // 7: google.protobuf.StringValue
	(*wrapperspb.BoolValue)(nil),      // 8: google.protobuf.BoolValue
}
var file_tensorflow_serving_servables_tensorflow_session_bundle_config_proto_depIdxs = []int32{
	3,  // 0: tensorflow.serving.ModelWarmupOptions.num_request_iterations:type_name -> google.protobuf.Int32Value
	3,  // 1: tensorflow.serving.ModelWarmupOptions.num_model_warmup_threads:type_name -> google.protobuf.Int32Value
	4,  // 2: tensorflow.serving.SessionBundleConfig.session_config:type_name -> tensorflow.ConfigProto
	2,  // 3: tensorflow.serving.SessionBundleConfig.batching_parameters:type_name -> tensorflow.serving.BatchingParameters
	3,  // 4: tensorflow.serving.SessionBundleConfig.session_run_load_threadpool_index:type_name -> google.protobuf.Int32Value
	5,  // 5: tensorflow.serving.SessionBundleConfig.experimental_fixed_input_tensors:type_name -> tensorflow.NamedTensorProto
	0,  // 6: tensorflow.serving.SessionBundleConfig.model_warmup_options:type_name -> tensorflow.serving.ModelWarmupOptions
	6,  // 7: tensorflow.serving.BatchingParameters.max_batch_size:type_name -> google.protobuf.Int64Value
	6,  // 8: tensorflow.serving.BatchingParameters.batch_timeout_micros:type_name -> google.protobuf.Int64Value
	6,  // 9: tensorflow.serving.BatchingParameters.max_enqueued_batches:type_name -> google.protobuf.Int64Value
	6,  // 10: tensorflow.serving.BatchingParameters.num_batch_threads:type_name -> google.protobuf.Int64Value
	7,  // 11: tensorflow.serving.BatchingParameters.thread_pool_name:type_name -> google.protobuf.StringValue
	8,  // 12: tensorflow.serving.BatchingParameters.enable_large_batch_splitting:type_name -> google.protobuf.BoolValue
	6,  // 13: tensorflow.serving.BatchingParameters.max_execution_batch_size:type_name -> google.protobuf.Int64Value
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_tensorflow_serving_servables_tensorflow_session_bundle_config_proto_init() }
func file_tensorflow_serving_servables_tensorflow_session_bundle_config_proto_init() {
	if File_tensorflow_serving_servables_tensorflow_session_bundle_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tensorflow_serving_servables_tensorflow_session_bundle_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelWarmupOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_serving_servables_tensorflow_session_bundle_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionBundleConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_serving_servables_tensorflow_session_bundle_config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchingParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tensorflow_serving_servables_tensorflow_session_bundle_config_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tensorflow_serving_servables_tensorflow_session_bundle_config_proto_goTypes,
		DependencyIndexes: file_tensorflow_serving_servables_tensorflow_session_bundle_config_proto_depIdxs,
		MessageInfos:      file_tensorflow_serving_servables_tensorflow_session_bundle_config_proto_msgTypes,
	}.Build()
	File_tensorflow_serving_servables_tensorflow_session_bundle_config_proto = out.File
	file_tensorflow_serving_servables_tensorflow_session_bundle_config_proto_rawDesc = nil
	file_tensorflow_serving_servables_tensorflow_session_bundle_config_proto_goTypes = nil
	file_tensorflow_serving_servables_tensorflow_session_bundle_config_proto_depIdxs = nil
}
