// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: tensorflow_serving/session_bundle/oss/manifest.proto

package oss

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Signatures of model export.
type Signatures struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Default signature of the graph.
	// WARNING(break-tutorial-inline-code): The following code snippet is
	// in-lined in tutorials, please update tutorial documents accordingly
	// whenever code changes.
	DefaultSignature *Signature `protobuf:"bytes,1,opt,name=default_signature,json=defaultSignature,proto3" json:"default_signature,omitempty"`
	// Named signatures of the graph.
	NamedSignatures map[string]*Signature `protobuf:"bytes,2,rep,name=named_signatures,json=namedSignatures,proto3" json:"named_signatures,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Signatures) Reset() {
	*x = Signatures{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_serving_session_bundle_oss_manifest_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Signatures) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signatures) ProtoMessage() {}

func (x *Signatures) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_serving_session_bundle_oss_manifest_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signatures.ProtoReflect.Descriptor instead.
func (*Signatures) Descriptor() ([]byte, []int) {
	return file_tensorflow_serving_session_bundle_oss_manifest_proto_rawDescGZIP(), []int{0}
}

func (x *Signatures) GetDefaultSignature() *Signature {
	if x != nil {
		return x.DefaultSignature
	}
	return nil
}

func (x *Signatures) GetNamedSignatures() map[string]*Signature {
	if x != nil {
		return x.NamedSignatures
	}
	return nil
}

// A binding to a tensor including the name and, possibly in the future, type
// or other metadata. For example, this may specify whether a tensor supports
// batch vs single inference.
type TensorBinding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the tensor to bind to.
	TensorName string `protobuf:"bytes,1,opt,name=tensor_name,json=tensorName,proto3" json:"tensor_name,omitempty"`
}

func (x *TensorBinding) Reset() {
	*x = TensorBinding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_serving_session_bundle_oss_manifest_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TensorBinding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TensorBinding) ProtoMessage() {}

func (x *TensorBinding) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_serving_session_bundle_oss_manifest_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TensorBinding.ProtoReflect.Descriptor instead.
func (*TensorBinding) Descriptor() ([]byte, []int) {
	return file_tensorflow_serving_session_bundle_oss_manifest_proto_rawDescGZIP(), []int{1}
}

func (x *TensorBinding) GetTensorName() string {
	if x != nil {
		return x.TensorName
	}
	return ""
}

// An asset file or set of sharded files with the same name that will be bound
// to a tensor at init / session_bundle load time.
type AssetFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The tensor to bind the asset filename to.
	TensorBinding *TensorBinding `protobuf:"bytes,1,opt,name=tensor_binding,json=tensorBinding,proto3" json:"tensor_binding,omitempty"`
	// The filename within the assets directory. Note: does not include the base
	// path or asset directory prefix. Base paths can and will change when models
	// are deployed for serving.
	Filename string `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`
}

func (x *AssetFile) Reset() {
	*x = AssetFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_serving_session_bundle_oss_manifest_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetFile) ProtoMessage() {}

func (x *AssetFile) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_serving_session_bundle_oss_manifest_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetFile.ProtoReflect.Descriptor instead.
func (*AssetFile) Descriptor() ([]byte, []int) {
	return file_tensorflow_serving_session_bundle_oss_manifest_proto_rawDescGZIP(), []int{2}
}

func (x *AssetFile) GetTensorBinding() *TensorBinding {
	if x != nil {
		return x.TensorBinding
	}
	return nil
}

func (x *AssetFile) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

// A Signature specifies the inputs and outputs of commonly used graphs.
type Signature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*Signature_RegressionSignature
	//	*Signature_ClassificationSignature
	//	*Signature_GenericSignature
	Type isSignature_Type `protobuf_oneof:"type"`
}

func (x *Signature) Reset() {
	*x = Signature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_serving_session_bundle_oss_manifest_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Signature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signature) ProtoMessage() {}

func (x *Signature) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_serving_session_bundle_oss_manifest_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signature.ProtoReflect.Descriptor instead.
func (*Signature) Descriptor() ([]byte, []int) {
	return file_tensorflow_serving_session_bundle_oss_manifest_proto_rawDescGZIP(), []int{3}
}

func (m *Signature) GetType() isSignature_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *Signature) GetRegressionSignature() *RegressionSignature {
	if x, ok := x.GetType().(*Signature_RegressionSignature); ok {
		return x.RegressionSignature
	}
	return nil
}

func (x *Signature) GetClassificationSignature() *ClassificationSignature {
	if x, ok := x.GetType().(*Signature_ClassificationSignature); ok {
		return x.ClassificationSignature
	}
	return nil
}

func (x *Signature) GetGenericSignature() *GenericSignature {
	if x, ok := x.GetType().(*Signature_GenericSignature); ok {
		return x.GenericSignature
	}
	return nil
}

type isSignature_Type interface {
	isSignature_Type()
}

type Signature_RegressionSignature struct {
	RegressionSignature *RegressionSignature `protobuf:"bytes,1,opt,name=regression_signature,json=regressionSignature,proto3,oneof"`
}

type Signature_ClassificationSignature struct {
	ClassificationSignature *ClassificationSignature `protobuf:"bytes,2,opt,name=classification_signature,json=classificationSignature,proto3,oneof"`
}

type Signature_GenericSignature struct {
	GenericSignature *GenericSignature `protobuf:"bytes,3,opt,name=generic_signature,json=genericSignature,proto3,oneof"`
}

func (*Signature_RegressionSignature) isSignature_Type() {}

func (*Signature_ClassificationSignature) isSignature_Type() {}

func (*Signature_GenericSignature) isSignature_Type() {}

// RegressionSignature specifies a graph that takes an input and returns an
// output.
type RegressionSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Input  *TensorBinding `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
	Output *TensorBinding `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *RegressionSignature) Reset() {
	*x = RegressionSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_serving_session_bundle_oss_manifest_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegressionSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegressionSignature) ProtoMessage() {}

func (x *RegressionSignature) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_serving_session_bundle_oss_manifest_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegressionSignature.ProtoReflect.Descriptor instead.
func (*RegressionSignature) Descriptor() ([]byte, []int) {
	return file_tensorflow_serving_session_bundle_oss_manifest_proto_rawDescGZIP(), []int{4}
}

func (x *RegressionSignature) GetInput() *TensorBinding {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *RegressionSignature) GetOutput() *TensorBinding {
	if x != nil {
		return x.Output
	}
	return nil
}

// ClassificationSignature specifies a graph that takes an input and returns
// classes and their scores.
// WARNING(break-tutorial-inline-code): The following code snippet is
// in-lined in tutorials, please update tutorial documents accordingly
// whenever code changes.
type ClassificationSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Input   *TensorBinding `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
	Classes *TensorBinding `protobuf:"bytes,2,opt,name=classes,proto3" json:"classes,omitempty"`
	Scores  *TensorBinding `protobuf:"bytes,3,opt,name=scores,proto3" json:"scores,omitempty"`
}

func (x *ClassificationSignature) Reset() {
	*x = ClassificationSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_serving_session_bundle_oss_manifest_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClassificationSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClassificationSignature) ProtoMessage() {}

func (x *ClassificationSignature) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_serving_session_bundle_oss_manifest_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClassificationSignature.ProtoReflect.Descriptor instead.
func (*ClassificationSignature) Descriptor() ([]byte, []int) {
	return file_tensorflow_serving_session_bundle_oss_manifest_proto_rawDescGZIP(), []int{5}
}

func (x *ClassificationSignature) GetInput() *TensorBinding {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *ClassificationSignature) GetClasses() *TensorBinding {
	if x != nil {
		return x.Classes
	}
	return nil
}

func (x *ClassificationSignature) GetScores() *TensorBinding {
	if x != nil {
		return x.Scores
	}
	return nil
}

// GenericSignature specifies a map from logical name to Tensor name.
// Typical application of GenericSignature is to use a single GenericSignature
// that includes all of the Tensor nodes and target names that may be useful at
// serving, analysis or debugging time. The recommended name for this signature
// in the ModelManifest is "generic_bindings".
type GenericSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Map map[string]*TensorBinding `protobuf:"bytes,1,rep,name=map,proto3" json:"map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GenericSignature) Reset() {
	*x = GenericSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_serving_session_bundle_oss_manifest_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenericSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericSignature) ProtoMessage() {}

func (x *GenericSignature) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_serving_session_bundle_oss_manifest_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericSignature.ProtoReflect.Descriptor instead.
func (*GenericSignature) Descriptor() ([]byte, []int) {
	return file_tensorflow_serving_session_bundle_oss_manifest_proto_rawDescGZIP(), []int{6}
}

func (x *GenericSignature) GetMap() map[string]*TensorBinding {
	if x != nil {
		return x.Map
	}
	return nil
}

var File_tensorflow_serving_session_bundle_oss_manifest_proto protoreflect.FileDescriptor

var file_tensorflow_serving_session_bundle_oss_manifest_proto_rawDesc = []byte{
	0x0a, 0x34, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x6e, 0x67, 0x2f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x6e,
	0x64, 0x6c, 0x65, 0x2f, 0x6f, 0x73, 0x73, 0x2f, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x22, 0x9b, 0x02, 0x0a, 0x0a, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x11, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x52, 0x10, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x5e, 0x0a, 0x10, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e,
	0x4e, 0x61, 0x6d, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x1a, 0x61, 0x0a, 0x14, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x6e, 0x67, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x30, 0x0a, 0x0d, 0x54, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x71, 0x0a, 0x09, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x48, 0x0a, 0x0e, 0x74, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x52, 0x0d, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xb0, 0x02,
	0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x5c, 0x0a, 0x14, 0x72,
	0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x74, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2e, 0x52,
	0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x48, 0x00, 0x52, 0x13, 0x72, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x68, 0x0a, 0x18, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x74, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67,
	0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x17, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x53, 0x0a, 0x11, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x10, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x89, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x37, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x12, 0x39, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x42, 0x69, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0xca, 0x01, 0x0a,
	0x17, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x37, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x12, 0x3b, 0x0a, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x42, 0x69,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x12, 0x39,
	0x0a, 0x06, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x6e, 0x67, 0x2e, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x22, 0xae, 0x01, 0x0a, 0x10, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x69, 0x63, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x3f,
	0x0a, 0x03, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x74, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67,
	0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x2e, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x6d, 0x61, 0x70, 0x1a,
	0x59, 0x0a, 0x08, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x37, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e,
	0x67, 0x2e, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0xd8, 0x01, 0x0a, 0x16, 0x63,
	0x6f, 0x6d, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x6e, 0x67, 0x42, 0x0d, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x48, 0x02, 0x50, 0x01, 0x5a, 0x44, 0x67, 0x69, 0x74, 0x65, 0x65, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x71, 0x63, 0x69, 0x69, 0x70, 0x2d, 0x69, 0x63, 0x70, 0x2f, 0x74, 0x66,
	0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2f, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66,
	0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2f, 0x6f, 0x73, 0x73, 0xa2, 0x02,
	0x03, 0x54, 0x53, 0x58, 0xaa, 0x02, 0x12, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0xca, 0x02, 0x12, 0x54, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0xe2, 0x02,
	0x1e, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5c, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x6e, 0x67, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,
	0x02, 0x13, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x3a, 0x3a, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x6e, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tensorflow_serving_session_bundle_oss_manifest_proto_rawDescOnce sync.Once
	file_tensorflow_serving_session_bundle_oss_manifest_proto_rawDescData = file_tensorflow_serving_session_bundle_oss_manifest_proto_rawDesc
)

func file_tensorflow_serving_session_bundle_oss_manifest_proto_rawDescGZIP() []byte {
	file_tensorflow_serving_session_bundle_oss_manifest_proto_rawDescOnce.Do(func() {
		file_tensorflow_serving_session_bundle_oss_manifest_proto_rawDescData = protoimpl.X.CompressGZIP(file_tensorflow_serving_session_bundle_oss_manifest_proto_rawDescData)
	})
	return file_tensorflow_serving_session_bundle_oss_manifest_proto_rawDescData
}

var file_tensorflow_serving_session_bundle_oss_manifest_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_tensorflow_serving_session_bundle_oss_manifest_proto_goTypes = []interface{}{
	(*Signatures)(nil),              // 0: tensorflow.serving.Signatures
	(*TensorBinding)(nil),           // 1: tensorflow.serving.TensorBinding
	(*AssetFile)(nil),               // 2: tensorflow.serving.AssetFile
	(*Signature)(nil),               // 3: tensorflow.serving.Signature
	(*RegressionSignature)(nil),     // 4: tensorflow.serving.RegressionSignature
	(*ClassificationSignature)(nil), // 5: tensorflow.serving.ClassificationSignature
	(*GenericSignature)(nil),        // 6: tensorflow.serving.GenericSignature
	nil,                             // 7: tensorflow.serving.Signatures.NamedSignaturesEntry
	nil,                             // 8: tensorflow.serving.GenericSignature.MapEntry
}
var file_tensorflow_serving_session_bundle_oss_manifest_proto_depIdxs = []int32{
	3,  // 0: tensorflow.serving.Signatures.default_signature:type_name -> tensorflow.serving.Signature
	7,  // 1: tensorflow.serving.Signatures.named_signatures:type_name -> tensorflow.serving.Signatures.NamedSignaturesEntry
	1,  // 2: tensorflow.serving.AssetFile.tensor_binding:type_name -> tensorflow.serving.TensorBinding
	4,  // 3: tensorflow.serving.Signature.regression_signature:type_name -> tensorflow.serving.RegressionSignature
	5,  // 4: tensorflow.serving.Signature.classification_signature:type_name -> tensorflow.serving.ClassificationSignature
	6,  // 5: tensorflow.serving.Signature.generic_signature:type_name -> tensorflow.serving.GenericSignature
	1,  // 6: tensorflow.serving.RegressionSignature.input:type_name -> tensorflow.serving.TensorBinding
	1,  // 7: tensorflow.serving.RegressionSignature.output:type_name -> tensorflow.serving.TensorBinding
	1,  // 8: tensorflow.serving.ClassificationSignature.input:type_name -> tensorflow.serving.TensorBinding
	1,  // 9: tensorflow.serving.ClassificationSignature.classes:type_name -> tensorflow.serving.TensorBinding
	1,  // 10: tensorflow.serving.ClassificationSignature.scores:type_name -> tensorflow.serving.TensorBinding
	8,  // 11: tensorflow.serving.GenericSignature.map:type_name -> tensorflow.serving.GenericSignature.MapEntry
	3,  // 12: tensorflow.serving.Signatures.NamedSignaturesEntry.value:type_name -> tensorflow.serving.Signature
	1,  // 13: tensorflow.serving.GenericSignature.MapEntry.value:type_name -> tensorflow.serving.TensorBinding
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_tensorflow_serving_session_bundle_oss_manifest_proto_init() }
func file_tensorflow_serving_session_bundle_oss_manifest_proto_init() {
	if File_tensorflow_serving_session_bundle_oss_manifest_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tensorflow_serving_session_bundle_oss_manifest_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Signatures); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_serving_session_bundle_oss_manifest_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TensorBinding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_serving_session_bundle_oss_manifest_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_serving_session_bundle_oss_manifest_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Signature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_serving_session_bundle_oss_manifest_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegressionSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_serving_session_bundle_oss_manifest_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClassificationSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_serving_session_bundle_oss_manifest_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenericSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_tensorflow_serving_session_bundle_oss_manifest_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*Signature_RegressionSignature)(nil),
		(*Signature_ClassificationSignature)(nil),
		(*Signature_GenericSignature)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tensorflow_serving_session_bundle_oss_manifest_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tensorflow_serving_session_bundle_oss_manifest_proto_goTypes,
		DependencyIndexes: file_tensorflow_serving_session_bundle_oss_manifest_proto_depIdxs,
		MessageInfos:      file_tensorflow_serving_session_bundle_oss_manifest_proto_msgTypes,
	}.Build()
	File_tensorflow_serving_session_bundle_oss_manifest_proto = out.File
	file_tensorflow_serving_session_bundle_oss_manifest_proto_rawDesc = nil
	file_tensorflow_serving_session_bundle_oss_manifest_proto_goTypes = nil
	file_tensorflow_serving_session_bundle_oss_manifest_proto_depIdxs = nil
}
