// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: tensorflow/core/profiler/protobuf/op_metrics.proto

package protobuf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// What the dimension represents, e.g. spatial, feature or batch.
type LayoutDimensionSemantics int32

const (
	LayoutDimensionSemantics_UNKNOWN_SEMANTICS LayoutDimensionSemantics = 0
	LayoutDimensionSemantics_FEATURE           LayoutDimensionSemantics = 1
	LayoutDimensionSemantics_BATCH             LayoutDimensionSemantics = 2
	LayoutDimensionSemantics_SPATIAL           LayoutDimensionSemantics = 3
)

// Enum value maps for LayoutDimensionSemantics.
var (
	LayoutDimensionSemantics_name = map[int32]string{
		0: "UNKNOWN_SEMANTICS",
		1: "FEATURE",
		2: "BATCH",
		3: "SPATIAL",
	}
	LayoutDimensionSemantics_value = map[string]int32{
		"UNKNOWN_SEMANTICS": 0,
		"FEATURE":           1,
		"BATCH":             2,
		"SPATIAL":           3,
	}
)

func (x LayoutDimensionSemantics) Enum() *LayoutDimensionSemantics {
	p := new(LayoutDimensionSemantics)
	*p = x
	return p
}

func (x LayoutDimensionSemantics) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LayoutDimensionSemantics) Descriptor() protoreflect.EnumDescriptor {
	return file_tensorflow_core_profiler_protobuf_op_metrics_proto_enumTypes[0].Descriptor()
}

func (LayoutDimensionSemantics) Type() protoreflect.EnumType {
	return &file_tensorflow_core_profiler_protobuf_op_metrics_proto_enumTypes[0]
}

func (x LayoutDimensionSemantics) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LayoutDimensionSemantics.Descriptor instead.
func (LayoutDimensionSemantics) EnumDescriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_protobuf_op_metrics_proto_rawDescGZIP(), []int{0}
}

type OpMetrics_MemoryAccessed_OperationType int32

const (
	OpMetrics_MemoryAccessed_UNKNOWN OpMetrics_MemoryAccessed_OperationType = 0
	OpMetrics_MemoryAccessed_READ    OpMetrics_MemoryAccessed_OperationType = 1
	OpMetrics_MemoryAccessed_WRITE   OpMetrics_MemoryAccessed_OperationType = 2
)

// Enum value maps for OpMetrics_MemoryAccessed_OperationType.
var (
	OpMetrics_MemoryAccessed_OperationType_name = map[int32]string{
		0: "UNKNOWN",
		1: "READ",
		2: "WRITE",
	}
	OpMetrics_MemoryAccessed_OperationType_value = map[string]int32{
		"UNKNOWN": 0,
		"READ":    1,
		"WRITE":   2,
	}
)

func (x OpMetrics_MemoryAccessed_OperationType) Enum() *OpMetrics_MemoryAccessed_OperationType {
	p := new(OpMetrics_MemoryAccessed_OperationType)
	*p = x
	return p
}

func (x OpMetrics_MemoryAccessed_OperationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpMetrics_MemoryAccessed_OperationType) Descriptor() protoreflect.EnumDescriptor {
	return file_tensorflow_core_profiler_protobuf_op_metrics_proto_enumTypes[1].Descriptor()
}

func (OpMetrics_MemoryAccessed_OperationType) Type() protoreflect.EnumType {
	return &file_tensorflow_core_profiler_protobuf_op_metrics_proto_enumTypes[1]
}

func (x OpMetrics_MemoryAccessed_OperationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpMetrics_MemoryAccessed_OperationType.Descriptor instead.
func (OpMetrics_MemoryAccessed_OperationType) EnumDescriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_protobuf_op_metrics_proto_rawDescGZIP(), []int{1, 0, 0}
}

// Data layout of an op.
type LayoutAnalysis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The physical data layout, from most-minor to most-major dimensions.
	Dimensions []*LayoutAnalysis_Dimension `protobuf:"bytes,1,rep,name=dimensions,proto3" json:"dimensions,omitempty"`
}

func (x *LayoutAnalysis) Reset() {
	*x = LayoutAnalysis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_protobuf_op_metrics_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LayoutAnalysis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LayoutAnalysis) ProtoMessage() {}

func (x *LayoutAnalysis) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_protobuf_op_metrics_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LayoutAnalysis.ProtoReflect.Descriptor instead.
func (*LayoutAnalysis) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_protobuf_op_metrics_proto_rawDescGZIP(), []int{0}
}

func (x *LayoutAnalysis) GetDimensions() []*LayoutAnalysis_Dimension {
	if x != nil {
		return x.Dimensions
	}
	return nil
}

// Metrics for an operation (accumulated over all occurrences).
// Next ID: 24
type OpMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// HLO module id. 0 for TF ops.
	HloModuleId uint64 `protobuf:"varint,13,opt,name=hlo_module_id,json=hloModuleId,proto3" json:"hlo_module_id,omitempty"`
	// Name of this op.
	Name string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	// Long name of this op (e.g., HLO expression).
	LongName string `protobuf:"bytes,20,opt,name=long_name,json=longName,proto3" json:"long_name,omitempty"`
	// Category of this op.
	Category string `protobuf:"bytes,11,opt,name=category,proto3" json:"category,omitempty"`
	// Provenance of this op (e.g., if HLO op, original TF op).
	Provenance string `protobuf:"bytes,12,opt,name=provenance,proto3" json:"provenance,omitempty"`
	// Whether it is executed eagerly.
	IsEager bool `protobuf:"varint,18,opt,name=is_eager,json=isEager,proto3" json:"is_eager,omitempty"`
	// Number of executions.
	Occurrences uint32 `protobuf:"varint,3,opt,name=occurrences,proto3" json:"occurrences,omitempty"`
	// Total time (self + children) in picoseconds.
	TimePs uint64 `protobuf:"varint,7,opt,name=time_ps,json=timePs,proto3" json:"time_ps,omitempty"`
	// Minimum time (self + children) among all occurrences.
	MinTimePs uint64 `protobuf:"varint,17,opt,name=min_time_ps,json=minTimePs,proto3" json:"min_time_ps,omitempty"`
	// Total self time in picoseconds.
	SelfTimePs uint64 `protobuf:"varint,1,opt,name=self_time_ps,json=selfTimePs,proto3" json:"self_time_ps,omitempty"`
	// Total FLOPs.
	Flops uint64 `protobuf:"varint,2,opt,name=flops,proto3" json:"flops,omitempty"`
	// Total bytes accessed.
	BytesAccessed           uint64                      `protobuf:"varint,5,opt,name=bytes_accessed,json=bytesAccessed,proto3" json:"bytes_accessed,omitempty"`
	MemoryAccessedBreakdown []*OpMetrics_MemoryAccessed `protobuf:"bytes,19,rep,name=memory_accessed_breakdown,json=memoryAccessedBreakdown,proto3" json:"memory_accessed_breakdown,omitempty"`
	// Total dma stall time in picoseconds.
	DmaStallPs uint64 `protobuf:"varint,10,opt,name=dma_stall_ps,json=dmaStallPs,proto3" json:"dma_stall_ps,omitempty"`
	// The data layout for this op. Only set for convolution ops for now.
	Layout *LayoutAnalysis `protobuf:"bytes,14,opt,name=layout,proto3" json:"layout,omitempty"`
	// Deduplicated HLO name for this op. Not set for TF ops.
	DeduplicatedName string `protobuf:"bytes,15,opt,name=deduplicated_name,json=deduplicatedName,proto3" json:"deduplicated_name,omitempty"`
	// Children of the op. e.g. fused ops if this op is fusion.
	Children *OpMetricsDb `protobuf:"bytes,16,opt,name=children,proto3" json:"children,omitempty"`
	// Number of cores this op occurs.
	NumCores uint32 `protobuf:"varint,21,opt,name=num_cores,json=numCores,proto3" json:"num_cores,omitempty"`
	// Computation primitive size in BITS. This is the size of the type of the
	// hardware computation. In the future this may be extended to include info
	// such as signed/unsigned, int/fp, etc. Currently only the size is needed.
	ComputationPrimitiveSize uint32 `protobuf:"varint,22,opt,name=computation_primitive_size,json=computationPrimitiveSize,proto3" json:"computation_primitive_size,omitempty"`
	// Whether the op is autotuned.
	Autotuned bool `protobuf:"varint,23,opt,name=autotuned,proto3" json:"autotuned,omitempty"`
}

func (x *OpMetrics) Reset() {
	*x = OpMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_protobuf_op_metrics_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpMetrics) ProtoMessage() {}

func (x *OpMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_protobuf_op_metrics_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpMetrics.ProtoReflect.Descriptor instead.
func (*OpMetrics) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_protobuf_op_metrics_proto_rawDescGZIP(), []int{1}
}

func (x *OpMetrics) GetHloModuleId() uint64 {
	if x != nil {
		return x.HloModuleId
	}
	return 0
}

func (x *OpMetrics) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OpMetrics) GetLongName() string {
	if x != nil {
		return x.LongName
	}
	return ""
}

func (x *OpMetrics) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *OpMetrics) GetProvenance() string {
	if x != nil {
		return x.Provenance
	}
	return ""
}

func (x *OpMetrics) GetIsEager() bool {
	if x != nil {
		return x.IsEager
	}
	return false
}

func (x *OpMetrics) GetOccurrences() uint32 {
	if x != nil {
		return x.Occurrences
	}
	return 0
}

func (x *OpMetrics) GetTimePs() uint64 {
	if x != nil {
		return x.TimePs
	}
	return 0
}

func (x *OpMetrics) GetMinTimePs() uint64 {
	if x != nil {
		return x.MinTimePs
	}
	return 0
}

func (x *OpMetrics) GetSelfTimePs() uint64 {
	if x != nil {
		return x.SelfTimePs
	}
	return 0
}

func (x *OpMetrics) GetFlops() uint64 {
	if x != nil {
		return x.Flops
	}
	return 0
}

func (x *OpMetrics) GetBytesAccessed() uint64 {
	if x != nil {
		return x.BytesAccessed
	}
	return 0
}

func (x *OpMetrics) GetMemoryAccessedBreakdown() []*OpMetrics_MemoryAccessed {
	if x != nil {
		return x.MemoryAccessedBreakdown
	}
	return nil
}

func (x *OpMetrics) GetDmaStallPs() uint64 {
	if x != nil {
		return x.DmaStallPs
	}
	return 0
}

func (x *OpMetrics) GetLayout() *LayoutAnalysis {
	if x != nil {
		return x.Layout
	}
	return nil
}

func (x *OpMetrics) GetDeduplicatedName() string {
	if x != nil {
		return x.DeduplicatedName
	}
	return ""
}

func (x *OpMetrics) GetChildren() *OpMetricsDb {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *OpMetrics) GetNumCores() uint32 {
	if x != nil {
		return x.NumCores
	}
	return 0
}

func (x *OpMetrics) GetComputationPrimitiveSize() uint32 {
	if x != nil {
		return x.ComputationPrimitiveSize
	}
	return 0
}

func (x *OpMetrics) GetAutotuned() bool {
	if x != nil {
		return x.Autotuned
	}
	return false
}

// Statistics about the various precision used in computation.
type PrecisionStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Amount of time spent on 16-bit computation (in ps).
	Compute_16BitPs uint64 `protobuf:"varint,1,opt,name=compute_16bit_ps,json=compute16bitPs,proto3" json:"compute_16bit_ps,omitempty"`
	// Amount of time spent on 32-bit computation (in ps).
	Compute_32BitPs uint64 `protobuf:"varint,2,opt,name=compute_32bit_ps,json=compute32bitPs,proto3" json:"compute_32bit_ps,omitempty"`
}

func (x *PrecisionStats) Reset() {
	*x = PrecisionStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_protobuf_op_metrics_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrecisionStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrecisionStats) ProtoMessage() {}

func (x *PrecisionStats) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_protobuf_op_metrics_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrecisionStats.ProtoReflect.Descriptor instead.
func (*PrecisionStats) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_protobuf_op_metrics_proto_rawDescGZIP(), []int{2}
}

func (x *PrecisionStats) GetCompute_16BitPs() uint64 {
	if x != nil {
		return x.Compute_16BitPs
	}
	return 0
}

func (x *PrecisionStats) GetCompute_32BitPs() uint64 {
	if x != nil {
		return x.Compute_32BitPs
	}
	return 0
}

// A database for OpMetrics.
// Next ID: 14
type OpMetricsDb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A bunch of OpMetrics.
	MetricsDb []*OpMetrics `protobuf:"bytes,10,rep,name=metrics_db,json=metricsDb,proto3" json:"metrics_db,omitempty"`
	// The total host infeed-enqueue duration in picoseconds.
	TotalHostInfeedEnqDurationPs uint64 `protobuf:"varint,2,opt,name=total_host_infeed_enq_duration_ps,json=totalHostInfeedEnqDurationPs,proto3" json:"total_host_infeed_enq_duration_ps,omitempty"`
	// The total of the difference between the start times of two
	// consecutive infeed-enqueues (per host) in picoseconds.
	TotalHostInfeedEnqStartTimestampPsDiff uint64 `protobuf:"varint,3,opt,name=total_host_infeed_enq_start_timestamp_ps_diff,json=totalHostInfeedEnqStartTimestampPsDiff,proto3" json:"total_host_infeed_enq_start_timestamp_ps_diff,omitempty"`
	// The total time in picoseconds.
	TotalTimePs uint64 `protobuf:"varint,11,opt,name=total_time_ps,json=totalTimePs,proto3" json:"total_time_ps,omitempty"`
	// The total time incurred by OPs in picoseconds.
	TotalOpTimePs uint64 `protobuf:"varint,12,opt,name=total_op_time_ps,json=totalOpTimePs,proto3" json:"total_op_time_ps,omitempty"`
	// Precision-related stats.
	PrecisionStats *PrecisionStats `protobuf:"bytes,13,opt,name=precision_stats,json=precisionStats,proto3" json:"precision_stats,omitempty"`
}

func (x *OpMetricsDb) Reset() {
	*x = OpMetricsDb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_protobuf_op_metrics_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpMetricsDb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpMetricsDb) ProtoMessage() {}

func (x *OpMetricsDb) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_protobuf_op_metrics_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpMetricsDb.ProtoReflect.Descriptor instead.
func (*OpMetricsDb) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_protobuf_op_metrics_proto_rawDescGZIP(), []int{3}
}

func (x *OpMetricsDb) GetMetricsDb() []*OpMetrics {
	if x != nil {
		return x.MetricsDb
	}
	return nil
}

func (x *OpMetricsDb) GetTotalHostInfeedEnqDurationPs() uint64 {
	if x != nil {
		return x.TotalHostInfeedEnqDurationPs
	}
	return 0
}

func (x *OpMetricsDb) GetTotalHostInfeedEnqStartTimestampPsDiff() uint64 {
	if x != nil {
		return x.TotalHostInfeedEnqStartTimestampPsDiff
	}
	return 0
}

func (x *OpMetricsDb) GetTotalTimePs() uint64 {
	if x != nil {
		return x.TotalTimePs
	}
	return 0
}

func (x *OpMetricsDb) GetTotalOpTimePs() uint64 {
	if x != nil {
		return x.TotalOpTimePs
	}
	return 0
}

func (x *OpMetricsDb) GetPrecisionStats() *PrecisionStats {
	if x != nil {
		return x.PrecisionStats
	}
	return nil
}

// Physical data layout in each tensor dimension.
type LayoutAnalysis_Dimension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Size of the data in this dimension.
	Size int32 `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`
	// Data must be padded to a multiple of alignment.
	Alignment int32 `protobuf:"varint,2,opt,name=alignment,proto3" json:"alignment,omitempty"`
	// What the dimension represents.
	Semantics LayoutDimensionSemantics `protobuf:"varint,3,opt,name=semantics,proto3,enum=tensorflow.profiler.LayoutDimensionSemantics" json:"semantics,omitempty"`
}

func (x *LayoutAnalysis_Dimension) Reset() {
	*x = LayoutAnalysis_Dimension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_protobuf_op_metrics_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LayoutAnalysis_Dimension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LayoutAnalysis_Dimension) ProtoMessage() {}

func (x *LayoutAnalysis_Dimension) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_protobuf_op_metrics_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LayoutAnalysis_Dimension.ProtoReflect.Descriptor instead.
func (*LayoutAnalysis_Dimension) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_protobuf_op_metrics_proto_rawDescGZIP(), []int{0, 0}
}

func (x *LayoutAnalysis_Dimension) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *LayoutAnalysis_Dimension) GetAlignment() int32 {
	if x != nil {
		return x.Alignment
	}
	return 0
}

func (x *LayoutAnalysis_Dimension) GetSemantics() LayoutDimensionSemantics {
	if x != nil {
		return x.Semantics
	}
	return LayoutDimensionSemantics_UNKNOWN_SEMANTICS
}

// Breakdown of memory accessed by operation type and memory space.
type OpMetrics_MemoryAccessed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationType OpMetrics_MemoryAccessed_OperationType `protobuf:"varint,1,opt,name=operation_type,json=operationType,proto3,enum=tensorflow.profiler.OpMetrics_MemoryAccessed_OperationType" json:"operation_type,omitempty"`
	// Device-specific id of memory space.
	MemorySpace   uint64 `protobuf:"varint,2,opt,name=memory_space,json=memorySpace,proto3" json:"memory_space,omitempty"`
	BytesAccessed uint64 `protobuf:"varint,3,opt,name=bytes_accessed,json=bytesAccessed,proto3" json:"bytes_accessed,omitempty"`
}

func (x *OpMetrics_MemoryAccessed) Reset() {
	*x = OpMetrics_MemoryAccessed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_protobuf_op_metrics_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpMetrics_MemoryAccessed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpMetrics_MemoryAccessed) ProtoMessage() {}

func (x *OpMetrics_MemoryAccessed) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_protobuf_op_metrics_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpMetrics_MemoryAccessed.ProtoReflect.Descriptor instead.
func (*OpMetrics_MemoryAccessed) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_protobuf_op_metrics_proto_rawDescGZIP(), []int{1, 0}
}

func (x *OpMetrics_MemoryAccessed) GetOperationType() OpMetrics_MemoryAccessed_OperationType {
	if x != nil {
		return x.OperationType
	}
	return OpMetrics_MemoryAccessed_UNKNOWN
}

func (x *OpMetrics_MemoryAccessed) GetMemorySpace() uint64 {
	if x != nil {
		return x.MemorySpace
	}
	return 0
}

func (x *OpMetrics_MemoryAccessed) GetBytesAccessed() uint64 {
	if x != nil {
		return x.BytesAccessed
	}
	return 0
}

var File_tensorflow_core_profiler_protobuf_op_metrics_proto protoreflect.FileDescriptor

var file_tensorflow_core_profiler_protobuf_op_metrics_proto_rawDesc = []byte{
	0x0a, 0x32, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x6f, 0x70, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x22, 0xec, 0x01, 0x0a, 0x0e, 0x4c, 0x61,
	0x79, 0x6f, 0x75, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x12, 0x4d, 0x0a, 0x0a,
	0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x8a, 0x01, 0x0a, 0x09,
	0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x4b, 0x0a, 0x09, 0x73,
	0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d,
	0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x44, 0x69, 0x6d, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x73, 0x52, 0x09, 0x73,
	0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x73, 0x22, 0xa5, 0x08, 0x0a, 0x09, 0x4f, 0x70, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x68, 0x6c, 0x6f, 0x5f, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x68,
	0x6c, 0x6f, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6c, 0x6f, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x65, 0x61,
	0x67, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x45, 0x61, 0x67,
	0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x73, 0x12, 0x1e, 0x0a,
	0x0b, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x73, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x73, 0x12, 0x20, 0x0a,
	0x0c, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x66, 0x6c, 0x6f, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x66, 0x6c, 0x6f, 0x70, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x69, 0x0a, 0x19,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f,
	0x62, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x52, 0x17,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x42, 0x72,
	0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x20, 0x0a, 0x0c, 0x64, 0x6d, 0x61, 0x5f, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x64,
	0x6d, 0x61, 0x53, 0x74, 0x61, 0x6c, 0x6c, 0x50, 0x73, 0x12, 0x3b, 0x0a, 0x06, 0x6c, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e,
	0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52, 0x06,
	0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x65, 0x64, 0x75, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x64, 0x65, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x44, 0x62, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65,
	0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6e, 0x75, 0x6d, 0x43, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x3c,
	0x0a, 0x1a, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72,
	0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x18, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x61, 0x75, 0x74, 0x6f, 0x74, 0x75, 0x6e, 0x65, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x61, 0x75, 0x74, 0x6f, 0x74, 0x75, 0x6e, 0x65, 0x64, 0x1a, 0xf1, 0x01, 0x0a, 0x0e, 0x4d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x62, 0x0a,
	0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x65, 0x64, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x22, 0x31, 0x0a, 0x0d, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x45, 0x41,
	0x44, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0x02, 0x4a, 0x04,
	0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x08, 0x10, 0x09, 0x4a, 0x04, 0x08, 0x09, 0x10, 0x0a,
	0x22, 0x64, 0x0a, 0x0e, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x31, 0x36,
	0x62, 0x69, 0x74, 0x5f, 0x70, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x63, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x31, 0x36, 0x62, 0x69, 0x74, 0x50, 0x73, 0x12, 0x28, 0x0a, 0x10,
	0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x33, 0x32, 0x62, 0x69, 0x74, 0x5f, 0x70, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x33,
	0x32, 0x62, 0x69, 0x74, 0x50, 0x73, 0x22, 0xb9, 0x03, 0x0a, 0x0b, 0x4f, 0x70, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x44, 0x62, 0x12, 0x3d, 0x0a, 0x0a, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x5f, 0x64, 0x62, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72,
	0x2e, 0x4f, 0x70, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x09, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x44, 0x62, 0x12, 0x47, 0x0a, 0x21, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x68,
	0x6f, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x71, 0x5f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x1c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x65, 0x65,
	0x64, 0x45, 0x6e, 0x71, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x73, 0x12, 0x5d,
	0x0a, 0x2d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x66,
	0x65, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x71, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x70, 0x73, 0x5f, 0x64, 0x69, 0x66, 0x66, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x26, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x48, 0x6f, 0x73, 0x74,
	0x49, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x45, 0x6e, 0x71, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x50, 0x73, 0x44, 0x69, 0x66, 0x66, 0x12, 0x22, 0x0a,
	0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x50,
	0x73, 0x12, 0x27, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6f, 0x70, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x70, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x4f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x73, 0x12, 0x4c, 0x0a, 0x0f, 0x70, 0x72,
	0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x4a, 0x04,
	0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07,
	0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x4a, 0x04, 0x08, 0x08, 0x10, 0x09, 0x4a, 0x04, 0x08, 0x09,
	0x10, 0x0a, 0x2a, 0x56, 0x0a, 0x18, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x44, 0x69, 0x6d, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x73, 0x12, 0x15,
	0x0a, 0x11, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x53, 0x45, 0x4d, 0x41, 0x4e, 0x54,
	0x49, 0x43, 0x53, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45,
	0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x41, 0x54, 0x43, 0x48, 0x10, 0x02, 0x12, 0x0b, 0x0a,
	0x07, 0x53, 0x50, 0x41, 0x54, 0x49, 0x41, 0x4c, 0x10, 0x03, 0x42, 0xda, 0x01, 0x0a, 0x17, 0x63,
	0x6f, 0x6d, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x42, 0x0e, 0x4f, 0x70, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x02, 0x50, 0x01, 0x5a, 0x40, 0x67, 0x69, 0x74, 0x65,
	0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x71, 0x63, 0x69, 0x69, 0x70, 0x2d, 0x69, 0x63, 0x70, 0x2f,
	0x74, 0x66, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2f, 0x74, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0xa2, 0x02, 0x03, 0x54,
	0x50, 0x58, 0xaa, 0x02, 0x13, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0xca, 0x02, 0x13, 0x54, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0xe2, 0x02,
	0x1f, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5c, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x72, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0xea, 0x02, 0x14, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x3a, 0x3a, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tensorflow_core_profiler_protobuf_op_metrics_proto_rawDescOnce sync.Once
	file_tensorflow_core_profiler_protobuf_op_metrics_proto_rawDescData = file_tensorflow_core_profiler_protobuf_op_metrics_proto_rawDesc
)

func file_tensorflow_core_profiler_protobuf_op_metrics_proto_rawDescGZIP() []byte {
	file_tensorflow_core_profiler_protobuf_op_metrics_proto_rawDescOnce.Do(func() {
		file_tensorflow_core_profiler_protobuf_op_metrics_proto_rawDescData = protoimpl.X.CompressGZIP(file_tensorflow_core_profiler_protobuf_op_metrics_proto_rawDescData)
	})
	return file_tensorflow_core_profiler_protobuf_op_metrics_proto_rawDescData
}

var file_tensorflow_core_profiler_protobuf_op_metrics_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_tensorflow_core_profiler_protobuf_op_metrics_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_tensorflow_core_profiler_protobuf_op_metrics_proto_goTypes = []interface{}{
	(LayoutDimensionSemantics)(0),               // 0: tensorflow.profiler.LayoutDimensionSemantics
	(OpMetrics_MemoryAccessed_OperationType)(0), // 1: tensorflow.profiler.OpMetrics.MemoryAccessed.OperationType
	(*LayoutAnalysis)(nil),                      // 2: tensorflow.profiler.LayoutAnalysis
	(*OpMetrics)(nil),                           // 3: tensorflow.profiler.OpMetrics
	(*PrecisionStats)(nil),                      // 4: tensorflow.profiler.PrecisionStats
	(*OpMetricsDb)(nil),                         // 5: tensorflow.profiler.OpMetricsDb
	(*LayoutAnalysis_Dimension)(nil),            // 6: tensorflow.profiler.LayoutAnalysis.Dimension
	(*OpMetrics_MemoryAccessed)(nil),            // 7: tensorflow.profiler.OpMetrics.MemoryAccessed
}
var file_tensorflow_core_profiler_protobuf_op_metrics_proto_depIdxs = []int32{
	6, // 0: tensorflow.profiler.LayoutAnalysis.dimensions:type_name -> tensorflow.profiler.LayoutAnalysis.Dimension
	7, // 1: tensorflow.profiler.OpMetrics.memory_accessed_breakdown:type_name -> tensorflow.profiler.OpMetrics.MemoryAccessed
	2, // 2: tensorflow.profiler.OpMetrics.layout:type_name -> tensorflow.profiler.LayoutAnalysis
	5, // 3: tensorflow.profiler.OpMetrics.children:type_name -> tensorflow.profiler.OpMetricsDb
	3, // 4: tensorflow.profiler.OpMetricsDb.metrics_db:type_name -> tensorflow.profiler.OpMetrics
	4, // 5: tensorflow.profiler.OpMetricsDb.precision_stats:type_name -> tensorflow.profiler.PrecisionStats
	0, // 6: tensorflow.profiler.LayoutAnalysis.Dimension.semantics:type_name -> tensorflow.profiler.LayoutDimensionSemantics
	1, // 7: tensorflow.profiler.OpMetrics.MemoryAccessed.operation_type:type_name -> tensorflow.profiler.OpMetrics.MemoryAccessed.OperationType
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_tensorflow_core_profiler_protobuf_op_metrics_proto_init() }
func file_tensorflow_core_profiler_protobuf_op_metrics_proto_init() {
	if File_tensorflow_core_profiler_protobuf_op_metrics_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tensorflow_core_profiler_protobuf_op_metrics_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LayoutAnalysis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_profiler_protobuf_op_metrics_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_profiler_protobuf_op_metrics_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrecisionStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_profiler_protobuf_op_metrics_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpMetricsDb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_profiler_protobuf_op_metrics_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LayoutAnalysis_Dimension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_profiler_protobuf_op_metrics_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpMetrics_MemoryAccessed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tensorflow_core_profiler_protobuf_op_metrics_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tensorflow_core_profiler_protobuf_op_metrics_proto_goTypes,
		DependencyIndexes: file_tensorflow_core_profiler_protobuf_op_metrics_proto_depIdxs,
		EnumInfos:         file_tensorflow_core_profiler_protobuf_op_metrics_proto_enumTypes,
		MessageInfos:      file_tensorflow_core_profiler_protobuf_op_metrics_proto_msgTypes,
	}.Build()
	File_tensorflow_core_profiler_protobuf_op_metrics_proto = out.File
	file_tensorflow_core_profiler_protobuf_op_metrics_proto_rawDesc = nil
	file_tensorflow_core_profiler_protobuf_op_metrics_proto_goTypes = nil
	file_tensorflow_core_profiler_protobuf_op_metrics_proto_depIdxs = nil
}
