// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: tensorflow/core/profiler/protobuf/pod_stats.proto

package protobuf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StepBreakdownEvents struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *StepBreakdownEvents) Reset() {
	*x = StepBreakdownEvents{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_protobuf_pod_stats_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StepBreakdownEvents) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StepBreakdownEvents) ProtoMessage() {}

func (x *StepBreakdownEvents) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_protobuf_pod_stats_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StepBreakdownEvents.ProtoReflect.Descriptor instead.
func (*StepBreakdownEvents) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_protobuf_pod_stats_proto_rawDescGZIP(), []int{0}
}

func (x *StepBreakdownEvents) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *StepBreakdownEvents) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// A database of PodStats records.
type PodStatsDatabase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// All PodStats records, one for each row in the PodStats tool.
	PodStatsRecord []*PodStatsRecord `protobuf:"bytes,1,rep,name=pod_stats_record,json=podStatsRecord,proto3" json:"pod_stats_record,omitempty"`
	// Error and warning messages for diagnosing profiling issues.
	Diagnostics *Diagnostics `protobuf:"bytes,3,opt,name=diagnostics,proto3" json:"diagnostics,omitempty"`
	// A map from event type number to event name string for step breakdown.
	StepBreakdownEvents []*StepBreakdownEvents `protobuf:"bytes,4,rep,name=step_breakdown_events,json=stepBreakdownEvents,proto3" json:"step_breakdown_events,omitempty"`
}

func (x *PodStatsDatabase) Reset() {
	*x = PodStatsDatabase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_protobuf_pod_stats_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodStatsDatabase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodStatsDatabase) ProtoMessage() {}

func (x *PodStatsDatabase) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_protobuf_pod_stats_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodStatsDatabase.ProtoReflect.Descriptor instead.
func (*PodStatsDatabase) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_protobuf_pod_stats_proto_rawDescGZIP(), []int{1}
}

func (x *PodStatsDatabase) GetPodStatsRecord() []*PodStatsRecord {
	if x != nil {
		return x.PodStatsRecord
	}
	return nil
}

func (x *PodStatsDatabase) GetDiagnostics() *Diagnostics {
	if x != nil {
		return x.Diagnostics
	}
	return nil
}

func (x *PodStatsDatabase) GetStepBreakdownEvents() []*StepBreakdownEvents {
	if x != nil {
		return x.StepBreakdownEvents
	}
	return nil
}

// Next ID: 20
// There is one PodStatsRecord for each step traced on each compute node.
type PodStatsRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The host name where the trace was collected.
	HostName string `protobuf:"bytes,1,opt,name=host_name,json=hostName,proto3" json:"host_name,omitempty"`
	// The TPU global chip id where the trace was collected.
	ChipId int32 `protobuf:"varint,2,opt,name=chip_id,json=chipId,proto3" json:"chip_id,omitempty"`
	// The TPU node id where the trace was collected.
	NodeId int32 `protobuf:"varint,3,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	// The step number.
	StepNum uint32 `protobuf:"varint,4,opt,name=step_num,json=stepNum,proto3" json:"step_num,omitempty"`
	// The step duration in micro-seconds.
	TotalDurationUs float64 `protobuf:"fixed64,5,opt,name=total_duration_us,json=totalDurationUs,proto3" json:"total_duration_us,omitempty"`
	// Breakdown the durations for each event type in micro-seconds.
	StepBreakdownUs map[int32]float64 `protobuf:"bytes,19,rep,name=step_breakdown_us,json=stepBreakdownUs,proto3" json:"step_breakdown_us,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	// Indicates the bottleneck out of the above mentioned metrics.
	Bottleneck string `protobuf:"bytes,14,opt,name=bottleneck,proto3" json:"bottleneck,omitempty"`
}

func (x *PodStatsRecord) Reset() {
	*x = PodStatsRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_protobuf_pod_stats_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodStatsRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodStatsRecord) ProtoMessage() {}

func (x *PodStatsRecord) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_protobuf_pod_stats_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodStatsRecord.ProtoReflect.Descriptor instead.
func (*PodStatsRecord) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_protobuf_pod_stats_proto_rawDescGZIP(), []int{2}
}

func (x *PodStatsRecord) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *PodStatsRecord) GetChipId() int32 {
	if x != nil {
		return x.ChipId
	}
	return 0
}

func (x *PodStatsRecord) GetNodeId() int32 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *PodStatsRecord) GetStepNum() uint32 {
	if x != nil {
		return x.StepNum
	}
	return 0
}

func (x *PodStatsRecord) GetTotalDurationUs() float64 {
	if x != nil {
		return x.TotalDurationUs
	}
	return 0
}

func (x *PodStatsRecord) GetStepBreakdownUs() map[int32]float64 {
	if x != nil {
		return x.StepBreakdownUs
	}
	return nil
}

func (x *PodStatsRecord) GetBottleneck() string {
	if x != nil {
		return x.Bottleneck
	}
	return ""
}

var File_tensorflow_core_profiler_protobuf_pod_stats_proto protoreflect.FileDescriptor

var file_tensorflow_core_profiler_protobuf_pod_stats_proto_rawDesc = []byte{
	0x0a, 0x31, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x70, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x13, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x1a, 0x33, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x39, 0x0a,
	0x13, 0x53, 0x74, 0x65, 0x70, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x89, 0x02, 0x0a, 0x10, 0x50, 0x6f, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x4d, 0x0a,
	0x10, 0x70, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x50, 0x6f,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x0e, 0x70, 0x6f,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x42, 0x0a, 0x0b,
	0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x52, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x12, 0x5c, 0x0a, 0x15, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f,
	0x77, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x64,
	0x6f, 0x77, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x13, 0x73, 0x74, 0x65, 0x70, 0x42,
	0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x4a, 0x04,
	0x08, 0x02, 0x10, 0x03, 0x22, 0xb8, 0x03, 0x0a, 0x0e, 0x50, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x69, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x6e,
	0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x65, 0x70, 0x4e, 0x75,
	0x6d, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x12, 0x64, 0x0a,
	0x11, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x5f,
	0x75, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x50,
	0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x53, 0x74,
	0x65, 0x70, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x55, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0f, 0x73, 0x74, 0x65, 0x70, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77,
	0x6e, 0x55, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x6e, 0x65, 0x63,
	0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x6e,
	0x65, 0x63, 0x6b, 0x1a, 0x42, 0x0a, 0x14, 0x53, 0x74, 0x65, 0x70, 0x42, 0x72, 0x65, 0x61, 0x6b,
	0x64, 0x6f, 0x77, 0x6e, 0x55, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x4a, 0x04, 0x08,
	0x07, 0x10, 0x08, 0x4a, 0x04, 0x08, 0x08, 0x10, 0x09, 0x4a, 0x04, 0x08, 0x09, 0x10, 0x0a, 0x4a,
	0x04, 0x08, 0x0a, 0x10, 0x0b, 0x4a, 0x04, 0x08, 0x0b, 0x10, 0x0c, 0x4a, 0x04, 0x08, 0x0c, 0x10,
	0x0d, 0x4a, 0x04, 0x08, 0x0d, 0x10, 0x0e, 0x4a, 0x04, 0x08, 0x0f, 0x10, 0x10, 0x4a, 0x04, 0x08,
	0x10, 0x10, 0x11, 0x4a, 0x04, 0x08, 0x11, 0x10, 0x12, 0x4a, 0x04, 0x08, 0x12, 0x10, 0x13, 0x42,
	0xd9, 0x01, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x42, 0x0d, 0x50, 0x6f, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x02, 0x50, 0x01, 0x5a, 0x40,
	0x67, 0x69, 0x74, 0x65, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x71, 0x63, 0x69, 0x69, 0x70, 0x2d,
	0x69, 0x63, 0x70, 0x2f, 0x74, 0x66, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2f, 0x74,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0xa2, 0x02, 0x03, 0x54, 0x50, 0x58, 0xaa, 0x02, 0x13, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0xca, 0x02, 0x13, 0x54,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x72, 0xe2, 0x02, 0x1f, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5c,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x14, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f,
	0x77, 0x3a, 0x3a, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_tensorflow_core_profiler_protobuf_pod_stats_proto_rawDescOnce sync.Once
	file_tensorflow_core_profiler_protobuf_pod_stats_proto_rawDescData = file_tensorflow_core_profiler_protobuf_pod_stats_proto_rawDesc
)

func file_tensorflow_core_profiler_protobuf_pod_stats_proto_rawDescGZIP() []byte {
	file_tensorflow_core_profiler_protobuf_pod_stats_proto_rawDescOnce.Do(func() {
		file_tensorflow_core_profiler_protobuf_pod_stats_proto_rawDescData = protoimpl.X.CompressGZIP(file_tensorflow_core_profiler_protobuf_pod_stats_proto_rawDescData)
	})
	return file_tensorflow_core_profiler_protobuf_pod_stats_proto_rawDescData
}

var file_tensorflow_core_profiler_protobuf_pod_stats_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_tensorflow_core_profiler_protobuf_pod_stats_proto_goTypes = []interface{}{
	(*StepBreakdownEvents)(nil), // 0: tensorflow.profiler.StepBreakdownEvents
	(*PodStatsDatabase)(nil),    // 1: tensorflow.profiler.PodStatsDatabase
	(*PodStatsRecord)(nil),      // 2: tensorflow.profiler.PodStatsRecord
	nil,                         // 3: tensorflow.profiler.PodStatsRecord.StepBreakdownUsEntry
	(*Diagnostics)(nil),         // 4: tensorflow.profiler.Diagnostics
}
var file_tensorflow_core_profiler_protobuf_pod_stats_proto_depIdxs = []int32{
	2, // 0: tensorflow.profiler.PodStatsDatabase.pod_stats_record:type_name -> tensorflow.profiler.PodStatsRecord
	4, // 1: tensorflow.profiler.PodStatsDatabase.diagnostics:type_name -> tensorflow.profiler.Diagnostics
	0, // 2: tensorflow.profiler.PodStatsDatabase.step_breakdown_events:type_name -> tensorflow.profiler.StepBreakdownEvents
	3, // 3: tensorflow.profiler.PodStatsRecord.step_breakdown_us:type_name -> tensorflow.profiler.PodStatsRecord.StepBreakdownUsEntry
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_tensorflow_core_profiler_protobuf_pod_stats_proto_init() }
func file_tensorflow_core_profiler_protobuf_pod_stats_proto_init() {
	if File_tensorflow_core_profiler_protobuf_pod_stats_proto != nil {
		return
	}
	file_tensorflow_core_profiler_protobuf_diagnostics_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_tensorflow_core_profiler_protobuf_pod_stats_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StepBreakdownEvents); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_profiler_protobuf_pod_stats_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodStatsDatabase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_profiler_protobuf_pod_stats_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodStatsRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tensorflow_core_profiler_protobuf_pod_stats_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tensorflow_core_profiler_protobuf_pod_stats_proto_goTypes,
		DependencyIndexes: file_tensorflow_core_profiler_protobuf_pod_stats_proto_depIdxs,
		MessageInfos:      file_tensorflow_core_profiler_protobuf_pod_stats_proto_msgTypes,
	}.Build()
	File_tensorflow_core_profiler_protobuf_pod_stats_proto = out.File
	file_tensorflow_core_profiler_protobuf_pod_stats_proto_rawDesc = nil
	file_tensorflow_core_profiler_protobuf_pod_stats_proto_goTypes = nil
	file_tensorflow_core_profiler_protobuf_pod_stats_proto_depIdxs = nil
}
