// This proto is used for analysis of TensorFlow runtime memory profile.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: tensorflow/core/profiler/protobuf/memory_profile.proto

package protobuf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The memory activity that causes change of memory state.
type MemoryActivity int32

const (
	MemoryActivity_UNKNOWN_ACTIVITY MemoryActivity = 0
	// Memory allocation in heap.
	MemoryActivity_ALLOCATION MemoryActivity = 1
	// Memory deallocation in heap.
	MemoryActivity_DEALLOCATION MemoryActivity = 2
	// Memory reservation for stack.
	MemoryActivity_RESERVATION MemoryActivity = 3
	// Expansion of existing memory allocation.
	MemoryActivity_EXPANSION MemoryActivity = 4
)

// Enum value maps for MemoryActivity.
var (
	MemoryActivity_name = map[int32]string{
		0: "UNKNOWN_ACTIVITY",
		1: "ALLOCATION",
		2: "DEALLOCATION",
		3: "RESERVATION",
		4: "EXPANSION",
	}
	MemoryActivity_value = map[string]int32{
		"UNKNOWN_ACTIVITY": 0,
		"ALLOCATION":       1,
		"DEALLOCATION":     2,
		"RESERVATION":      3,
		"EXPANSION":        4,
	}
)

func (x MemoryActivity) Enum() *MemoryActivity {
	p := new(MemoryActivity)
	*p = x
	return p
}

func (x MemoryActivity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MemoryActivity) Descriptor() protoreflect.EnumDescriptor {
	return file_tensorflow_core_profiler_protobuf_memory_profile_proto_enumTypes[0].Descriptor()
}

func (MemoryActivity) Type() protoreflect.EnumType {
	return &file_tensorflow_core_profiler_protobuf_memory_profile_proto_enumTypes[0]
}

func (x MemoryActivity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MemoryActivity.Descriptor instead.
func (MemoryActivity) EnumDescriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_protobuf_memory_profile_proto_rawDescGZIP(), []int{0}
}

// The aggregated memory stats including heap, stack, free memory and
// fragmentation at a specific time.
type MemoryAggregationStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Memory usage by stack reservation, in bytes.
	StackReservedBytes int64 `protobuf:"varint,1,opt,name=stack_reserved_bytes,json=stackReservedBytes,proto3" json:"stack_reserved_bytes,omitempty"`
	// Memory usage by heap allocation, in bytes.
	HeapAllocatedBytes int64 `protobuf:"varint,2,opt,name=heap_allocated_bytes,json=heapAllocatedBytes,proto3" json:"heap_allocated_bytes,omitempty"`
	// Free memory available for allocation or reservation, in bytes.
	FreeMemoryBytes int64 `protobuf:"varint,3,opt,name=free_memory_bytes,json=freeMemoryBytes,proto3" json:"free_memory_bytes,omitempty"`
	// Fragmentation value within [0, 1].
	Fragmentation float64 `protobuf:"fixed64,4,opt,name=fragmentation,proto3" json:"fragmentation,omitempty"`
	// The peak memory usage over the entire program (lifetime of memory
	// allocator). It monotonically increases with upper limit as memory capacity.
	PeakBytesInUse int64 `protobuf:"varint,5,opt,name=peak_bytes_in_use,json=peakBytesInUse,proto3" json:"peak_bytes_in_use,omitempty"`
}

func (x *MemoryAggregationStats) Reset() {
	*x = MemoryAggregationStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_protobuf_memory_profile_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemoryAggregationStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemoryAggregationStats) ProtoMessage() {}

func (x *MemoryAggregationStats) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_protobuf_memory_profile_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemoryAggregationStats.ProtoReflect.Descriptor instead.
func (*MemoryAggregationStats) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_protobuf_memory_profile_proto_rawDescGZIP(), []int{0}
}

func (x *MemoryAggregationStats) GetStackReservedBytes() int64 {
	if x != nil {
		return x.StackReservedBytes
	}
	return 0
}

func (x *MemoryAggregationStats) GetHeapAllocatedBytes() int64 {
	if x != nil {
		return x.HeapAllocatedBytes
	}
	return 0
}

func (x *MemoryAggregationStats) GetFreeMemoryBytes() int64 {
	if x != nil {
		return x.FreeMemoryBytes
	}
	return 0
}

func (x *MemoryAggregationStats) GetFragmentation() float64 {
	if x != nil {
		return x.Fragmentation
	}
	return 0
}

func (x *MemoryAggregationStats) GetPeakBytesInUse() int64 {
	if x != nil {
		return x.PeakBytesInUse
	}
	return 0
}

// The metadata associated with each memory allocation/deallocation. It can
// also be interpreted as the metadata for the delta of memory state.
// Next ID: 10
type MemoryActivityMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The activity associated with the MemoryProfileSnapshot.
	MemoryActivity MemoryActivity `protobuf:"varint,1,opt,name=memory_activity,json=memoryActivity,proto3,enum=tensorflow.profiler.MemoryActivity" json:"memory_activity,omitempty"`
	// The requested memory size in bytes from the caller of memory allocation.
	// Should be a positive number.
	RequestedBytes int64 `protobuf:"varint,2,opt,name=requested_bytes,json=requestedBytes,proto3" json:"requested_bytes,omitempty"`
	// The allocated (block/chunk) size for the memory allocation.
	// Should be a positive number.
	AllocationBytes int64 `protobuf:"varint,3,opt,name=allocation_bytes,json=allocationBytes,proto3" json:"allocation_bytes,omitempty"`
	// Starting address of the allocated memory chunk/block.
	Address uint64 `protobuf:"varint,4,opt,name=address,proto3" json:"address,omitempty"`
	// TensorFlow Op name for the memory activity.
	TfOpName string `protobuf:"bytes,5,opt,name=tf_op_name,json=tfOpName,proto3" json:"tf_op_name,omitempty"`
	// Step Id at which the memory activity occurred.
	StepId int64 `protobuf:"varint,6,opt,name=step_id,json=stepId,proto3" json:"step_id,omitempty"`
	// Tensor memory region type including "output", "temp", "persist", and
	// "dynamic".
	RegionType string `protobuf:"bytes,7,opt,name=region_type,json=regionType,proto3" json:"region_type,omitempty"`
	// From enum DataType defined in tensorflow/core/framework/types.proto.
	DataType string `protobuf:"bytes,8,opt,name=data_type,json=dataType,proto3" json:"data_type,omitempty"`
	// Tensor shape printed in string, e.g. "[3, 3, 512, 512]".
	TensorShape string `protobuf:"bytes,9,opt,name=tensor_shape,json=tensorShape,proto3" json:"tensor_shape,omitempty"`
}

func (x *MemoryActivityMetadata) Reset() {
	*x = MemoryActivityMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_protobuf_memory_profile_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemoryActivityMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemoryActivityMetadata) ProtoMessage() {}

func (x *MemoryActivityMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_protobuf_memory_profile_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemoryActivityMetadata.ProtoReflect.Descriptor instead.
func (*MemoryActivityMetadata) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_protobuf_memory_profile_proto_rawDescGZIP(), []int{1}
}

func (x *MemoryActivityMetadata) GetMemoryActivity() MemoryActivity {
	if x != nil {
		return x.MemoryActivity
	}
	return MemoryActivity_UNKNOWN_ACTIVITY
}

func (x *MemoryActivityMetadata) GetRequestedBytes() int64 {
	if x != nil {
		return x.RequestedBytes
	}
	return 0
}

func (x *MemoryActivityMetadata) GetAllocationBytes() int64 {
	if x != nil {
		return x.AllocationBytes
	}
	return 0
}

func (x *MemoryActivityMetadata) GetAddress() uint64 {
	if x != nil {
		return x.Address
	}
	return 0
}

func (x *MemoryActivityMetadata) GetTfOpName() string {
	if x != nil {
		return x.TfOpName
	}
	return ""
}

func (x *MemoryActivityMetadata) GetStepId() int64 {
	if x != nil {
		return x.StepId
	}
	return 0
}

func (x *MemoryActivityMetadata) GetRegionType() string {
	if x != nil {
		return x.RegionType
	}
	return ""
}

func (x *MemoryActivityMetadata) GetDataType() string {
	if x != nil {
		return x.DataType
	}
	return ""
}

func (x *MemoryActivityMetadata) GetTensorShape() string {
	if x != nil {
		return x.TensorShape
	}
	return ""
}

// Profile snapshot of the TensorFlow memory at runtime, including
// MemoryAggregationStats (memory usage breakdown etc.), and
// MemoryActivityMetadata (allocation or deallocation, TF Op name etc.).
type MemoryProfileSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Memory activity timestamp.
	TimeOffsetPs int64 `protobuf:"varint,1,opt,name=time_offset_ps,json=timeOffsetPs,proto3" json:"time_offset_ps,omitempty"`
	// The memory aggregation stats at the snapshot time.
	AggregationStats *MemoryAggregationStats `protobuf:"bytes,2,opt,name=aggregation_stats,json=aggregationStats,proto3" json:"aggregation_stats,omitempty"`
	// The metadata for the memory activity at the snapshot time.
	ActivityMetadata *MemoryActivityMetadata `protobuf:"bytes,3,opt,name=activity_metadata,json=activityMetadata,proto3" json:"activity_metadata,omitempty"`
}

func (x *MemoryProfileSnapshot) Reset() {
	*x = MemoryProfileSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_protobuf_memory_profile_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemoryProfileSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemoryProfileSnapshot) ProtoMessage() {}

func (x *MemoryProfileSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_protobuf_memory_profile_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemoryProfileSnapshot.ProtoReflect.Descriptor instead.
func (*MemoryProfileSnapshot) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_protobuf_memory_profile_proto_rawDescGZIP(), []int{2}
}

func (x *MemoryProfileSnapshot) GetTimeOffsetPs() int64 {
	if x != nil {
		return x.TimeOffsetPs
	}
	return 0
}

func (x *MemoryProfileSnapshot) GetAggregationStats() *MemoryAggregationStats {
	if x != nil {
		return x.AggregationStats
	}
	return nil
}

func (x *MemoryProfileSnapshot) GetActivityMetadata() *MemoryActivityMetadata {
	if x != nil {
		return x.ActivityMetadata
	}
	return nil
}

// The summary of memory profile within the profiling window duration.
type MemoryProfileSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The peak memory usage over the entire program (lifetime of memory
	// allocator).
	PeakBytesUsageLifetime int64 `protobuf:"varint,1,opt,name=peak_bytes_usage_lifetime,json=peakBytesUsageLifetime,proto3" json:"peak_bytes_usage_lifetime,omitempty"`
	// The peak memory usage stats within the profiling window.
	PeakStats *MemoryAggregationStats `protobuf:"bytes,2,opt,name=peak_stats,json=peakStats,proto3" json:"peak_stats,omitempty"`
	// The timestamp for peak memory usage within the profiling window.
	PeakStatsTimePs int64 `protobuf:"varint,3,opt,name=peak_stats_time_ps,json=peakStatsTimePs,proto3" json:"peak_stats_time_ps,omitempty"`
	// The memory capacity of the allocator.
	MemoryCapacity int64 `protobuf:"varint,4,opt,name=memory_capacity,json=memoryCapacity,proto3" json:"memory_capacity,omitempty"`
}

func (x *MemoryProfileSummary) Reset() {
	*x = MemoryProfileSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_protobuf_memory_profile_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemoryProfileSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemoryProfileSummary) ProtoMessage() {}

func (x *MemoryProfileSummary) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_protobuf_memory_profile_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemoryProfileSummary.ProtoReflect.Descriptor instead.
func (*MemoryProfileSummary) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_protobuf_memory_profile_proto_rawDescGZIP(), []int{3}
}

func (x *MemoryProfileSummary) GetPeakBytesUsageLifetime() int64 {
	if x != nil {
		return x.PeakBytesUsageLifetime
	}
	return 0
}

func (x *MemoryProfileSummary) GetPeakStats() *MemoryAggregationStats {
	if x != nil {
		return x.PeakStats
	}
	return nil
}

func (x *MemoryProfileSummary) GetPeakStatsTimePs() int64 {
	if x != nil {
		return x.PeakStatsTimePs
	}
	return 0
}

func (x *MemoryProfileSummary) GetMemoryCapacity() int64 {
	if x != nil {
		return x.MemoryCapacity
	}
	return 0
}

// The active memory allocations at the peak memory usage.
type ActiveAllocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The index of a snapshot in the time-sorted list, used to fetch the
	// MemoryActivityMetadata at front end from the memory_profile_snapshots list.
	SnapshotIndex int64 `protobuf:"varint,1,opt,name=snapshot_index,json=snapshotIndex,proto3" json:"snapshot_index,omitempty"`
	// The index of MemoryActivityMetadata in the special_allocations list.
	SpecialIndex int64 `protobuf:"varint,2,opt,name=special_index,json=specialIndex,proto3" json:"special_index,omitempty"`
	// Number of occurrences for identical memory allocations.
	NumOccurrences int64 `protobuf:"varint,3,opt,name=num_occurrences,json=numOccurrences,proto3" json:"num_occurrences,omitempty"`
}

func (x *ActiveAllocation) Reset() {
	*x = ActiveAllocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_protobuf_memory_profile_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActiveAllocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActiveAllocation) ProtoMessage() {}

func (x *ActiveAllocation) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_protobuf_memory_profile_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActiveAllocation.ProtoReflect.Descriptor instead.
func (*ActiveAllocation) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_protobuf_memory_profile_proto_rawDescGZIP(), []int{4}
}

func (x *ActiveAllocation) GetSnapshotIndex() int64 {
	if x != nil {
		return x.SnapshotIndex
	}
	return 0
}

func (x *ActiveAllocation) GetSpecialIndex() int64 {
	if x != nil {
		return x.SpecialIndex
	}
	return 0
}

func (x *ActiveAllocation) GetNumOccurrences() int64 {
	if x != nil {
		return x.NumOccurrences
	}
	return 0
}

// Memory profile snapshots per memory allocator.
type PerAllocatorMemoryProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of MemoryProfileSnapshots referenced by <active_allocations>.
	MemoryProfileSnapshots []*MemoryProfileSnapshot `protobuf:"bytes,1,rep,name=memory_profile_snapshots,json=memoryProfileSnapshots,proto3" json:"memory_profile_snapshots,omitempty"`
	// The summary of memory profile (e.g. the peak memory usage).
	ProfileSummary *MemoryProfileSummary `protobuf:"bytes,2,opt,name=profile_summary,json=profileSummary,proto3" json:"profile_summary,omitempty"`
	// The rows in the table of active allocations at peak memory usage within
	// profiling window.
	ActiveAllocations []*ActiveAllocation `protobuf:"bytes,3,rep,name=active_allocations,json=activeAllocations,proto3" json:"active_allocations,omitempty"`
	// The special allocations (e.g. pre-allocated heap memory, stack reservation)
	// that are not captured in the MemoryActivityMetadata of
	// memory_profile_snapshots. Need to handle separately.
	SpecialAllocations []*MemoryActivityMetadata `protobuf:"bytes,4,rep,name=special_allocations,json=specialAllocations,proto3" json:"special_allocations,omitempty"`
	// A list of MemoryProfileSnapshots sampled from all the snapshots during the
	// profiling window. It is used to display the memory timeline graph in the
	// frontend. The snapshots are sorted by timestamp.
	SampledTimelineSnapshots []*MemoryProfileSnapshot `protobuf:"bytes,5,rep,name=sampled_timeline_snapshots,json=sampledTimelineSnapshots,proto3" json:"sampled_timeline_snapshots,omitempty"`
}

func (x *PerAllocatorMemoryProfile) Reset() {
	*x = PerAllocatorMemoryProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_protobuf_memory_profile_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerAllocatorMemoryProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerAllocatorMemoryProfile) ProtoMessage() {}

func (x *PerAllocatorMemoryProfile) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_protobuf_memory_profile_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerAllocatorMemoryProfile.ProtoReflect.Descriptor instead.
func (*PerAllocatorMemoryProfile) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_protobuf_memory_profile_proto_rawDescGZIP(), []int{5}
}

func (x *PerAllocatorMemoryProfile) GetMemoryProfileSnapshots() []*MemoryProfileSnapshot {
	if x != nil {
		return x.MemoryProfileSnapshots
	}
	return nil
}

func (x *PerAllocatorMemoryProfile) GetProfileSummary() *MemoryProfileSummary {
	if x != nil {
		return x.ProfileSummary
	}
	return nil
}

func (x *PerAllocatorMemoryProfile) GetActiveAllocations() []*ActiveAllocation {
	if x != nil {
		return x.ActiveAllocations
	}
	return nil
}

func (x *PerAllocatorMemoryProfile) GetSpecialAllocations() []*MemoryActivityMetadata {
	if x != nil {
		return x.SpecialAllocations
	}
	return nil
}

func (x *PerAllocatorMemoryProfile) GetSampledTimelineSnapshots() []*MemoryProfileSnapshot {
	if x != nil {
		return x.SampledTimelineSnapshots
	}
	return nil
}

// Data for memory usage analysis in one host.
type MemoryProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A map from memory allocator's id to PerAllocatorMemoryProfile for memory
	// usage analysis on this host.
	MemoryProfilePerAllocator map[string]*PerAllocatorMemoryProfile `protobuf:"bytes,1,rep,name=memory_profile_per_allocator,json=memoryProfilePerAllocator,proto3" json:"memory_profile_per_allocator,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Number of hosts profiled, used to populate host selection list at front
	// end.
	NumHosts int32 `protobuf:"varint,2,opt,name=num_hosts,json=numHosts,proto3" json:"num_hosts,omitempty"`
	// Ids for profiled memory allocators, used to populate memory selection list
	// at front end.
	MemoryIds []string `protobuf:"bytes,3,rep,name=memory_ids,json=memoryIds,proto3" json:"memory_ids,omitempty"`
	// Version number of MemoryProfile proto.
	Version int32 `protobuf:"varint,5,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *MemoryProfile) Reset() {
	*x = MemoryProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_protobuf_memory_profile_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemoryProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemoryProfile) ProtoMessage() {}

func (x *MemoryProfile) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_protobuf_memory_profile_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemoryProfile.ProtoReflect.Descriptor instead.
func (*MemoryProfile) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_protobuf_memory_profile_proto_rawDescGZIP(), []int{6}
}

func (x *MemoryProfile) GetMemoryProfilePerAllocator() map[string]*PerAllocatorMemoryProfile {
	if x != nil {
		return x.MemoryProfilePerAllocator
	}
	return nil
}

func (x *MemoryProfile) GetNumHosts() int32 {
	if x != nil {
		return x.NumHosts
	}
	return 0
}

func (x *MemoryProfile) GetMemoryIds() []string {
	if x != nil {
		return x.MemoryIds
	}
	return nil
}

func (x *MemoryProfile) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

var File_tensorflow_core_profiler_protobuf_memory_profile_proto protoreflect.FileDescriptor

var file_tensorflow_core_profiler_protobuf_memory_profile_proto_rawDesc = []byte{
	0x0a, 0x36, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x22, 0xf9, 0x01,
	0x0a, 0x16, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x68, 0x65,
	0x61, 0x70, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x68, 0x65, 0x61, 0x70, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11,
	0x66, 0x72, 0x65, 0x65, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x66, 0x72, 0x65, 0x65, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x72, 0x61, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0d, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29,
	0x0a, 0x11, 0x70, 0x65, 0x61, 0x6b, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x5f,
	0x75, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x70, 0x65, 0x61, 0x6b, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x49, 0x6e, 0x55, 0x73, 0x65, 0x22, 0xec, 0x02, 0x0a, 0x16, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x4c, 0x0a, 0x0f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e,
	0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x52, 0x0e, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x61,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x1c, 0x0a, 0x0a, 0x74, 0x66, 0x5f, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x66, 0x4f, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x73, 0x74, 0x65, 0x70, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f,
	0x73, 0x68, 0x61, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x53, 0x68, 0x61, 0x70, 0x65, 0x22, 0xf1, 0x01, 0x0a, 0x15, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x5f, 0x70, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x50, 0x73, 0x12, 0x58, 0x0a, 0x11, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x52, 0x10, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x58, 0x0a, 0x11, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x10, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xf3, 0x01, 0x0a,
	0x14, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x39, 0x0a, 0x19, 0x70, 0x65, 0x61, 0x6b, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x70, 0x65, 0x61, 0x6b, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x55, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x4a, 0x0a, 0x0a, 0x70, 0x65, 0x61, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x09, 0x70, 0x65, 0x61, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x12,
	0x70, 0x65, 0x61, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x70, 0x65, 0x61, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x22, 0x87, 0x01, 0x0a, 0x10, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x27, 0x0a, 0x0f, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x63, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6e, 0x75,
	0x6d, 0x4f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x22, 0xf3, 0x03, 0x0a,
	0x19, 0x50, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x64, 0x0a, 0x18, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x74,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x72, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x16, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73,
	0x12, 0x52, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x12, 0x54, 0x0a, 0x12, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x41,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5c, 0x0a, 0x13, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x12, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x41, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x68, 0x0a, 0x1a, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x74,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x72, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x18, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x73, 0x22, 0xee, 0x02, 0x0a, 0x0d, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x1c, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x61, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x74, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x72, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e,
	0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x65, 0x72,
	0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x19,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x65, 0x72,
	0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x75, 0x6d,
	0x5f, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6e, 0x75,
	0x6d, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x49, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a,
	0x7c, 0x0a, 0x1e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x50, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x44, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x50, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x4a, 0x04, 0x08,
	0x04, 0x10, 0x05, 0x2a, 0x68, 0x0a, 0x0e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x41,
	0x4c, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x44,
	0x45, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x0f, 0x0a,
	0x0b, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x0d,
	0x0a, 0x09, 0x45, 0x58, 0x50, 0x41, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x42, 0xde, 0x01,
	0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x42, 0x12, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x02, 0x50,
	0x01, 0x5a, 0x40, 0x67, 0x69, 0x74, 0x65, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x71, 0x63, 0x69,
	0x69, 0x70, 0x2d, 0x69, 0x63, 0x70, 0x2f, 0x74, 0x66, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e,
	0x67, 0x2f, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0xa2, 0x02, 0x03, 0x54, 0x50, 0x58, 0xaa, 0x02, 0x13, 0x54, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0xca,
	0x02, 0x13, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5c, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x72, 0xe2, 0x02, 0x1f, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c,
	0x6f, 0x77, 0x5c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x14, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x66, 0x6c, 0x6f, 0x77, 0x3a, 0x3a, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tensorflow_core_profiler_protobuf_memory_profile_proto_rawDescOnce sync.Once
	file_tensorflow_core_profiler_protobuf_memory_profile_proto_rawDescData = file_tensorflow_core_profiler_protobuf_memory_profile_proto_rawDesc
)

func file_tensorflow_core_profiler_protobuf_memory_profile_proto_rawDescGZIP() []byte {
	file_tensorflow_core_profiler_protobuf_memory_profile_proto_rawDescOnce.Do(func() {
		file_tensorflow_core_profiler_protobuf_memory_profile_proto_rawDescData = protoimpl.X.CompressGZIP(file_tensorflow_core_profiler_protobuf_memory_profile_proto_rawDescData)
	})
	return file_tensorflow_core_profiler_protobuf_memory_profile_proto_rawDescData
}

var file_tensorflow_core_profiler_protobuf_memory_profile_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_tensorflow_core_profiler_protobuf_memory_profile_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_tensorflow_core_profiler_protobuf_memory_profile_proto_goTypes = []interface{}{
	(MemoryActivity)(0),               // 0: tensorflow.profiler.MemoryActivity
	(*MemoryAggregationStats)(nil),    // 1: tensorflow.profiler.MemoryAggregationStats
	(*MemoryActivityMetadata)(nil),    // 2: tensorflow.profiler.MemoryActivityMetadata
	(*MemoryProfileSnapshot)(nil),     // 3: tensorflow.profiler.MemoryProfileSnapshot
	(*MemoryProfileSummary)(nil),      // 4: tensorflow.profiler.MemoryProfileSummary
	(*ActiveAllocation)(nil),          // 5: tensorflow.profiler.ActiveAllocation
	(*PerAllocatorMemoryProfile)(nil), // 6: tensorflow.profiler.PerAllocatorMemoryProfile
	(*MemoryProfile)(nil),             // 7: tensorflow.profiler.MemoryProfile
	nil,                               // 8: tensorflow.profiler.MemoryProfile.MemoryProfilePerAllocatorEntry
}
var file_tensorflow_core_profiler_protobuf_memory_profile_proto_depIdxs = []int32{
	0,  // 0: tensorflow.profiler.MemoryActivityMetadata.memory_activity:type_name -> tensorflow.profiler.MemoryActivity
	1,  // 1: tensorflow.profiler.MemoryProfileSnapshot.aggregation_stats:type_name -> tensorflow.profiler.MemoryAggregationStats
	2,  // 2: tensorflow.profiler.MemoryProfileSnapshot.activity_metadata:type_name -> tensorflow.profiler.MemoryActivityMetadata
	1,  // 3: tensorflow.profiler.MemoryProfileSummary.peak_stats:type_name -> tensorflow.profiler.MemoryAggregationStats
	3,  // 4: tensorflow.profiler.PerAllocatorMemoryProfile.memory_profile_snapshots:type_name -> tensorflow.profiler.MemoryProfileSnapshot
	4,  // 5: tensorflow.profiler.PerAllocatorMemoryProfile.profile_summary:type_name -> tensorflow.profiler.MemoryProfileSummary
	5,  // 6: tensorflow.profiler.PerAllocatorMemoryProfile.active_allocations:type_name -> tensorflow.profiler.ActiveAllocation
	2,  // 7: tensorflow.profiler.PerAllocatorMemoryProfile.special_allocations:type_name -> tensorflow.profiler.MemoryActivityMetadata
	3,  // 8: tensorflow.profiler.PerAllocatorMemoryProfile.sampled_timeline_snapshots:type_name -> tensorflow.profiler.MemoryProfileSnapshot
	8,  // 9: tensorflow.profiler.MemoryProfile.memory_profile_per_allocator:type_name -> tensorflow.profiler.MemoryProfile.MemoryProfilePerAllocatorEntry
	6,  // 10: tensorflow.profiler.MemoryProfile.MemoryProfilePerAllocatorEntry.value:type_name -> tensorflow.profiler.PerAllocatorMemoryProfile
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_tensorflow_core_profiler_protobuf_memory_profile_proto_init() }
func file_tensorflow_core_profiler_protobuf_memory_profile_proto_init() {
	if File_tensorflow_core_profiler_protobuf_memory_profile_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tensorflow_core_profiler_protobuf_memory_profile_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemoryAggregationStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_profiler_protobuf_memory_profile_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemoryActivityMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_profiler_protobuf_memory_profile_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemoryProfileSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_profiler_protobuf_memory_profile_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemoryProfileSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_profiler_protobuf_memory_profile_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActiveAllocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_profiler_protobuf_memory_profile_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerAllocatorMemoryProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_profiler_protobuf_memory_profile_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemoryProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tensorflow_core_profiler_protobuf_memory_profile_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tensorflow_core_profiler_protobuf_memory_profile_proto_goTypes,
		DependencyIndexes: file_tensorflow_core_profiler_protobuf_memory_profile_proto_depIdxs,
		EnumInfos:         file_tensorflow_core_profiler_protobuf_memory_profile_proto_enumTypes,
		MessageInfos:      file_tensorflow_core_profiler_protobuf_memory_profile_proto_msgTypes,
	}.Build()
	File_tensorflow_core_profiler_protobuf_memory_profile_proto = out.File
	file_tensorflow_core_profiler_protobuf_memory_profile_proto_rawDesc = nil
	file_tensorflow_core_profiler_protobuf_memory_profile_proto_goTypes = nil
	file_tensorflow_core_profiler_protobuf_memory_profile_proto_depIdxs = nil
}
