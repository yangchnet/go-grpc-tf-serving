// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: tensorflow/core/profiler/protobuf/input_pipeline.proto

package protobuf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Generic hardware bottleneck.
type BottleneckAnalysis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Percentage of step time that is spent on input.
	InputPercent float64 `protobuf:"fixed64,7,opt,name=input_percent,json=inputPercent,proto3" json:"input_percent,omitempty"`
	// Percentage of step time that is spent on output.
	OutputPercent float64 `protobuf:"fixed64,8,opt,name=output_percent,json=outputPercent,proto3" json:"output_percent,omitempty"`
	// Percentage of step time that is idle for non-I/O-related reason.
	IdlePercent float64 `protobuf:"fixed64,9,opt,name=idle_percent,json=idlePercent,proto3" json:"idle_percent,omitempty"`
	// Percentage of step time that is spent on compute.
	ComputePercent float64 `protobuf:"fixed64,10,opt,name=compute_percent,json=computePercent,proto3" json:"compute_percent,omitempty"`
	// Indicates if input is a bottleneck. Possible values:  "host", "device",
	// "both", or "unknown"
	InputClassification string `protobuf:"bytes,1,opt,name=input_classification,json=inputClassification,proto3" json:"input_classification,omitempty"`
	// A human-readable description of the input bottleneck.
	InputStatement string `protobuf:"bytes,2,opt,name=input_statement,json=inputStatement,proto3" json:"input_statement,omitempty"`
	// Indicates if kernel launching is a bottleneck. Possible values: "no",
	// "moderate", "high".
	KernelLaunchClassification string `protobuf:"bytes,3,opt,name=kernel_launch_classification,json=kernelLaunchClassification,proto3" json:"kernel_launch_classification,omitempty"`
	// A human-readable description of the kernel launching overhead.
	KernelLaunchStatement string `protobuf:"bytes,4,opt,name=kernel_launch_statement,json=kernelLaunchStatement,proto3" json:"kernel_launch_statement,omitempty"`
	// Indicates if all other is a bottleneck. Possible values: "no", "moderate",
	// "high".
	AllOtherClassification string `protobuf:"bytes,5,opt,name=all_other_classification,json=allOtherClassification,proto3" json:"all_other_classification,omitempty"`
	// A human-readable description of the all other overhead.
	AllOtherStatement string `protobuf:"bytes,6,opt,name=all_other_statement,json=allOtherStatement,proto3" json:"all_other_statement,omitempty"`
	// Indicates if device collective communication is a bottleneck. Possible
	// values: "no", "moderate", "high".
	DeviceCollectivesClassification string `protobuf:"bytes,11,opt,name=device_collectives_classification,json=deviceCollectivesClassification,proto3" json:"device_collectives_classification,omitempty"`
	// A human-readable description of the device collective communication
	// overhead.
	DeviceCollectivesStatement string `protobuf:"bytes,12,opt,name=device_collectives_statement,json=deviceCollectivesStatement,proto3" json:"device_collectives_statement,omitempty"`
}

func (x *BottleneckAnalysis) Reset() {
	*x = BottleneckAnalysis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_protobuf_input_pipeline_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BottleneckAnalysis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BottleneckAnalysis) ProtoMessage() {}

func (x *BottleneckAnalysis) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_protobuf_input_pipeline_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BottleneckAnalysis.ProtoReflect.Descriptor instead.
func (*BottleneckAnalysis) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_protobuf_input_pipeline_proto_rawDescGZIP(), []int{0}
}

func (x *BottleneckAnalysis) GetInputPercent() float64 {
	if x != nil {
		return x.InputPercent
	}
	return 0
}

func (x *BottleneckAnalysis) GetOutputPercent() float64 {
	if x != nil {
		return x.OutputPercent
	}
	return 0
}

func (x *BottleneckAnalysis) GetIdlePercent() float64 {
	if x != nil {
		return x.IdlePercent
	}
	return 0
}

func (x *BottleneckAnalysis) GetComputePercent() float64 {
	if x != nil {
		return x.ComputePercent
	}
	return 0
}

func (x *BottleneckAnalysis) GetInputClassification() string {
	if x != nil {
		return x.InputClassification
	}
	return ""
}

func (x *BottleneckAnalysis) GetInputStatement() string {
	if x != nil {
		return x.InputStatement
	}
	return ""
}

func (x *BottleneckAnalysis) GetKernelLaunchClassification() string {
	if x != nil {
		return x.KernelLaunchClassification
	}
	return ""
}

func (x *BottleneckAnalysis) GetKernelLaunchStatement() string {
	if x != nil {
		return x.KernelLaunchStatement
	}
	return ""
}

func (x *BottleneckAnalysis) GetAllOtherClassification() string {
	if x != nil {
		return x.AllOtherClassification
	}
	return ""
}

func (x *BottleneckAnalysis) GetAllOtherStatement() string {
	if x != nil {
		return x.AllOtherStatement
	}
	return ""
}

func (x *BottleneckAnalysis) GetDeviceCollectivesClassification() string {
	if x != nil {
		return x.DeviceCollectivesClassification
	}
	return ""
}

func (x *BottleneckAnalysis) GetDeviceCollectivesStatement() string {
	if x != nil {
		return x.DeviceCollectivesStatement
	}
	return ""
}

// Used for both step duration and Op duration.
type StepSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Average           float64 `protobuf:"fixed64,1,opt,name=average,proto3" json:"average,omitempty"`
	StandardDeviation float64 `protobuf:"fixed64,2,opt,name=standard_deviation,json=standardDeviation,proto3" json:"standard_deviation,omitempty"`
	Minimum           float64 `protobuf:"fixed64,3,opt,name=minimum,proto3" json:"minimum,omitempty"`
	Maximum           float64 `protobuf:"fixed64,4,opt,name=maximum,proto3" json:"maximum,omitempty"`
}

func (x *StepSummary) Reset() {
	*x = StepSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_protobuf_input_pipeline_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StepSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StepSummary) ProtoMessage() {}

func (x *StepSummary) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_protobuf_input_pipeline_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StepSummary.ProtoReflect.Descriptor instead.
func (*StepSummary) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_protobuf_input_pipeline_proto_rawDescGZIP(), []int{1}
}

func (x *StepSummary) GetAverage() float64 {
	if x != nil {
		return x.Average
	}
	return 0
}

func (x *StepSummary) GetStandardDeviation() float64 {
	if x != nil {
		return x.StandardDeviation
	}
	return 0
}

func (x *StepSummary) GetMinimum() float64 {
	if x != nil {
		return x.Minimum
	}
	return 0
}

func (x *StepSummary) GetMaximum() float64 {
	if x != nil {
		return x.Maximum
	}
	return 0
}

// Per-step details on generic hardware.
type PerGenericStepDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The step number of a step.
	StepNumber int32 `protobuf:"varint,1,opt,name=step_number,json=stepNumber,proto3" json:"step_number,omitempty"`
	// The step name.
	StepName string `protobuf:"bytes,14,opt,name=step_name,json=stepName,proto3" json:"step_name,omitempty"`
	// The step time (in ms).
	StepTimeMs float64 `protobuf:"fixed64,2,opt,name=step_time_ms,json=stepTimeMs,proto3" json:"step_time_ms,omitempty"`
	// Breakdown of the step time in different event categories.
	// The unknown time (in ms).
	UnknownTimeMs float64 `protobuf:"fixed64,3,opt,name=unknown_time_ms,json=unknownTimeMs,proto3" json:"unknown_time_ms,omitempty"`
	// The time (in ms) in which the host is waiting for input data to be ready.
	HostWaitInputMs float64 `protobuf:"fixed64,11,opt,name=host_wait_input_ms,json=hostWaitInputMs,proto3" json:"host_wait_input_ms,omitempty"`
	// The time (in ms) in which the host is sending input data to the device.
	// Total input time = host_wait_input_ms + host_to_device_ms.
	HostToDeviceMs float64 `protobuf:"fixed64,12,opt,name=host_to_device_ms,json=hostToDeviceMs,proto3" json:"host_to_device_ms,omitempty"`
	// The output time (in ms).
	OutputMs float64 `protobuf:"fixed64,5,opt,name=output_ms,json=outputMs,proto3" json:"output_ms,omitempty"`
	// The device-compute time (in ms).
	DeviceComputeMs float64 `protobuf:"fixed64,6,opt,name=device_compute_ms,json=deviceComputeMs,proto3" json:"device_compute_ms,omitempty"`
	// The device-to-device communication time (in ms).
	DeviceToDeviceMs float64 `protobuf:"fixed64,7,opt,name=device_to_device_ms,json=deviceToDeviceMs,proto3" json:"device_to_device_ms,omitempty"`
	// The device time spent on collective communications (in ms).
	DeviceCollectivesMs float64 `protobuf:"fixed64,13,opt,name=device_collectives_ms,json=deviceCollectivesMs,proto3" json:"device_collectives_ms,omitempty"`
	// The host-compute time (in ms).
	HostComputeMs float64 `protobuf:"fixed64,8,opt,name=host_compute_ms,json=hostComputeMs,proto3" json:"host_compute_ms,omitempty"`
	// The host-prepare time (in ms).
	HostPrepareMs float64 `protobuf:"fixed64,9,opt,name=host_prepare_ms,json=hostPrepareMs,proto3" json:"host_prepare_ms,omitempty"`
	// The time spent on compiling (in ms).
	HostCompileMs float64 `protobuf:"fixed64,10,opt,name=host_compile_ms,json=hostCompileMs,proto3" json:"host_compile_ms,omitempty"`
}

func (x *PerGenericStepDetails) Reset() {
	*x = PerGenericStepDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_protobuf_input_pipeline_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerGenericStepDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerGenericStepDetails) ProtoMessage() {}

func (x *PerGenericStepDetails) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_protobuf_input_pipeline_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerGenericStepDetails.ProtoReflect.Descriptor instead.
func (*PerGenericStepDetails) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_protobuf_input_pipeline_proto_rawDescGZIP(), []int{2}
}

func (x *PerGenericStepDetails) GetStepNumber() int32 {
	if x != nil {
		return x.StepNumber
	}
	return 0
}

func (x *PerGenericStepDetails) GetStepName() string {
	if x != nil {
		return x.StepName
	}
	return ""
}

func (x *PerGenericStepDetails) GetStepTimeMs() float64 {
	if x != nil {
		return x.StepTimeMs
	}
	return 0
}

func (x *PerGenericStepDetails) GetUnknownTimeMs() float64 {
	if x != nil {
		return x.UnknownTimeMs
	}
	return 0
}

func (x *PerGenericStepDetails) GetHostWaitInputMs() float64 {
	if x != nil {
		return x.HostWaitInputMs
	}
	return 0
}

func (x *PerGenericStepDetails) GetHostToDeviceMs() float64 {
	if x != nil {
		return x.HostToDeviceMs
	}
	return 0
}

func (x *PerGenericStepDetails) GetOutputMs() float64 {
	if x != nil {
		return x.OutputMs
	}
	return 0
}

func (x *PerGenericStepDetails) GetDeviceComputeMs() float64 {
	if x != nil {
		return x.DeviceComputeMs
	}
	return 0
}

func (x *PerGenericStepDetails) GetDeviceToDeviceMs() float64 {
	if x != nil {
		return x.DeviceToDeviceMs
	}
	return 0
}

func (x *PerGenericStepDetails) GetDeviceCollectivesMs() float64 {
	if x != nil {
		return x.DeviceCollectivesMs
	}
	return 0
}

func (x *PerGenericStepDetails) GetHostComputeMs() float64 {
	if x != nil {
		return x.HostComputeMs
	}
	return 0
}

func (x *PerGenericStepDetails) GetHostPrepareMs() float64 {
	if x != nil {
		return x.HostPrepareMs
	}
	return 0
}

func (x *PerGenericStepDetails) GetHostCompileMs() float64 {
	if x != nil {
		return x.HostCompileMs
	}
	return 0
}

type InputTimeBreakdown struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time spent on demanded file read in microseconds.
	DemandedFileReadUs float64 `protobuf:"fixed64,1,opt,name=demanded_file_read_us,json=demandedFileReadUs,proto3" json:"demanded_file_read_us,omitempty"`
	// Time spent on advanced file read in microseconds.
	AdvancedFileReadUs float64 `protobuf:"fixed64,2,opt,name=advanced_file_read_us,json=advancedFileReadUs,proto3" json:"advanced_file_read_us,omitempty"`
	// Time spent on data preprocessing in microseconds.
	PreprocessingUs float64 `protobuf:"fixed64,3,opt,name=preprocessing_us,json=preprocessingUs,proto3" json:"preprocessing_us,omitempty"`
	// The infeed enqueue time in microseconds.
	EnqueueUs float64 `protobuf:"fixed64,4,opt,name=enqueue_us,json=enqueueUs,proto3" json:"enqueue_us,omitempty"`
	// This entry is for the situtation where we can't further
	// break down the non-enqueue input time (because the input pipeline
	// is not instrumented).
	UnclassifiedNonEnqueueUs float64 `protobuf:"fixed64,5,opt,name=unclassified_non_enqueue_us,json=unclassifiedNonEnqueueUs,proto3" json:"unclassified_non_enqueue_us,omitempty"`
}

func (x *InputTimeBreakdown) Reset() {
	*x = InputTimeBreakdown{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_protobuf_input_pipeline_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputTimeBreakdown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputTimeBreakdown) ProtoMessage() {}

func (x *InputTimeBreakdown) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_protobuf_input_pipeline_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputTimeBreakdown.ProtoReflect.Descriptor instead.
func (*InputTimeBreakdown) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_protobuf_input_pipeline_proto_rawDescGZIP(), []int{3}
}

func (x *InputTimeBreakdown) GetDemandedFileReadUs() float64 {
	if x != nil {
		return x.DemandedFileReadUs
	}
	return 0
}

func (x *InputTimeBreakdown) GetAdvancedFileReadUs() float64 {
	if x != nil {
		return x.AdvancedFileReadUs
	}
	return 0
}

func (x *InputTimeBreakdown) GetPreprocessingUs() float64 {
	if x != nil {
		return x.PreprocessingUs
	}
	return 0
}

func (x *InputTimeBreakdown) GetEnqueueUs() float64 {
	if x != nil {
		return x.EnqueueUs
	}
	return 0
}

func (x *InputTimeBreakdown) GetUnclassifiedNonEnqueueUs() float64 {
	if x != nil {
		return x.UnclassifiedNonEnqueueUs
	}
	return 0
}

type InputOpDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Op's name.
	OpName string `protobuf:"bytes,1,opt,name=op_name,json=opName,proto3" json:"op_name,omitempty"`
	// The number of occurrences.
	Count uint64 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	// Time (accumulated over all occurrences) in milliseconds.
	TimeInMs float64 `protobuf:"fixed64,3,opt,name=time_in_ms,json=timeInMs,proto3" json:"time_in_ms,omitempty"`
	// Time (accumulated over all occurrences) in
	// percentage of the total input processing time.
	TimeInPercent float64 `protobuf:"fixed64,4,opt,name=time_in_percent,json=timeInPercent,proto3" json:"time_in_percent,omitempty"`
	// Self time (accumulated over all occurrences) in milliseconds.
	SelfTimeInMs float64 `protobuf:"fixed64,5,opt,name=self_time_in_ms,json=selfTimeInMs,proto3" json:"self_time_in_ms,omitempty"`
	// Self time (accumulated over all occurrences) in
	// percentage of the total input processing time.
	SelfTimeInPercent float64 `protobuf:"fixed64,6,opt,name=self_time_in_percent,json=selfTimeInPercent,proto3" json:"self_time_in_percent,omitempty"`
	// Possible categories: "Enqueue", "Advanced file read",
	// "Demanded file read", "Preprocessing", "Unknown".
	Category string `protobuf:"bytes,7,opt,name=category,proto3" json:"category,omitempty"`
}

func (x *InputOpDetails) Reset() {
	*x = InputOpDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_protobuf_input_pipeline_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputOpDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputOpDetails) ProtoMessage() {}

func (x *InputOpDetails) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_protobuf_input_pipeline_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputOpDetails.ProtoReflect.Descriptor instead.
func (*InputOpDetails) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_protobuf_input_pipeline_proto_rawDescGZIP(), []int{4}
}

func (x *InputOpDetails) GetOpName() string {
	if x != nil {
		return x.OpName
	}
	return ""
}

func (x *InputOpDetails) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *InputOpDetails) GetTimeInMs() float64 {
	if x != nil {
		return x.TimeInMs
	}
	return 0
}

func (x *InputOpDetails) GetTimeInPercent() float64 {
	if x != nil {
		return x.TimeInPercent
	}
	return 0
}

func (x *InputOpDetails) GetSelfTimeInMs() float64 {
	if x != nil {
		return x.SelfTimeInMs
	}
	return 0
}

func (x *InputOpDetails) GetSelfTimeInPercent() float64 {
	if x != nil {
		return x.SelfTimeInPercent
	}
	return 0
}

func (x *InputOpDetails) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

type InputPipelineAnalysisRecommendation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of detailed recommendations.
	Details []string `protobuf:"bytes,1,rep,name=details,proto3" json:"details,omitempty"`
	// An analysis of different types of bottlenecks. Can be unpacked into a
	// BottleneckAnalysis.
	BottleneckAnalysis *anypb.Any `protobuf:"bytes,2,opt,name=bottleneck_analysis,json=bottleneckAnalysis,proto3" json:"bottleneck_analysis,omitempty"`
	// A suggested step to take next.
	SummaryNextStep string `protobuf:"bytes,3,opt,name=summary_next_step,json=summaryNextStep,proto3" json:"summary_next_step,omitempty"`
}

func (x *InputPipelineAnalysisRecommendation) Reset() {
	*x = InputPipelineAnalysisRecommendation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_protobuf_input_pipeline_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputPipelineAnalysisRecommendation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputPipelineAnalysisRecommendation) ProtoMessage() {}

func (x *InputPipelineAnalysisRecommendation) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_protobuf_input_pipeline_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputPipelineAnalysisRecommendation.ProtoReflect.Descriptor instead.
func (*InputPipelineAnalysisRecommendation) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_protobuf_input_pipeline_proto_rawDescGZIP(), []int{5}
}

func (x *InputPipelineAnalysisRecommendation) GetDetails() []string {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *InputPipelineAnalysisRecommendation) GetBottleneckAnalysis() *anypb.Any {
	if x != nil {
		return x.BottleneckAnalysis
	}
	return nil
}

func (x *InputPipelineAnalysisRecommendation) GetSummaryNextStep() string {
	if x != nil {
		return x.SummaryNextStep
	}
	return ""
}

type GenericStepTimeBreakdown struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Summary of all unknown time as a part of step in ms.
	UnknownTimeMsSummary *StepSummary `protobuf:"bytes,1,opt,name=unknown_time_ms_summary,json=unknownTimeMsSummary,proto3" json:"unknown_time_ms_summary,omitempty"`
	// Summary of all host-wait-input time as a part of step in ms.
	HostWaitInputMsSummary *StepSummary `protobuf:"bytes,9,opt,name=host_wait_input_ms_summary,json=hostWaitInputMsSummary,proto3" json:"host_wait_input_ms_summary,omitempty"`
	// Summary of all host-to-device time as a part of step in ms.
	HostToDeviceMsSummary *StepSummary `protobuf:"bytes,10,opt,name=host_to_device_ms_summary,json=hostToDeviceMsSummary,proto3" json:"host_to_device_ms_summary,omitempty"`
	// Summary of all input time as a part of step in ms.
	InputMsSummary *StepSummary `protobuf:"bytes,11,opt,name=input_ms_summary,json=inputMsSummary,proto3" json:"input_ms_summary,omitempty"`
	// Summary of all output time as a part of step in ms.
	OutputMsSummary *StepSummary `protobuf:"bytes,3,opt,name=output_ms_summary,json=outputMsSummary,proto3" json:"output_ms_summary,omitempty"`
	// Summary of all device-compute time as a part of step in ms.
	DeviceComputeMsSummary *StepSummary `protobuf:"bytes,4,opt,name=device_compute_ms_summary,json=deviceComputeMsSummary,proto3" json:"device_compute_ms_summary,omitempty"`
	// Summary of all device-to-device time as a part of step in ms.
	DeviceToDeviceMsSummary *StepSummary `protobuf:"bytes,5,opt,name=device_to_device_ms_summary,json=deviceToDeviceMsSummary,proto3" json:"device_to_device_ms_summary,omitempty"`
	// Summary of all device-collectives time as a part of step in ms.
	DeviceCollectivesMsSummary *StepSummary `protobuf:"bytes,12,opt,name=device_collectives_ms_summary,json=deviceCollectivesMsSummary,proto3" json:"device_collectives_ms_summary,omitempty"`
	// Summary of all host-compute time as a part of step in ms.
	HostComputeMsSummary *StepSummary `protobuf:"bytes,6,opt,name=host_compute_ms_summary,json=hostComputeMsSummary,proto3" json:"host_compute_ms_summary,omitempty"`
	// Summary of all host-prepare time as a part of step in ms.
	HostPrepareMsSummary *StepSummary `protobuf:"bytes,7,opt,name=host_prepare_ms_summary,json=hostPrepareMsSummary,proto3" json:"host_prepare_ms_summary,omitempty"`
	// Summary of all compilation time as a part of step in ms.
	HostCompileMsSummary *StepSummary `protobuf:"bytes,8,opt,name=host_compile_ms_summary,json=hostCompileMsSummary,proto3" json:"host_compile_ms_summary,omitempty"`
}

func (x *GenericStepTimeBreakdown) Reset() {
	*x = GenericStepTimeBreakdown{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_protobuf_input_pipeline_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenericStepTimeBreakdown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericStepTimeBreakdown) ProtoMessage() {}

func (x *GenericStepTimeBreakdown) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_protobuf_input_pipeline_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericStepTimeBreakdown.ProtoReflect.Descriptor instead.
func (*GenericStepTimeBreakdown) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_protobuf_input_pipeline_proto_rawDescGZIP(), []int{6}
}

func (x *GenericStepTimeBreakdown) GetUnknownTimeMsSummary() *StepSummary {
	if x != nil {
		return x.UnknownTimeMsSummary
	}
	return nil
}

func (x *GenericStepTimeBreakdown) GetHostWaitInputMsSummary() *StepSummary {
	if x != nil {
		return x.HostWaitInputMsSummary
	}
	return nil
}

func (x *GenericStepTimeBreakdown) GetHostToDeviceMsSummary() *StepSummary {
	if x != nil {
		return x.HostToDeviceMsSummary
	}
	return nil
}

func (x *GenericStepTimeBreakdown) GetInputMsSummary() *StepSummary {
	if x != nil {
		return x.InputMsSummary
	}
	return nil
}

func (x *GenericStepTimeBreakdown) GetOutputMsSummary() *StepSummary {
	if x != nil {
		return x.OutputMsSummary
	}
	return nil
}

func (x *GenericStepTimeBreakdown) GetDeviceComputeMsSummary() *StepSummary {
	if x != nil {
		return x.DeviceComputeMsSummary
	}
	return nil
}

func (x *GenericStepTimeBreakdown) GetDeviceToDeviceMsSummary() *StepSummary {
	if x != nil {
		return x.DeviceToDeviceMsSummary
	}
	return nil
}

func (x *GenericStepTimeBreakdown) GetDeviceCollectivesMsSummary() *StepSummary {
	if x != nil {
		return x.DeviceCollectivesMsSummary
	}
	return nil
}

func (x *GenericStepTimeBreakdown) GetHostComputeMsSummary() *StepSummary {
	if x != nil {
		return x.HostComputeMsSummary
	}
	return nil
}

func (x *GenericStepTimeBreakdown) GetHostPrepareMsSummary() *StepSummary {
	if x != nil {
		return x.HostPrepareMsSummary
	}
	return nil
}

func (x *GenericStepTimeBreakdown) GetHostCompileMsSummary() *StepSummary {
	if x != nil {
		return x.HostCompileMsSummary
	}
	return nil
}

type InputPipelineAnalysisResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Hardware type.
	HardwareType string `protobuf:"bytes,9,opt,name=hardware_type,json=hardwareType,proto3" json:"hardware_type,omitempty"`
	// Summary of all step duration across all cores.
	StepTimeSummary *StepSummary `protobuf:"bytes,2,opt,name=step_time_summary,json=stepTimeSummary,proto3" json:"step_time_summary,omitempty"`
	// Summary of all input-related stall as percentage of step duration.
	InputPercentSummary *StepSummary `protobuf:"bytes,3,opt,name=input_percent_summary,json=inputPercentSummary,proto3" json:"input_percent_summary,omitempty"`
	// Percentage of step time that is waiting for input.
	InputPercent float64 `protobuf:"fixed64,11,opt,name=input_percent,json=inputPercent,proto3" json:"input_percent,omitempty"`
	// Percentage of step time that is doing output.
	OutputPercent float64 `protobuf:"fixed64,13,opt,name=output_percent,json=outputPercent,proto3" json:"output_percent,omitempty"`
	// Percentage of step time that is idle for non-I/O-related reason.
	IdlePercent float64 `protobuf:"fixed64,14,opt,name=idle_percent,json=idlePercent,proto3" json:"idle_percent,omitempty"`
	// Percentage of step time that is doing compute.
	ComputePercent float64 `protobuf:"fixed64,15,opt,name=compute_percent,json=computePercent,proto3" json:"compute_percent,omitempty"`
	// Details of each step. Can be unpacked into a PerGenericStepDetails.
	StepDetails []*anypb.Any `protobuf:"bytes,4,rep,name=step_details,json=stepDetails,proto3" json:"step_details,omitempty"`
	// The breakdown of the input processing time.
	InputTimeBreakdown *InputTimeBreakdown `protobuf:"bytes,5,opt,name=input_time_breakdown,json=inputTimeBreakdown,proto3" json:"input_time_breakdown,omitempty"`
	// Details of each input Op executed.
	InputOpDetails []*InputOpDetails `protobuf:"bytes,6,rep,name=input_op_details,json=inputOpDetails,proto3" json:"input_op_details,omitempty"`
	// Recommendation for next steps to users.
	Recommendation *InputPipelineAnalysisRecommendation `protobuf:"bytes,7,opt,name=recommendation,proto3" json:"recommendation,omitempty"`
	// Breakdown of the step time. Can be unpacked into a
	// GenericStepTimeBreakdown.
	StepTimeBreakdown *anypb.Any `protobuf:"bytes,8,opt,name=step_time_breakdown,json=stepTimeBreakdown,proto3" json:"step_time_breakdown,omitempty"`
	// Error and warning messages for diagnosing profiling issues.
	Diagnostics *Diagnostics `protobuf:"bytes,12,opt,name=diagnostics,proto3" json:"diagnostics,omitempty"`
}

func (x *InputPipelineAnalysisResult) Reset() {
	*x = InputPipelineAnalysisResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_protobuf_input_pipeline_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputPipelineAnalysisResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputPipelineAnalysisResult) ProtoMessage() {}

func (x *InputPipelineAnalysisResult) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_protobuf_input_pipeline_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputPipelineAnalysisResult.ProtoReflect.Descriptor instead.
func (*InputPipelineAnalysisResult) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_protobuf_input_pipeline_proto_rawDescGZIP(), []int{7}
}

func (x *InputPipelineAnalysisResult) GetHardwareType() string {
	if x != nil {
		return x.HardwareType
	}
	return ""
}

func (x *InputPipelineAnalysisResult) GetStepTimeSummary() *StepSummary {
	if x != nil {
		return x.StepTimeSummary
	}
	return nil
}

func (x *InputPipelineAnalysisResult) GetInputPercentSummary() *StepSummary {
	if x != nil {
		return x.InputPercentSummary
	}
	return nil
}

func (x *InputPipelineAnalysisResult) GetInputPercent() float64 {
	if x != nil {
		return x.InputPercent
	}
	return 0
}

func (x *InputPipelineAnalysisResult) GetOutputPercent() float64 {
	if x != nil {
		return x.OutputPercent
	}
	return 0
}

func (x *InputPipelineAnalysisResult) GetIdlePercent() float64 {
	if x != nil {
		return x.IdlePercent
	}
	return 0
}

func (x *InputPipelineAnalysisResult) GetComputePercent() float64 {
	if x != nil {
		return x.ComputePercent
	}
	return 0
}

func (x *InputPipelineAnalysisResult) GetStepDetails() []*anypb.Any {
	if x != nil {
		return x.StepDetails
	}
	return nil
}

func (x *InputPipelineAnalysisResult) GetInputTimeBreakdown() *InputTimeBreakdown {
	if x != nil {
		return x.InputTimeBreakdown
	}
	return nil
}

func (x *InputPipelineAnalysisResult) GetInputOpDetails() []*InputOpDetails {
	if x != nil {
		return x.InputOpDetails
	}
	return nil
}

func (x *InputPipelineAnalysisResult) GetRecommendation() *InputPipelineAnalysisRecommendation {
	if x != nil {
		return x.Recommendation
	}
	return nil
}

func (x *InputPipelineAnalysisResult) GetStepTimeBreakdown() *anypb.Any {
	if x != nil {
		return x.StepTimeBreakdown
	}
	return nil
}

func (x *InputPipelineAnalysisResult) GetDiagnostics() *Diagnostics {
	if x != nil {
		return x.Diagnostics
	}
	return nil
}

var File_tensorflow_core_profiler_protobuf_input_pipeline_proto protoreflect.FileDescriptor

var file_tensorflow_core_profiler_protobuf_input_pipeline_proto_rawDesc = []byte{
	0x0a, 0x36, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x1a, 0x19, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61,
	0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x33, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfa, 0x04,
	0x0a, 0x12, 0x42, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x6e, 0x65, 0x63, 0x6b, 0x41, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x69, 0x64, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x63, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x14,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x1c, 0x6b, 0x65, 0x72, 0x6e,
	0x65, 0x6c, 0x5f, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a,
	0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x17, 0x6b, 0x65,
	0x72, 0x6e, 0x65, 0x6c, 0x5f, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6b, 0x65, 0x72,
	0x6e, 0x65, 0x6c, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x38, 0x0a, 0x18, 0x61, 0x6c, 0x6c, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x61, 0x6c, 0x6c, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13,
	0x61, 0x6c, 0x6c, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x4f, 0x74,
	0x68, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x21,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x73, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x1c, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x8a, 0x01, 0x0a, 0x0b, 0x53,
	0x74, 0x65, 0x70, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x61, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x5f, 0x64, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x11, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x44, 0x65, 0x76, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07,
	0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x22, 0xa1, 0x04, 0x0a, 0x15, 0x50, 0x65, 0x72, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x53, 0x74, 0x65, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x65, 0x70, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x65, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0c, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x73, 0x74, 0x65, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x4d,
	0x73, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x12, 0x2b, 0x0a, 0x12, 0x68, 0x6f, 0x73,
	0x74, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x6d, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x68, 0x6f, 0x73, 0x74, 0x57, 0x61, 0x69, 0x74, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x4d, 0x73, 0x12, 0x29, 0x0a, 0x11, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x74,
	0x6f, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0e, 0x68, 0x6f, 0x73, 0x74, 0x54, 0x6f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x6d, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4d, 0x73, 0x12, 0x2a,
	0x0a, 0x11, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x5f, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x4d, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6d,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x6f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x5f,
	0x6d, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x4d, 0x73, 0x12, 0x26, 0x0a,
	0x0f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x6d, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x68, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x4d, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d,
	0x68, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x4d, 0x73, 0x12, 0x26, 0x0a,
	0x0f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x5f, 0x6d, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x68, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70,
	0x69, 0x6c, 0x65, 0x4d, 0x73, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x22, 0x83, 0x02, 0x0a, 0x12,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f,
	0x77, 0x6e, 0x12, 0x31, 0x0a, 0x15, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x12, 0x64, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x61, 0x64, 0x55, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65,
	0x64, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x61, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x61, 0x64, 0x55, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x55, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x75,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x65, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x55, 0x73, 0x12, 0x3d, 0x0a, 0x1b, 0x75, 0x6e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x75,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x75, 0x6e, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x4e, 0x6f, 0x6e, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x55,
	0x73, 0x22, 0xf9, 0x01, 0x0a, 0x0e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4f, 0x70, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x6d,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x4d,
	0x73, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65,
	0x49, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0f, 0x73, 0x65, 0x6c,
	0x66, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0c, 0x73, 0x65, 0x6c, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x4d, 0x73,
	0x12, 0x2f, 0x0a, 0x14, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e,
	0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11,
	0x73, 0x65, 0x6c, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0xb2, 0x01,
	0x0a, 0x23, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x45, 0x0a, 0x13, 0x62, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x6e, 0x65, 0x63, 0x6b, 0x5f, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41,
	0x6e, 0x79, 0x52, 0x12, 0x62, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x6e, 0x65, 0x63, 0x6b, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x4e, 0x65, 0x78, 0x74, 0x53, 0x74,
	0x65, 0x70, 0x22, 0xfa, 0x07, 0x0a, 0x18, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x53, 0x74,
	0x65, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x12,
	0x57, 0x0a, 0x17, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x6d, 0x73, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x52, 0x14, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x4d,
	0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x5c, 0x0a, 0x1a, 0x68, 0x6f, 0x73, 0x74,
	0x5f, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x6d, 0x73, 0x5f, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x16,
	0x68, 0x6f, 0x73, 0x74, 0x57, 0x61, 0x69, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x73, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x5a, 0x0a, 0x19, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x74,
	0x6f, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x73, 0x5f, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x65, 0x70, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x15, 0x68, 0x6f, 0x73,
	0x74, 0x54, 0x6f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x12, 0x4a, 0x0a, 0x10, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x6d, 0x73, 0x5f, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0e,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x4c,
	0x0a, 0x11, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x6d, 0x73, 0x5f, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e,
	0x53, 0x74, 0x65, 0x70, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0f, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x4d, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x5b, 0x0a, 0x19,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x6d,
	0x73, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x52, 0x16, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x4d, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x5e, 0x0a, 0x1b, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x73,
	0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x52, 0x17, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4d, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x63, 0x0a, 0x1d, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x5f,
	0x6d, 0x73, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x52, 0x1a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x73, 0x4d, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x57,
	0x0a, 0x17, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x6d,
	0x73, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x52, 0x14, 0x68, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x4d, 0x73,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x57, 0x0a, 0x17, 0x68, 0x6f, 0x73, 0x74, 0x5f,
	0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x5f, 0x6d, 0x73, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x65, 0x70, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x14, 0x68, 0x6f, 0x73, 0x74,
	0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x4d, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x12, 0x57, 0x0a, 0x17, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65,
	0x5f, 0x6d, 0x73, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x52, 0x14, 0x68, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65,
	0x4d, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22,
	0xd9, 0x06, 0x0a, 0x1b, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x4c, 0x0a, 0x11, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x52, 0x0f, 0x73, 0x74, 0x65, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x12, 0x54, 0x0a, 0x15, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x52, 0x13, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x69, 0x64, 0x6c, 0x65,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x12, 0x37, 0x0a, 0x0c, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0b, 0x73, 0x74,
	0x65, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x59, 0x0a, 0x14, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e,
	0x52, 0x12, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x72, 0x65, 0x61, 0x6b,
	0x64, 0x6f, 0x77, 0x6e, 0x12, 0x4d, 0x0a, 0x10, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x6f, 0x70,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4f, 0x70, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x52, 0x0e, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x4f, 0x70, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x60, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x74, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x72, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x13, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x11, 0x73, 0x74, 0x65, 0x70, 0x54, 0x69,
	0x6d, 0x65, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x42, 0x0a, 0x0b, 0x64,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x52, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4a,
	0x04, 0x08, 0x01, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x0a, 0x10, 0x0b, 0x42, 0xde, 0x01, 0x0a, 0x17,
	0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x42, 0x12, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x69,
	0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x02, 0x50, 0x01, 0x5a,
	0x40, 0x67, 0x69, 0x74, 0x65, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x71, 0x63, 0x69, 0x69, 0x70,
	0x2d, 0x69, 0x63, 0x70, 0x2f, 0x74, 0x66, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2f,
	0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0xa2, 0x02, 0x03, 0x54, 0x50, 0x58, 0xaa, 0x02, 0x13, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0xca, 0x02, 0x13,
	0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5c, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x72, 0xe2, 0x02, 0x1f, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77,
	0x5c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x14, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c,
	0x6f, 0x77, 0x3a, 0x3a, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tensorflow_core_profiler_protobuf_input_pipeline_proto_rawDescOnce sync.Once
	file_tensorflow_core_profiler_protobuf_input_pipeline_proto_rawDescData = file_tensorflow_core_profiler_protobuf_input_pipeline_proto_rawDesc
)

func file_tensorflow_core_profiler_protobuf_input_pipeline_proto_rawDescGZIP() []byte {
	file_tensorflow_core_profiler_protobuf_input_pipeline_proto_rawDescOnce.Do(func() {
		file_tensorflow_core_profiler_protobuf_input_pipeline_proto_rawDescData = protoimpl.X.CompressGZIP(file_tensorflow_core_profiler_protobuf_input_pipeline_proto_rawDescData)
	})
	return file_tensorflow_core_profiler_protobuf_input_pipeline_proto_rawDescData
}

var file_tensorflow_core_profiler_protobuf_input_pipeline_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_tensorflow_core_profiler_protobuf_input_pipeline_proto_goTypes = []interface{}{
	(*BottleneckAnalysis)(nil),                  // 0: tensorflow.profiler.BottleneckAnalysis
	(*StepSummary)(nil),                         // 1: tensorflow.profiler.StepSummary
	(*PerGenericStepDetails)(nil),               // 2: tensorflow.profiler.PerGenericStepDetails
	(*InputTimeBreakdown)(nil),                  // 3: tensorflow.profiler.InputTimeBreakdown
	(*InputOpDetails)(nil),                      // 4: tensorflow.profiler.InputOpDetails
	(*InputPipelineAnalysisRecommendation)(nil), // 5: tensorflow.profiler.InputPipelineAnalysisRecommendation
	(*GenericStepTimeBreakdown)(nil),            // 6: tensorflow.profiler.GenericStepTimeBreakdown
	(*InputPipelineAnalysisResult)(nil),         // 7: tensorflow.profiler.InputPipelineAnalysisResult
	(*anypb.Any)(nil),                           // 8: google.protobuf.Any
	(*Diagnostics)(nil),                         // 9: tensorflow.profiler.Diagnostics
}
var file_tensorflow_core_profiler_protobuf_input_pipeline_proto_depIdxs = []int32{
	8,  // 0: tensorflow.profiler.InputPipelineAnalysisRecommendation.bottleneck_analysis:type_name -> google.protobuf.Any
	1,  // 1: tensorflow.profiler.GenericStepTimeBreakdown.unknown_time_ms_summary:type_name -> tensorflow.profiler.StepSummary
	1,  // 2: tensorflow.profiler.GenericStepTimeBreakdown.host_wait_input_ms_summary:type_name -> tensorflow.profiler.StepSummary
	1,  // 3: tensorflow.profiler.GenericStepTimeBreakdown.host_to_device_ms_summary:type_name -> tensorflow.profiler.StepSummary
	1,  // 4: tensorflow.profiler.GenericStepTimeBreakdown.input_ms_summary:type_name -> tensorflow.profiler.StepSummary
	1,  // 5: tensorflow.profiler.GenericStepTimeBreakdown.output_ms_summary:type_name -> tensorflow.profiler.StepSummary
	1,  // 6: tensorflow.profiler.GenericStepTimeBreakdown.device_compute_ms_summary:type_name -> tensorflow.profiler.StepSummary
	1,  // 7: tensorflow.profiler.GenericStepTimeBreakdown.device_to_device_ms_summary:type_name -> tensorflow.profiler.StepSummary
	1,  // 8: tensorflow.profiler.GenericStepTimeBreakdown.device_collectives_ms_summary:type_name -> tensorflow.profiler.StepSummary
	1,  // 9: tensorflow.profiler.GenericStepTimeBreakdown.host_compute_ms_summary:type_name -> tensorflow.profiler.StepSummary
	1,  // 10: tensorflow.profiler.GenericStepTimeBreakdown.host_prepare_ms_summary:type_name -> tensorflow.profiler.StepSummary
	1,  // 11: tensorflow.profiler.GenericStepTimeBreakdown.host_compile_ms_summary:type_name -> tensorflow.profiler.StepSummary
	1,  // 12: tensorflow.profiler.InputPipelineAnalysisResult.step_time_summary:type_name -> tensorflow.profiler.StepSummary
	1,  // 13: tensorflow.profiler.InputPipelineAnalysisResult.input_percent_summary:type_name -> tensorflow.profiler.StepSummary
	8,  // 14: tensorflow.profiler.InputPipelineAnalysisResult.step_details:type_name -> google.protobuf.Any
	3,  // 15: tensorflow.profiler.InputPipelineAnalysisResult.input_time_breakdown:type_name -> tensorflow.profiler.InputTimeBreakdown
	4,  // 16: tensorflow.profiler.InputPipelineAnalysisResult.input_op_details:type_name -> tensorflow.profiler.InputOpDetails
	5,  // 17: tensorflow.profiler.InputPipelineAnalysisResult.recommendation:type_name -> tensorflow.profiler.InputPipelineAnalysisRecommendation
	8,  // 18: tensorflow.profiler.InputPipelineAnalysisResult.step_time_breakdown:type_name -> google.protobuf.Any
	9,  // 19: tensorflow.profiler.InputPipelineAnalysisResult.diagnostics:type_name -> tensorflow.profiler.Diagnostics
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_tensorflow_core_profiler_protobuf_input_pipeline_proto_init() }
func file_tensorflow_core_profiler_protobuf_input_pipeline_proto_init() {
	if File_tensorflow_core_profiler_protobuf_input_pipeline_proto != nil {
		return
	}
	file_tensorflow_core_profiler_protobuf_diagnostics_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_tensorflow_core_profiler_protobuf_input_pipeline_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BottleneckAnalysis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_profiler_protobuf_input_pipeline_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StepSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_profiler_protobuf_input_pipeline_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerGenericStepDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_profiler_protobuf_input_pipeline_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputTimeBreakdown); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_profiler_protobuf_input_pipeline_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputOpDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_profiler_protobuf_input_pipeline_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputPipelineAnalysisRecommendation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_profiler_protobuf_input_pipeline_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenericStepTimeBreakdown); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_profiler_protobuf_input_pipeline_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputPipelineAnalysisResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tensorflow_core_profiler_protobuf_input_pipeline_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tensorflow_core_profiler_protobuf_input_pipeline_proto_goTypes,
		DependencyIndexes: file_tensorflow_core_profiler_protobuf_input_pipeline_proto_depIdxs,
		MessageInfos:      file_tensorflow_core_profiler_protobuf_input_pipeline_proto_msgTypes,
	}.Build()
	File_tensorflow_core_profiler_protobuf_input_pipeline_proto = out.File
	file_tensorflow_core_profiler_protobuf_input_pipeline_proto_rawDesc = nil
	file_tensorflow_core_profiler_protobuf_input_pipeline_proto_goTypes = nil
	file_tensorflow_core_profiler_protobuf_input_pipeline_proto_depIdxs = nil
}
