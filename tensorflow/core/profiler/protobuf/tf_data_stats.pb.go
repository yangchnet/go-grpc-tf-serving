// This proto describes the format of the output profile file from
// the tf.data stats tool.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: tensorflow/core/profiler/protobuf/tf_data_stats.proto

package protobuf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The distribution strategy creates one "host" input pipeline which actually
// runs tf.data user code. Also, it creates a "device" input pipeline per
// device (e.g., TensorCore) which takes an element from the host input
// pipeline and transfers it to the device.
type InputPipelineMetadata_InputPipelineType int32

const (
	InputPipelineMetadata_HOST   InputPipelineMetadata_InputPipelineType = 0
	InputPipelineMetadata_DEVICE InputPipelineMetadata_InputPipelineType = 1
)

// Enum value maps for InputPipelineMetadata_InputPipelineType.
var (
	InputPipelineMetadata_InputPipelineType_name = map[int32]string{
		0: "HOST",
		1: "DEVICE",
	}
	InputPipelineMetadata_InputPipelineType_value = map[string]int32{
		"HOST":   0,
		"DEVICE": 1,
	}
)

func (x InputPipelineMetadata_InputPipelineType) Enum() *InputPipelineMetadata_InputPipelineType {
	p := new(InputPipelineMetadata_InputPipelineType)
	*p = x
	return p
}

func (x InputPipelineMetadata_InputPipelineType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InputPipelineMetadata_InputPipelineType) Descriptor() protoreflect.EnumDescriptor {
	return file_tensorflow_core_profiler_protobuf_tf_data_stats_proto_enumTypes[0].Descriptor()
}

func (InputPipelineMetadata_InputPipelineType) Type() protoreflect.EnumType {
	return &file_tensorflow_core_profiler_protobuf_tf_data_stats_proto_enumTypes[0]
}

func (x InputPipelineMetadata_InputPipelineType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InputPipelineMetadata_InputPipelineType.Descriptor instead.
func (InputPipelineMetadata_InputPipelineType) EnumDescriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_protobuf_tf_data_stats_proto_rawDescGZIP(), []int{3, 0}
}

// Stat for iterator.
type IteratorStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of the iterator.
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Start time of the iterator's GetNext in ps.
	StartTimePs int64 `protobuf:"varint,2,opt,name=start_time_ps,json=startTimePs,proto3" json:"start_time_ps,omitempty"`
	// Duration of the iterator's GetNext in ps.
	DurationPs int64 `protobuf:"varint,3,opt,name=duration_ps,json=durationPs,proto3" json:"duration_ps,omitempty"`
	// Self time of the iterator's GetNext in ps. It takes account into async
	// iterators. It is calculated by subtracting the time overlapped with its
	// child iterator's duration from the iterator's duration.
	SelfTimePs int64 `protobuf:"varint,4,opt,name=self_time_ps,json=selfTimePs,proto3" json:"self_time_ps,omitempty"`
	// Whether it is blocking the root iterator. An async iterator's child
	// iterator may not block its parent iterator if it is executed in advance and
	// does not overlap with the parent iterator.
	IsBlocking bool `protobuf:"varint,5,opt,name=is_blocking,json=isBlocking,proto3" json:"is_blocking,omitempty"`
	// The number of times this iterator is called. For example, a batch
	// iterator's child iterator may be called multiple times.
	NumCalls int64 `protobuf:"varint,6,opt,name=num_calls,json=numCalls,proto3" json:"num_calls,omitempty"`
}

func (x *IteratorStat) Reset() {
	*x = IteratorStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_protobuf_tf_data_stats_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IteratorStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IteratorStat) ProtoMessage() {}

func (x *IteratorStat) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_protobuf_tf_data_stats_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IteratorStat.ProtoReflect.Descriptor instead.
func (*IteratorStat) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_protobuf_tf_data_stats_proto_rawDescGZIP(), []int{0}
}

func (x *IteratorStat) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *IteratorStat) GetStartTimePs() int64 {
	if x != nil {
		return x.StartTimePs
	}
	return 0
}

func (x *IteratorStat) GetDurationPs() int64 {
	if x != nil {
		return x.DurationPs
	}
	return 0
}

func (x *IteratorStat) GetSelfTimePs() int64 {
	if x != nil {
		return x.SelfTimePs
	}
	return 0
}

func (x *IteratorStat) GetIsBlocking() bool {
	if x != nil {
		return x.IsBlocking
	}
	return false
}

func (x *IteratorStat) GetNumCalls() int64 {
	if x != nil {
		return x.NumCalls
	}
	return 0
}

// Metadata for iterator.
type IteratorMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of the iterator.
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Id of the parent iterator.
	ParentId int64 `protobuf:"varint,2,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	// Name of the iterator.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Long name of the iterator.
	LongName string `protobuf:"bytes,6,opt,name=long_name,json=longName,proto3" json:"long_name,omitempty"`
	// Whether it is an async iterator.
	IsAsync bool `protobuf:"varint,4,opt,name=is_async,json=isAsync,proto3" json:"is_async,omitempty"`
	// Parameters of the iterator (e.g., num_parallel_calls).
	Params map[string]string `protobuf:"bytes,5,rep,name=params,proto3" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *IteratorMetadata) Reset() {
	*x = IteratorMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_protobuf_tf_data_stats_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IteratorMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IteratorMetadata) ProtoMessage() {}

func (x *IteratorMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_protobuf_tf_data_stats_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IteratorMetadata.ProtoReflect.Descriptor instead.
func (*IteratorMetadata) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_protobuf_tf_data_stats_proto_rawDescGZIP(), []int{1}
}

func (x *IteratorMetadata) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *IteratorMetadata) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *IteratorMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *IteratorMetadata) GetLongName() string {
	if x != nil {
		return x.LongName
	}
	return ""
}

func (x *IteratorMetadata) GetIsAsync() bool {
	if x != nil {
		return x.IsAsync
	}
	return false
}

func (x *IteratorMetadata) GetParams() map[string]string {
	if x != nil {
		return x.Params
	}
	return nil
}

// Stat and metadata for input pipeline.
type InputPipelineStat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of the blocking iterator with the longest self time.
	BottleneckIteratorId int64 `protobuf:"varint,2,opt,name=bottleneck_iterator_id,json=bottleneckIteratorId,proto3" json:"bottleneck_iterator_id,omitempty"`
	// Latency of the bottleneck iterator.
	BottleneckIteratorLatencyPs int64 `protobuf:"varint,3,opt,name=bottleneck_iterator_latency_ps,json=bottleneckIteratorLatencyPs,proto3" json:"bottleneck_iterator_latency_ps,omitempty"`
	// Stats per iterator.
	IteratorStats map[int64]*IteratorStat `protobuf:"bytes,1,rep,name=iterator_stats,json=iteratorStats,proto3" json:"iterator_stats,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *InputPipelineStat) Reset() {
	*x = InputPipelineStat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_protobuf_tf_data_stats_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputPipelineStat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputPipelineStat) ProtoMessage() {}

func (x *InputPipelineStat) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_protobuf_tf_data_stats_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputPipelineStat.ProtoReflect.Descriptor instead.
func (*InputPipelineStat) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_protobuf_tf_data_stats_proto_rawDescGZIP(), []int{2}
}

func (x *InputPipelineStat) GetBottleneckIteratorId() int64 {
	if x != nil {
		return x.BottleneckIteratorId
	}
	return 0
}

func (x *InputPipelineStat) GetBottleneckIteratorLatencyPs() int64 {
	if x != nil {
		return x.BottleneckIteratorLatencyPs
	}
	return 0
}

func (x *InputPipelineStat) GetIteratorStats() map[int64]*IteratorStat {
	if x != nil {
		return x.IteratorStats
	}
	return nil
}

// Metadata for input pipeline.
type InputPipelineMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of the input pipeline which is set to the id of its root iterator.
	Id   int64                                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type InputPipelineMetadata_InputPipelineType `protobuf:"varint,2,opt,name=type,proto3,enum=tensorflow.profiler.InputPipelineMetadata_InputPipelineType" json:"type,omitempty"`
	Name string                                  `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *InputPipelineMetadata) Reset() {
	*x = InputPipelineMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_protobuf_tf_data_stats_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputPipelineMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputPipelineMetadata) ProtoMessage() {}

func (x *InputPipelineMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_protobuf_tf_data_stats_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputPipelineMetadata.ProtoReflect.Descriptor instead.
func (*InputPipelineMetadata) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_protobuf_tf_data_stats_proto_rawDescGZIP(), []int{3}
}

func (x *InputPipelineMetadata) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *InputPipelineMetadata) GetType() InputPipelineMetadata_InputPipelineType {
	if x != nil {
		return x.Type
	}
	return InputPipelineMetadata_HOST
}

func (x *InputPipelineMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Collection of metadata and stats of input pipeline.
type InputPipelineStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Metadata of the input pipeline.
	Metadata *InputPipelineMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Average latency (i.e., the root iterator's latency) of the input pipeline.
	AvgLatencyPs int64 `protobuf:"varint,3,opt,name=avg_latency_ps,json=avgLatencyPs,proto3" json:"avg_latency_ps,omitempty"`
	// Minimum latency of the input pipeline.
	MinLatencyPs int64 `protobuf:"varint,4,opt,name=min_latency_ps,json=minLatencyPs,proto3" json:"min_latency_ps,omitempty"`
	// Maximum latency of the input pipeline.
	MaxLatencyPs int64 `protobuf:"varint,5,opt,name=max_latency_ps,json=maxLatencyPs,proto3" json:"max_latency_ps,omitempty"`
	// The number of times this input pipeline was slower than 50 us.
	NumSlowCalls int64 `protobuf:"varint,6,opt,name=num_slow_calls,json=numSlowCalls,proto3" json:"num_slow_calls,omitempty"`
	// Stats per call sorted by the root iterator's duration.
	Stats []*InputPipelineStat `protobuf:"bytes,2,rep,name=stats,proto3" json:"stats,omitempty"`
}

func (x *InputPipelineStats) Reset() {
	*x = InputPipelineStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_protobuf_tf_data_stats_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputPipelineStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputPipelineStats) ProtoMessage() {}

func (x *InputPipelineStats) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_protobuf_tf_data_stats_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputPipelineStats.ProtoReflect.Descriptor instead.
func (*InputPipelineStats) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_protobuf_tf_data_stats_proto_rawDescGZIP(), []int{4}
}

func (x *InputPipelineStats) GetMetadata() *InputPipelineMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *InputPipelineStats) GetAvgLatencyPs() int64 {
	if x != nil {
		return x.AvgLatencyPs
	}
	return 0
}

func (x *InputPipelineStats) GetMinLatencyPs() int64 {
	if x != nil {
		return x.MinLatencyPs
	}
	return 0
}

func (x *InputPipelineStats) GetMaxLatencyPs() int64 {
	if x != nil {
		return x.MaxLatencyPs
	}
	return 0
}

func (x *InputPipelineStats) GetNumSlowCalls() int64 {
	if x != nil {
		return x.NumSlowCalls
	}
	return 0
}

func (x *InputPipelineStats) GetStats() []*InputPipelineStat {
	if x != nil {
		return x.Stats
	}
	return nil
}

// Collection of stats of tf.data input pipelines within a host.
type TfDataStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Metadata per iterator.
	IteratorMetadata map[int64]*IteratorMetadata `protobuf:"bytes,2,rep,name=iterator_metadata,json=iteratorMetadata,proto3" json:"iterator_metadata,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Stats per input pipeline.
	InputPipelines map[int64]*InputPipelineStats `protobuf:"bytes,1,rep,name=input_pipelines,json=inputPipelines,proto3" json:"input_pipelines,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TfDataStats) Reset() {
	*x = TfDataStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_protobuf_tf_data_stats_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TfDataStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TfDataStats) ProtoMessage() {}

func (x *TfDataStats) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_protobuf_tf_data_stats_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TfDataStats.ProtoReflect.Descriptor instead.
func (*TfDataStats) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_protobuf_tf_data_stats_proto_rawDescGZIP(), []int{5}
}

func (x *TfDataStats) GetIteratorMetadata() map[int64]*IteratorMetadata {
	if x != nil {
		return x.IteratorMetadata
	}
	return nil
}

func (x *TfDataStats) GetInputPipelines() map[int64]*InputPipelineStats {
	if x != nil {
		return x.InputPipelines
	}
	return nil
}

type TfDataBottleneckAnalysis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Host name.
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// Input pipeline name.
	InputPipeline string `protobuf:"bytes,2,opt,name=input_pipeline,json=inputPipeline,proto3" json:"input_pipeline,omitempty"`
	// Maximum latency of the input pipeline.
	MaxLatencyPs int64 `protobuf:"varint,3,opt,name=max_latency_ps,json=maxLatencyPs,proto3" json:"max_latency_ps,omitempty"`
	// Name of the bottleneck iterator.
	IteratorName string `protobuf:"bytes,4,opt,name=iterator_name,json=iteratorName,proto3" json:"iterator_name,omitempty"`
	// Long name of the bottleneck iterator.
	IteratorLongName string `protobuf:"bytes,5,opt,name=iterator_long_name,json=iteratorLongName,proto3" json:"iterator_long_name,omitempty"`
	// Latency of the bottleneck iterator.
	IteratorLatencyPs int64 `protobuf:"varint,7,opt,name=iterator_latency_ps,json=iteratorLatencyPs,proto3" json:"iterator_latency_ps,omitempty"`
	// Suggestion to resolve the bottleneck.
	Suggestion string `protobuf:"bytes,6,opt,name=suggestion,proto3" json:"suggestion,omitempty"`
}

func (x *TfDataBottleneckAnalysis) Reset() {
	*x = TfDataBottleneckAnalysis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_protobuf_tf_data_stats_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TfDataBottleneckAnalysis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TfDataBottleneckAnalysis) ProtoMessage() {}

func (x *TfDataBottleneckAnalysis) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_protobuf_tf_data_stats_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TfDataBottleneckAnalysis.ProtoReflect.Descriptor instead.
func (*TfDataBottleneckAnalysis) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_protobuf_tf_data_stats_proto_rawDescGZIP(), []int{6}
}

func (x *TfDataBottleneckAnalysis) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *TfDataBottleneckAnalysis) GetInputPipeline() string {
	if x != nil {
		return x.InputPipeline
	}
	return ""
}

func (x *TfDataBottleneckAnalysis) GetMaxLatencyPs() int64 {
	if x != nil {
		return x.MaxLatencyPs
	}
	return 0
}

func (x *TfDataBottleneckAnalysis) GetIteratorName() string {
	if x != nil {
		return x.IteratorName
	}
	return ""
}

func (x *TfDataBottleneckAnalysis) GetIteratorLongName() string {
	if x != nil {
		return x.IteratorLongName
	}
	return ""
}

func (x *TfDataBottleneckAnalysis) GetIteratorLatencyPs() int64 {
	if x != nil {
		return x.IteratorLatencyPs
	}
	return 0
}

func (x *TfDataBottleneckAnalysis) GetSuggestion() string {
	if x != nil {
		return x.Suggestion
	}
	return ""
}

// TfDataStats of all hosts.
type CombinedTfDataStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether it is input bound.
	IsInputBound bool `protobuf:"varint,3,opt,name=is_input_bound,json=isInputBound,proto3" json:"is_input_bound,omitempty"`
	// Summary of the analysis.
	Summary string `protobuf:"bytes,4,opt,name=summary,proto3" json:"summary,omitempty"`
	// Bottleneck analysis result.
	BottleneckAnalysis []*TfDataBottleneckAnalysis `protobuf:"bytes,1,rep,name=bottleneck_analysis,json=bottleneckAnalysis,proto3" json:"bottleneck_analysis,omitempty"`
	// TfDataStats per host.
	TfDataStats map[string]*TfDataStats `protobuf:"bytes,2,rep,name=tf_data_stats,json=tfDataStats,proto3" json:"tf_data_stats,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CombinedTfDataStats) Reset() {
	*x = CombinedTfDataStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_protobuf_tf_data_stats_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CombinedTfDataStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CombinedTfDataStats) ProtoMessage() {}

func (x *CombinedTfDataStats) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_protobuf_tf_data_stats_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CombinedTfDataStats.ProtoReflect.Descriptor instead.
func (*CombinedTfDataStats) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_protobuf_tf_data_stats_proto_rawDescGZIP(), []int{7}
}

func (x *CombinedTfDataStats) GetIsInputBound() bool {
	if x != nil {
		return x.IsInputBound
	}
	return false
}

func (x *CombinedTfDataStats) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *CombinedTfDataStats) GetBottleneckAnalysis() []*TfDataBottleneckAnalysis {
	if x != nil {
		return x.BottleneckAnalysis
	}
	return nil
}

func (x *CombinedTfDataStats) GetTfDataStats() map[string]*TfDataStats {
	if x != nil {
		return x.TfDataStats
	}
	return nil
}

var File_tensorflow_core_profiler_protobuf_tf_data_stats_proto protoreflect.FileDescriptor

var file_tensorflow_core_profiler_protobuf_tf_data_stats_proto_rawDesc = []byte{
	0x0a, 0x35, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x66, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x22, 0xc3, 0x01, 0x0a,
	0x0c, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a,
	0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x50,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x70, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x66, 0x54, 0x69,
	0x6d, 0x65, 0x50, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x61, 0x6c,
	0x6c, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6e, 0x75, 0x6d, 0x43, 0x61, 0x6c,
	0x6c, 0x73, 0x22, 0x91, 0x02, 0x0a, 0x10, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x6e,
	0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x61, 0x73, 0x79, 0x6e,
	0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x41, 0x73, 0x79, 0x6e, 0x63,
	0x12, 0x49, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd5, 0x02, 0x0a, 0x11, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x12, 0x34, 0x0a, 0x16,
	0x62, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x6e, 0x65, 0x63, 0x6b, 0x5f, 0x69, 0x74, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x62, 0x6f,
	0x74, 0x74, 0x6c, 0x65, 0x6e, 0x65, 0x63, 0x6b, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x49, 0x64, 0x12, 0x43, 0x0a, 0x1e, 0x62, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x6e, 0x65, 0x63, 0x6b,
	0x5f, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63,
	0x79, 0x5f, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x1b, 0x62, 0x6f, 0x74, 0x74,
	0x6c, 0x65, 0x6e, 0x65, 0x63, 0x6b, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4c, 0x61,
	0x74, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x73, 0x12, 0x60, 0x0a, 0x0e, 0x69, 0x74, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x39, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x2e, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x69, 0x74, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x1a, 0x63, 0x0a, 0x12, 0x49, 0x74, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x37, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xbe,
	0x01, 0x0a, 0x15, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x50, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x29,
	0x0a, 0x11, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x4f, 0x53, 0x54, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x10, 0x01, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x22,
	0xb2, 0x02, 0x0a, 0x12, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x46, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x24,
	0x0a, 0x0e, 0x61, 0x76, 0x67, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x70, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x61, 0x76, 0x67, 0x4c, 0x61, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x50, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x61, 0x74, 0x65,
	0x6e, 0x63, 0x79, 0x5f, 0x70, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x69,
	0x6e, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61,
	0x78, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x70, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x73,
	0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x61, 0x6c,
	0x6c, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x53, 0x6c, 0x6f,
	0x77, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x3c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x22, 0xa9, 0x03, 0x0a, 0x0b, 0x54, 0x66, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x12, 0x63, 0x0a, 0x11, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x36, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x54, 0x66, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x2e, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x5d, 0x0a, 0x0f, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x54, 0x66, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x1a, 0x6a, 0x0a, 0x15, 0x49, 0x74, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x3b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x6a, 0x0a, 0x13, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3d, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x74,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x72, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x9e, 0x02, 0x0a, 0x18, 0x54, 0x66, 0x44, 0x61, 0x74, 0x61, 0x42, 0x6f, 0x74, 0x74, 0x6c,
	0x65, 0x6e, 0x65, 0x63, 0x6b, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73,
	0x74, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f,
	0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x6d, 0x61, 0x78, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4c, 0x6f, 0x6e, 0x67, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6c, 0x61,
	0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x70, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11,
	0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x50,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xf6, 0x02, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x54, 0x66,
	0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x69, 0x73, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x5e, 0x0a, 0x13, 0x62, 0x6f, 0x74,
	0x74, 0x6c, 0x65, 0x6e, 0x65, 0x63, 0x6b, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x54, 0x66, 0x44,
	0x61, 0x74, 0x61, 0x42, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x6e, 0x65, 0x63, 0x6b, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x73, 0x69, 0x73, 0x52, 0x12, 0x62, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x6e, 0x65, 0x63,
	0x6b, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x12, 0x5d, 0x0a, 0x0d, 0x74, 0x66, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x39, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x64, 0x54,
	0x66, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x54, 0x66, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x74, 0x61, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x74, 0x66, 0x44,
	0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x73, 0x1a, 0x60, 0x0a, 0x10, 0x54, 0x66, 0x44, 0x61,
	0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x36,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x72, 0x2e, 0x54, 0x66, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0xdc, 0x01, 0x0a, 0x17, 0x63,
	0x6f, 0x6d, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x42, 0x10, 0x54, 0x66, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x02, 0x50, 0x01, 0x5a, 0x40, 0x67, 0x69,
	0x74, 0x65, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x71, 0x63, 0x69, 0x69, 0x70, 0x2d, 0x69, 0x63,
	0x70, 0x2f, 0x74, 0x66, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2f, 0x74, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0xa2, 0x02,
	0x03, 0x54, 0x50, 0x58, 0xaa, 0x02, 0x13, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0xca, 0x02, 0x13, 0x54, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72,
	0xe2, 0x02, 0x1f, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5c, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0xea, 0x02, 0x14, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x3a,
	0x3a, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_tensorflow_core_profiler_protobuf_tf_data_stats_proto_rawDescOnce sync.Once
	file_tensorflow_core_profiler_protobuf_tf_data_stats_proto_rawDescData = file_tensorflow_core_profiler_protobuf_tf_data_stats_proto_rawDesc
)

func file_tensorflow_core_profiler_protobuf_tf_data_stats_proto_rawDescGZIP() []byte {
	file_tensorflow_core_profiler_protobuf_tf_data_stats_proto_rawDescOnce.Do(func() {
		file_tensorflow_core_profiler_protobuf_tf_data_stats_proto_rawDescData = protoimpl.X.CompressGZIP(file_tensorflow_core_profiler_protobuf_tf_data_stats_proto_rawDescData)
	})
	return file_tensorflow_core_profiler_protobuf_tf_data_stats_proto_rawDescData
}

var file_tensorflow_core_profiler_protobuf_tf_data_stats_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_tensorflow_core_profiler_protobuf_tf_data_stats_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_tensorflow_core_profiler_protobuf_tf_data_stats_proto_goTypes = []interface{}{
	(InputPipelineMetadata_InputPipelineType)(0), // 0: tensorflow.profiler.InputPipelineMetadata.InputPipelineType
	(*IteratorStat)(nil),                         // 1: tensorflow.profiler.IteratorStat
	(*IteratorMetadata)(nil),                     // 2: tensorflow.profiler.IteratorMetadata
	(*InputPipelineStat)(nil),                    // 3: tensorflow.profiler.InputPipelineStat
	(*InputPipelineMetadata)(nil),                // 4: tensorflow.profiler.InputPipelineMetadata
	(*InputPipelineStats)(nil),                   // 5: tensorflow.profiler.InputPipelineStats
	(*TfDataStats)(nil),                          // 6: tensorflow.profiler.TfDataStats
	(*TfDataBottleneckAnalysis)(nil),             // 7: tensorflow.profiler.TfDataBottleneckAnalysis
	(*CombinedTfDataStats)(nil),                  // 8: tensorflow.profiler.CombinedTfDataStats
	nil,                                          // 9: tensorflow.profiler.IteratorMetadata.ParamsEntry
	nil,                                          // 10: tensorflow.profiler.InputPipelineStat.IteratorStatsEntry
	nil,                                          // 11: tensorflow.profiler.TfDataStats.IteratorMetadataEntry
	nil,                                          // 12: tensorflow.profiler.TfDataStats.InputPipelinesEntry
	nil,                                          // 13: tensorflow.profiler.CombinedTfDataStats.TfDataStatsEntry
}
var file_tensorflow_core_profiler_protobuf_tf_data_stats_proto_depIdxs = []int32{
	9,  // 0: tensorflow.profiler.IteratorMetadata.params:type_name -> tensorflow.profiler.IteratorMetadata.ParamsEntry
	10, // 1: tensorflow.profiler.InputPipelineStat.iterator_stats:type_name -> tensorflow.profiler.InputPipelineStat.IteratorStatsEntry
	0,  // 2: tensorflow.profiler.InputPipelineMetadata.type:type_name -> tensorflow.profiler.InputPipelineMetadata.InputPipelineType
	4,  // 3: tensorflow.profiler.InputPipelineStats.metadata:type_name -> tensorflow.profiler.InputPipelineMetadata
	3,  // 4: tensorflow.profiler.InputPipelineStats.stats:type_name -> tensorflow.profiler.InputPipelineStat
	11, // 5: tensorflow.profiler.TfDataStats.iterator_metadata:type_name -> tensorflow.profiler.TfDataStats.IteratorMetadataEntry
	12, // 6: tensorflow.profiler.TfDataStats.input_pipelines:type_name -> tensorflow.profiler.TfDataStats.InputPipelinesEntry
	7,  // 7: tensorflow.profiler.CombinedTfDataStats.bottleneck_analysis:type_name -> tensorflow.profiler.TfDataBottleneckAnalysis
	13, // 8: tensorflow.profiler.CombinedTfDataStats.tf_data_stats:type_name -> tensorflow.profiler.CombinedTfDataStats.TfDataStatsEntry
	1,  // 9: tensorflow.profiler.InputPipelineStat.IteratorStatsEntry.value:type_name -> tensorflow.profiler.IteratorStat
	2,  // 10: tensorflow.profiler.TfDataStats.IteratorMetadataEntry.value:type_name -> tensorflow.profiler.IteratorMetadata
	5,  // 11: tensorflow.profiler.TfDataStats.InputPipelinesEntry.value:type_name -> tensorflow.profiler.InputPipelineStats
	6,  // 12: tensorflow.profiler.CombinedTfDataStats.TfDataStatsEntry.value:type_name -> tensorflow.profiler.TfDataStats
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_tensorflow_core_profiler_protobuf_tf_data_stats_proto_init() }
func file_tensorflow_core_profiler_protobuf_tf_data_stats_proto_init() {
	if File_tensorflow_core_profiler_protobuf_tf_data_stats_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tensorflow_core_profiler_protobuf_tf_data_stats_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IteratorStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_profiler_protobuf_tf_data_stats_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IteratorMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_profiler_protobuf_tf_data_stats_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputPipelineStat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_profiler_protobuf_tf_data_stats_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputPipelineMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_profiler_protobuf_tf_data_stats_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputPipelineStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_profiler_protobuf_tf_data_stats_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TfDataStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_profiler_protobuf_tf_data_stats_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TfDataBottleneckAnalysis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_profiler_protobuf_tf_data_stats_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CombinedTfDataStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tensorflow_core_profiler_protobuf_tf_data_stats_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tensorflow_core_profiler_protobuf_tf_data_stats_proto_goTypes,
		DependencyIndexes: file_tensorflow_core_profiler_protobuf_tf_data_stats_proto_depIdxs,
		EnumInfos:         file_tensorflow_core_profiler_protobuf_tf_data_stats_proto_enumTypes,
		MessageInfos:      file_tensorflow_core_profiler_protobuf_tf_data_stats_proto_msgTypes,
	}.Build()
	File_tensorflow_core_profiler_protobuf_tf_data_stats_proto = out.File
	file_tensorflow_core_profiler_protobuf_tf_data_stats_proto_rawDesc = nil
	file_tensorflow_core_profiler_protobuf_tf_data_stats_proto_goTypes = nil
	file_tensorflow_core_profiler_protobuf_tf_data_stats_proto_depIdxs = nil
}
