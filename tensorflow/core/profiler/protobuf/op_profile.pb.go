// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: tensorflow/core/profiler/protobuf/op_profile.proto

package protobuf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Profile is the top-level data that summarizes a program.
type Profile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Root of a profile broken down by instruction category.
	ByCategory *Node `protobuf:"bytes,1,opt,name=by_category,json=byCategory,proto3" json:"by_category,omitempty"`
	// Root of a profile broken down by program.
	ByProgram *Node `protobuf:"bytes,4,opt,name=by_program,json=byProgram,proto3" json:"by_program,omitempty"`
	// Device type.
	DeviceType string `protobuf:"bytes,5,opt,name=device_type,json=deviceType,proto3" json:"device_type,omitempty"`
	// Exclude idle ops.
	ByCategoryExcludeIdle *Node `protobuf:"bytes,6,opt,name=by_category_exclude_idle,json=byCategoryExcludeIdle,proto3" json:"by_category_exclude_idle,omitempty"`
	ByProgramExcludeIdle  *Node `protobuf:"bytes,7,opt,name=by_program_exclude_idle,json=byProgramExcludeIdle,proto3" json:"by_program_exclude_idle,omitempty"`
}

func (x *Profile) Reset() {
	*x = Profile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_protobuf_op_profile_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Profile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Profile) ProtoMessage() {}

func (x *Profile) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_protobuf_op_profile_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Profile.ProtoReflect.Descriptor instead.
func (*Profile) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_protobuf_op_profile_proto_rawDescGZIP(), []int{0}
}

func (x *Profile) GetByCategory() *Node {
	if x != nil {
		return x.ByCategory
	}
	return nil
}

func (x *Profile) GetByProgram() *Node {
	if x != nil {
		return x.ByProgram
	}
	return nil
}

func (x *Profile) GetDeviceType() string {
	if x != nil {
		return x.DeviceType
	}
	return ""
}

func (x *Profile) GetByCategoryExcludeIdle() *Node {
	if x != nil {
		return x.ByCategoryExcludeIdle
	}
	return nil
}

func (x *Profile) GetByProgramExcludeIdle() *Node {
	if x != nil {
		return x.ByProgramExcludeIdle
	}
	return nil
}

// An entry in the profile tree. (An instruction, or set of instructions).
type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`         // Semantics depend on contents.
	Metrics  *Metrics `protobuf:"bytes,2,opt,name=metrics,proto3" json:"metrics,omitempty"`   // May be omitted e.g. for fused instructions.
	Children []*Node  `protobuf:"bytes,3,rep,name=children,proto3" json:"children,omitempty"` // Subjected to pruning.
	// Details about what this node represents.
	//
	// Types that are assignable to Contents:
	//
	//	*Node_Category
	//	*Node_Xla
	Contents    isNode_Contents `protobuf_oneof:"contents"`
	NumChildren int32           `protobuf:"varint,6,opt,name=num_children,json=numChildren,proto3" json:"num_children,omitempty"` // Total number of children before pruning.
}

func (x *Node) Reset() {
	*x = Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_protobuf_op_profile_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_protobuf_op_profile_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_protobuf_op_profile_proto_rawDescGZIP(), []int{1}
}

func (x *Node) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Node) GetMetrics() *Metrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *Node) GetChildren() []*Node {
	if x != nil {
		return x.Children
	}
	return nil
}

func (m *Node) GetContents() isNode_Contents {
	if m != nil {
		return m.Contents
	}
	return nil
}

func (x *Node) GetCategory() *Node_InstructionCategory {
	if x, ok := x.GetContents().(*Node_Category); ok {
		return x.Category
	}
	return nil
}

func (x *Node) GetXla() *Node_XLAInstruction {
	if x, ok := x.GetContents().(*Node_Xla); ok {
		return x.Xla
	}
	return nil
}

func (x *Node) GetNumChildren() int32 {
	if x != nil {
		return x.NumChildren
	}
	return 0
}

type isNode_Contents interface {
	isNode_Contents()
}

type Node_Category struct {
	Category *Node_InstructionCategory `protobuf:"bytes,4,opt,name=category,proto3,oneof"`
}

type Node_Xla struct {
	Xla *Node_XLAInstruction `protobuf:"bytes,5,opt,name=xla,proto3,oneof"`
}

func (*Node_Category) isNode_Contents() {}

func (*Node_Xla) isNode_Contents() {}

// Measurements of an operation (or aggregated set of operations).
// Metrics are always "total" rather than "self".
type Metrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Core-time taken by this operation, as a fraction of all operations.
	Time float64 `protobuf:"fixed64,1,opt,name=time,proto3" json:"time,omitempty"`
	// Floating point computations performed by this operation, as a fraction of
	// peak core FLOPS * program time. This representation has useful properties:
	//   - it is proportional to the number of floating point operations performed
	//   - utilization is flops/time
	//   - wasted potential flops is proportional to time - flops
	//   - it does not reveal the peak core FLOPS of the hardware
	Flops float64 `protobuf:"fixed64,2,opt,name=flops,proto3" json:"flops,omitempty"`
	// The memory bandwidth used to load operands, as a fraction of
	// thereotical memory bandwidth on the specific hardware.
	// This is aggregated utilization across on-chip and off-chip memory.
	MemoryBandwidthUtil float64 `protobuf:"fixed64,3,opt,name=memory_bandwidth_util,json=memoryBandwidthUtil,proto3" json:"memory_bandwidth_util,omitempty"`
	// This is just off-chip hbm memory bw utilization.
	HbmBandwidthUtil float64 `protobuf:"fixed64,4,opt,name=hbm_bandwidth_util,json=hbmBandwidthUtil,proto3" json:"hbm_bandwidth_util,omitempty"`
	RawTime          float64 `protobuf:"fixed64,11,opt,name=raw_time,json=rawTime,proto3" json:"raw_time,omitempty"`                              // Elapsed core-time in picoseconds.
	RawFlops         float64 `protobuf:"fixed64,12,opt,name=raw_flops,json=rawFlops,proto3" json:"raw_flops,omitempty"`                           // Total floating-point operations performed.
	RawBytesAccessed float64 `protobuf:"fixed64,13,opt,name=raw_bytes_accessed,json=rawBytesAccessed,proto3" json:"raw_bytes_accessed,omitempty"` // Total bytes accessed (include read/write).
	// Total HBM bytes accessed (include read/write).
	RawHbmBytesAccessed float64 `protobuf:"fixed64,14,opt,name=raw_hbm_bytes_accessed,json=rawHbmBytesAccessed,proto3" json:"raw_hbm_bytes_accessed,omitempty"`
}

func (x *Metrics) Reset() {
	*x = Metrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_protobuf_op_profile_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metrics) ProtoMessage() {}

func (x *Metrics) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_protobuf_op_profile_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metrics.ProtoReflect.Descriptor instead.
func (*Metrics) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_protobuf_op_profile_proto_rawDescGZIP(), []int{2}
}

func (x *Metrics) GetTime() float64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *Metrics) GetFlops() float64 {
	if x != nil {
		return x.Flops
	}
	return 0
}

func (x *Metrics) GetMemoryBandwidthUtil() float64 {
	if x != nil {
		return x.MemoryBandwidthUtil
	}
	return 0
}

func (x *Metrics) GetHbmBandwidthUtil() float64 {
	if x != nil {
		return x.HbmBandwidthUtil
	}
	return 0
}

func (x *Metrics) GetRawTime() float64 {
	if x != nil {
		return x.RawTime
	}
	return 0
}

func (x *Metrics) GetRawFlops() float64 {
	if x != nil {
		return x.RawFlops
	}
	return 0
}

func (x *Metrics) GetRawBytesAccessed() float64 {
	if x != nil {
		return x.RawBytesAccessed
	}
	return 0
}

func (x *Metrics) GetRawHbmBytesAccessed() float64 {
	if x != nil {
		return x.RawHbmBytesAccessed
	}
	return 0
}

// A category of XLA instructions.
// name is a descriptive string, like "data formatting".
type Node_InstructionCategory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Node_InstructionCategory) Reset() {
	*x = Node_InstructionCategory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_protobuf_op_profile_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node_InstructionCategory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node_InstructionCategory) ProtoMessage() {}

func (x *Node_InstructionCategory) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_protobuf_op_profile_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node_InstructionCategory.ProtoReflect.Descriptor instead.
func (*Node_InstructionCategory) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_protobuf_op_profile_proto_rawDescGZIP(), []int{1, 0}
}

// A single XLA instruction.
// name is the unique instruction id, like "%multiply.5".
type Node_XLAInstruction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Op         string `protobuf:"bytes,1,opt,name=op,proto3" json:"op,omitempty"`                 // Opcode like %multiply
	Expression string `protobuf:"bytes,2,opt,name=expression,proto3" json:"expression,omitempty"` // %multiply = [shape]multiply(operand1, operand2)
	Provenance string `protobuf:"bytes,3,opt,name=provenance,proto3" json:"provenance,omitempty"` // Typically the TensorFlow operation name.
	Category   string `protobuf:"bytes,4,opt,name=category,proto3" json:"category,omitempty"`
	// Describes the physical memory layout of the instruction's primary input.
	// e.g. for a convolution, this analyzes the image and ignores the kernel.
	Layout                   *Node_XLAInstruction_LayoutAnalysis `protobuf:"bytes,5,opt,name=layout,proto3" json:"layout,omitempty"`
	ComputationPrimitiveSize uint32                              `protobuf:"varint,6,opt,name=computation_primitive_size,json=computationPrimitiveSize,proto3" json:"computation_primitive_size,omitempty"`
}

func (x *Node_XLAInstruction) Reset() {
	*x = Node_XLAInstruction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_protobuf_op_profile_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node_XLAInstruction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node_XLAInstruction) ProtoMessage() {}

func (x *Node_XLAInstruction) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_protobuf_op_profile_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node_XLAInstruction.ProtoReflect.Descriptor instead.
func (*Node_XLAInstruction) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_protobuf_op_profile_proto_rawDescGZIP(), []int{1, 1}
}

func (x *Node_XLAInstruction) GetOp() string {
	if x != nil {
		return x.Op
	}
	return ""
}

func (x *Node_XLAInstruction) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

func (x *Node_XLAInstruction) GetProvenance() string {
	if x != nil {
		return x.Provenance
	}
	return ""
}

func (x *Node_XLAInstruction) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *Node_XLAInstruction) GetLayout() *Node_XLAInstruction_LayoutAnalysis {
	if x != nil {
		return x.Layout
	}
	return nil
}

func (x *Node_XLAInstruction) GetComputationPrimitiveSize() uint32 {
	if x != nil {
		return x.ComputationPrimitiveSize
	}
	return 0
}

type Node_XLAInstruction_LayoutAnalysis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The physical data layout, from most-minor to most-major dimensions.
	Dimensions []*Node_XLAInstruction_LayoutAnalysis_Dimension `protobuf:"bytes,1,rep,name=dimensions,proto3" json:"dimensions,omitempty"`
}

func (x *Node_XLAInstruction_LayoutAnalysis) Reset() {
	*x = Node_XLAInstruction_LayoutAnalysis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_protobuf_op_profile_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node_XLAInstruction_LayoutAnalysis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node_XLAInstruction_LayoutAnalysis) ProtoMessage() {}

func (x *Node_XLAInstruction_LayoutAnalysis) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_protobuf_op_profile_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node_XLAInstruction_LayoutAnalysis.ProtoReflect.Descriptor instead.
func (*Node_XLAInstruction_LayoutAnalysis) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_protobuf_op_profile_proto_rawDescGZIP(), []int{1, 1, 0}
}

func (x *Node_XLAInstruction_LayoutAnalysis) GetDimensions() []*Node_XLAInstruction_LayoutAnalysis_Dimension {
	if x != nil {
		return x.Dimensions
	}
	return nil
}

type Node_XLAInstruction_LayoutAnalysis_Dimension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size      int32  `protobuf:"varint,1,opt,name=size,proto3" json:"size,omitempty"`           // Size of the data in this dimension.
	Alignment int32  `protobuf:"varint,2,opt,name=alignment,proto3" json:"alignment,omitempty"` // Data must be padded to a multiple of alignment.
	Semantics string `protobuf:"bytes,3,opt,name=semantics,proto3" json:"semantics,omitempty"`  // What the dimension represents, e.g. "spatial".
}

func (x *Node_XLAInstruction_LayoutAnalysis_Dimension) Reset() {
	*x = Node_XLAInstruction_LayoutAnalysis_Dimension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_protobuf_op_profile_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node_XLAInstruction_LayoutAnalysis_Dimension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node_XLAInstruction_LayoutAnalysis_Dimension) ProtoMessage() {}

func (x *Node_XLAInstruction_LayoutAnalysis_Dimension) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_protobuf_op_profile_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node_XLAInstruction_LayoutAnalysis_Dimension.ProtoReflect.Descriptor instead.
func (*Node_XLAInstruction_LayoutAnalysis_Dimension) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_protobuf_op_profile_proto_rawDescGZIP(), []int{1, 1, 0, 0}
}

func (x *Node_XLAInstruction_LayoutAnalysis_Dimension) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Node_XLAInstruction_LayoutAnalysis_Dimension) GetAlignment() int32 {
	if x != nil {
		return x.Alignment
	}
	return 0
}

func (x *Node_XLAInstruction_LayoutAnalysis_Dimension) GetSemantics() string {
	if x != nil {
		return x.Semantics
	}
	return ""
}

var File_tensorflow_core_profiler_protobuf_op_profile_proto protoreflect.FileDescriptor

var file_tensorflow_core_profiler_protobuf_op_profile_proto_rawDesc = []byte{
	0x0a, 0x32, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x6f, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x6f, 0x70, 0x5f, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x22, 0xa1, 0x03, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x12, 0x45, 0x0a, 0x0b, 0x62, 0x79, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x6f, 0x70, 0x5f, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x62, 0x79, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x43, 0x0a, 0x0a, 0x62, 0x79, 0x5f, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x72, 0x2e, 0x6f, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x09, 0x62, 0x79, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x1f, 0x0a, 0x0b,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5d, 0x0a,
	0x18, 0x62, 0x79, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x65, 0x78, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x6f, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x15, 0x62, 0x79, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x64, 0x6c, 0x65, 0x12, 0x5b, 0x0a, 0x17,
	0x62, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x72, 0x2e, 0x6f, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x14, 0x62, 0x79, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x45, 0x78,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x64, 0x6c, 0x65, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x4a,
	0x04, 0x08, 0x03, 0x10, 0x04, 0x52, 0x14, 0x62, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x5f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x52, 0x0b, 0x70, 0x65, 0x72,
	0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x22, 0xfd, 0x06, 0x0a, 0x04, 0x4e, 0x6f, 0x64,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x6f, 0x70, 0x5f,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52,
	0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x40, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c,
	0x64, 0x72, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72,
	0x2e, 0x6f, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x56, 0x0a, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x74,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x72, 0x2e, 0x6f, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x48, 0x00, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x12, 0x47, 0x0a, 0x03, 0x78, 0x6c, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x6f, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x58, 0x4c, 0x41, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x78, 0x6c, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x6e,
	0x75, 0x6d, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x1a, 0x15,
	0x0a, 0x13, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x1a, 0xf4, 0x03, 0x0a, 0x0e, 0x58, 0x4c, 0x41, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x12, 0x5a, 0x0a, 0x06, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x6f, 0x70, 0x5f, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x58, 0x4c, 0x41, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52, 0x06, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x12, 0x3c, 0x0a, 0x1a, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x70, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x1a, 0xdb,
	0x01, 0x0a, 0x0e, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69,
	0x73, 0x12, 0x6c, 0x0a, 0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x6f, 0x70, 0x5f, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x58, 0x4c, 0x41, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x2e, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x1a,
	0x5b, 0x0a, 0x09, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x73, 0x42, 0x0a, 0x0a, 0x08,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xb0, 0x02, 0x0a, 0x07, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x6f, 0x70,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x66, 0x6c, 0x6f, 0x70, 0x73, 0x12, 0x32,
	0x0a, 0x15, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x55, 0x74,
	0x69, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x68, 0x62, 0x6d, 0x5f, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69,
	0x64, 0x74, 0x68, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10,
	0x68, 0x62, 0x6d, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x55, 0x74, 0x69, 0x6c,
	0x12, 0x19, 0x0a, 0x08, 0x72, 0x61, 0x77, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x07, 0x72, 0x61, 0x77, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72,
	0x61, 0x77, 0x5f, 0x66, 0x6c, 0x6f, 0x70, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x72, 0x61, 0x77, 0x46, 0x6c, 0x6f, 0x70, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x61, 0x77, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x72, 0x61, 0x77, 0x42, 0x79, 0x74, 0x65, 0x73, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x72, 0x61, 0x77, 0x5f, 0x68, 0x62,
	0x6d, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x72, 0x61, 0x77, 0x48, 0x62, 0x6d, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x42, 0x8e, 0x02, 0x0a, 0x22,
	0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x6f, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x42, 0x0e, 0x4f, 0x70, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x48, 0x02, 0x50, 0x01, 0x5a, 0x40, 0x67, 0x69, 0x74, 0x65, 0x65, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x71, 0x63, 0x69, 0x69, 0x70, 0x2d, 0x69, 0x63, 0x70, 0x2f, 0x74, 0x66, 0x2d, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2f, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f,
	0x77, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0xa2, 0x02, 0x03, 0x54, 0x50, 0x4f, 0xaa, 0x02,
	0x1d, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0xca, 0x02,
	0x1d, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5c, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x72, 0x5c, 0x4f, 0x70, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0xe2, 0x02,
	0x29, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5c, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x72, 0x5c, 0x4f, 0x70, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5c, 0x47,
	0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x1f, 0x54, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x3a, 0x3a, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x72, 0x3a, 0x3a, 0x4f, 0x70, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tensorflow_core_profiler_protobuf_op_profile_proto_rawDescOnce sync.Once
	file_tensorflow_core_profiler_protobuf_op_profile_proto_rawDescData = file_tensorflow_core_profiler_protobuf_op_profile_proto_rawDesc
)

func file_tensorflow_core_profiler_protobuf_op_profile_proto_rawDescGZIP() []byte {
	file_tensorflow_core_profiler_protobuf_op_profile_proto_rawDescOnce.Do(func() {
		file_tensorflow_core_profiler_protobuf_op_profile_proto_rawDescData = protoimpl.X.CompressGZIP(file_tensorflow_core_profiler_protobuf_op_profile_proto_rawDescData)
	})
	return file_tensorflow_core_profiler_protobuf_op_profile_proto_rawDescData
}

var file_tensorflow_core_profiler_protobuf_op_profile_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_tensorflow_core_profiler_protobuf_op_profile_proto_goTypes = []interface{}{
	(*Profile)(nil),                                      // 0: tensorflow.profiler.op_profile.Profile
	(*Node)(nil),                                         // 1: tensorflow.profiler.op_profile.Node
	(*Metrics)(nil),                                      // 2: tensorflow.profiler.op_profile.Metrics
	(*Node_InstructionCategory)(nil),                     // 3: tensorflow.profiler.op_profile.Node.InstructionCategory
	(*Node_XLAInstruction)(nil),                          // 4: tensorflow.profiler.op_profile.Node.XLAInstruction
	(*Node_XLAInstruction_LayoutAnalysis)(nil),           // 5: tensorflow.profiler.op_profile.Node.XLAInstruction.LayoutAnalysis
	(*Node_XLAInstruction_LayoutAnalysis_Dimension)(nil), // 6: tensorflow.profiler.op_profile.Node.XLAInstruction.LayoutAnalysis.Dimension
}
var file_tensorflow_core_profiler_protobuf_op_profile_proto_depIdxs = []int32{
	1,  // 0: tensorflow.profiler.op_profile.Profile.by_category:type_name -> tensorflow.profiler.op_profile.Node
	1,  // 1: tensorflow.profiler.op_profile.Profile.by_program:type_name -> tensorflow.profiler.op_profile.Node
	1,  // 2: tensorflow.profiler.op_profile.Profile.by_category_exclude_idle:type_name -> tensorflow.profiler.op_profile.Node
	1,  // 3: tensorflow.profiler.op_profile.Profile.by_program_exclude_idle:type_name -> tensorflow.profiler.op_profile.Node
	2,  // 4: tensorflow.profiler.op_profile.Node.metrics:type_name -> tensorflow.profiler.op_profile.Metrics
	1,  // 5: tensorflow.profiler.op_profile.Node.children:type_name -> tensorflow.profiler.op_profile.Node
	3,  // 6: tensorflow.profiler.op_profile.Node.category:type_name -> tensorflow.profiler.op_profile.Node.InstructionCategory
	4,  // 7: tensorflow.profiler.op_profile.Node.xla:type_name -> tensorflow.profiler.op_profile.Node.XLAInstruction
	5,  // 8: tensorflow.profiler.op_profile.Node.XLAInstruction.layout:type_name -> tensorflow.profiler.op_profile.Node.XLAInstruction.LayoutAnalysis
	6,  // 9: tensorflow.profiler.op_profile.Node.XLAInstruction.LayoutAnalysis.dimensions:type_name -> tensorflow.profiler.op_profile.Node.XLAInstruction.LayoutAnalysis.Dimension
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_tensorflow_core_profiler_protobuf_op_profile_proto_init() }
func file_tensorflow_core_profiler_protobuf_op_profile_proto_init() {
	if File_tensorflow_core_profiler_protobuf_op_profile_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tensorflow_core_profiler_protobuf_op_profile_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Profile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_profiler_protobuf_op_profile_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_profiler_protobuf_op_profile_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_profiler_protobuf_op_profile_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node_InstructionCategory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_profiler_protobuf_op_profile_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node_XLAInstruction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_profiler_protobuf_op_profile_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node_XLAInstruction_LayoutAnalysis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_profiler_protobuf_op_profile_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node_XLAInstruction_LayoutAnalysis_Dimension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_tensorflow_core_profiler_protobuf_op_profile_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*Node_Category)(nil),
		(*Node_Xla)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tensorflow_core_profiler_protobuf_op_profile_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tensorflow_core_profiler_protobuf_op_profile_proto_goTypes,
		DependencyIndexes: file_tensorflow_core_profiler_protobuf_op_profile_proto_depIdxs,
		MessageInfos:      file_tensorflow_core_profiler_protobuf_op_profile_proto_msgTypes,
	}.Build()
	File_tensorflow_core_profiler_protobuf_op_profile_proto = out.File
	file_tensorflow_core_profiler_protobuf_op_profile_proto_rawDesc = nil
	file_tensorflow_core_profiler_protobuf_op_profile_proto_goTypes = nil
	file_tensorflow_core_profiler_protobuf_op_profile_proto_depIdxs = nil
}
