// This proto describes the format of the output profile file from
// the Pod Viewer tool.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: tensorflow/core/profiler/protobuf/pod_viewer.proto

package protobuf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Describes the replica groups in a cross replica op (e.g., all-reduce and
// all-to-all).
type ReplicaGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ids of the replicas that belongs to the same group. The ordering of the
	// ids matters in some ops (e.g., all-to-all).
	ReplicaIds []int64 `protobuf:"varint,1,rep,packed,name=replica_ids,json=replicaIds,proto3" json:"replica_ids,omitempty"`
}

func (x *ReplicaGroup) Reset() {
	*x = ReplicaGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_protobuf_pod_viewer_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplicaGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicaGroup) ProtoMessage() {}

func (x *ReplicaGroup) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_protobuf_pod_viewer_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicaGroup.ProtoReflect.Descriptor instead.
func (*ReplicaGroup) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_protobuf_pod_viewer_proto_rawDescGZIP(), []int{0}
}

func (x *ReplicaGroup) GetReplicaIds() []int64 {
	if x != nil {
		return x.ReplicaIds
	}
	return nil
}

type AllReduceOpInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of this OP.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Number of instances that this OP occurred.
	Occurrences uint32 `protobuf:"varint,2,opt,name=occurrences,proto3" json:"occurrences,omitempty"`
	// The time in microseconds spent in this OP (averaged across all of its
	// occurrences).
	DurationUs float64 `protobuf:"fixed64,3,opt,name=duration_us,json=durationUs,proto3" json:"duration_us,omitempty"`
	// Byte size of data transferred.
	DataSize uint64 `protobuf:"varint,4,opt,name=data_size,json=dataSize,proto3" json:"data_size,omitempty"`
	// Replica groups.
	ReplicaGroups []*ReplicaGroup `protobuf:"bytes,5,rep,name=replica_groups,json=replicaGroups,proto3" json:"replica_groups,omitempty"`
	// Description (e.g. XLA expression).
	Description string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *AllReduceOpInfo) Reset() {
	*x = AllReduceOpInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_protobuf_pod_viewer_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllReduceOpInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllReduceOpInfo) ProtoMessage() {}

func (x *AllReduceOpInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_protobuf_pod_viewer_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllReduceOpInfo.ProtoReflect.Descriptor instead.
func (*AllReduceOpInfo) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_protobuf_pod_viewer_proto_rawDescGZIP(), []int{1}
}

func (x *AllReduceOpInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AllReduceOpInfo) GetOccurrences() uint32 {
	if x != nil {
		return x.Occurrences
	}
	return 0
}

func (x *AllReduceOpInfo) GetDurationUs() float64 {
	if x != nil {
		return x.DurationUs
	}
	return 0
}

func (x *AllReduceOpInfo) GetDataSize() uint64 {
	if x != nil {
		return x.DataSize
	}
	return 0
}

func (x *AllReduceOpInfo) GetReplicaGroups() []*ReplicaGroup {
	if x != nil {
		return x.ReplicaGroups
	}
	return nil
}

func (x *AllReduceOpInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// Result proto for information in a step across all cores.
type PodStatsMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The (micro) step number.
	StepNum uint32 `protobuf:"varint,1,opt,name=step_num,json=stepNum,proto3" json:"step_num,omitempty"`
	// A map from core_id to PodStatsRecord.
	PodStatsPerCore map[uint32]*PodStatsRecord `protobuf:"bytes,2,rep,name=pod_stats_per_core,json=podStatsPerCore,proto3" json:"pod_stats_per_core,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// A database of channel info.
	ChannelDb []*ChannelInfo `protobuf:"bytes,3,rep,name=channel_db,json=channelDb,proto3" json:"channel_db,omitempty"`
	// A map from core ID to program replica id. Replica id map could change
	// during a profile session, but should stay stable within a step.
	CoreIdToReplicaIdMap map[uint32]uint32 `protobuf:"bytes,4,rep,name=core_id_to_replica_id_map,json=coreIdToReplicaIdMap,proto3" json:"core_id_to_replica_id_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// A database of all reduce ops.
	AllReduceOpDb []*AllReduceOpInfo `protobuf:"bytes,5,rep,name=all_reduce_op_db,json=allReduceOpDb,proto3" json:"all_reduce_op_db,omitempty"`
}

func (x *PodStatsMap) Reset() {
	*x = PodStatsMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_protobuf_pod_viewer_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodStatsMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodStatsMap) ProtoMessage() {}

func (x *PodStatsMap) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_protobuf_pod_viewer_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodStatsMap.ProtoReflect.Descriptor instead.
func (*PodStatsMap) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_protobuf_pod_viewer_proto_rawDescGZIP(), []int{2}
}

func (x *PodStatsMap) GetStepNum() uint32 {
	if x != nil {
		return x.StepNum
	}
	return 0
}

func (x *PodStatsMap) GetPodStatsPerCore() map[uint32]*PodStatsRecord {
	if x != nil {
		return x.PodStatsPerCore
	}
	return nil
}

func (x *PodStatsMap) GetChannelDb() []*ChannelInfo {
	if x != nil {
		return x.ChannelDb
	}
	return nil
}

func (x *PodStatsMap) GetCoreIdToReplicaIdMap() map[uint32]uint32 {
	if x != nil {
		return x.CoreIdToReplicaIdMap
	}
	return nil
}

func (x *PodStatsMap) GetAllReduceOpDb() []*AllReduceOpInfo {
	if x != nil {
		return x.AllReduceOpDb
	}
	return nil
}

// A sequence of PodStatsMap for each step.
type PodStatsSequence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PodStatsMap []*PodStatsMap `protobuf:"bytes,1,rep,name=pod_stats_map,json=podStatsMap,proto3" json:"pod_stats_map,omitempty"`
}

func (x *PodStatsSequence) Reset() {
	*x = PodStatsSequence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_protobuf_pod_viewer_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodStatsSequence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodStatsSequence) ProtoMessage() {}

func (x *PodStatsSequence) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_protobuf_pod_viewer_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodStatsSequence.ProtoReflect.Descriptor instead.
func (*PodStatsSequence) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_protobuf_pod_viewer_proto_rawDescGZIP(), []int{3}
}

func (x *PodStatsSequence) GetPodStatsMap() []*PodStatsMap {
	if x != nil {
		return x.PodStatsMap
	}
	return nil
}

// Next ID: 14
// Information about a send and recv channel.
type ChannelInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of the channel.
	ChannelId int64 `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// Core ids of send ops.
	SrcCoreIds []uint32 `protobuf:"varint,11,rep,packed,name=src_core_ids,json=srcCoreIds,proto3" json:"src_core_ids,omitempty"`
	// Core ids of recv ops.
	DstCoreIds []uint32 `protobuf:"varint,12,rep,packed,name=dst_core_ids,json=dstCoreIds,proto3" json:"dst_core_ids,omitempty"`
	// Byte size of the data transferred.
	DataSize uint64 `protobuf:"varint,4,opt,name=data_size,json=dataSize,proto3" json:"data_size,omitempty"`
	// Duration from the beginning of send to the end of recv-done in
	// microseconds.
	DurationUs float64 `protobuf:"fixed64,5,opt,name=duration_us,json=durationUs,proto3" json:"duration_us,omitempty"`
	// Number of occurrences of a channel.
	Occurrences uint32 `protobuf:"varint,6,opt,name=occurrences,proto3" json:"occurrences,omitempty"`
	// Percentage of the link BW utilized over the peak link BW.
	Utilization float64 `protobuf:"fixed64,7,opt,name=utilization,proto3" json:"utilization,omitempty"`
	// A list of hlo names associated with this channel id.
	HloNames []string `protobuf:"bytes,8,rep,name=hlo_names,json=hloNames,proto3" json:"hlo_names,omitempty"`
	// Duration from the beginning of the recv-done to the beginning of send in
	// microseconds. If the recv-done op starts after the beginning of the send
	// op, the delay is zero.
	SendDelayUs float64 `protobuf:"fixed64,9,opt,name=send_delay_us,json=sendDelayUs,proto3" json:"send_delay_us,omitempty"`
	// Description (e.g. XLA expression).
	Description string `protobuf:"bytes,13,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *ChannelInfo) Reset() {
	*x = ChannelInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_protobuf_pod_viewer_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelInfo) ProtoMessage() {}

func (x *ChannelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_protobuf_pod_viewer_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelInfo.ProtoReflect.Descriptor instead.
func (*ChannelInfo) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_protobuf_pod_viewer_proto_rawDescGZIP(), []int{4}
}

func (x *ChannelInfo) GetChannelId() int64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ChannelInfo) GetSrcCoreIds() []uint32 {
	if x != nil {
		return x.SrcCoreIds
	}
	return nil
}

func (x *ChannelInfo) GetDstCoreIds() []uint32 {
	if x != nil {
		return x.DstCoreIds
	}
	return nil
}

func (x *ChannelInfo) GetDataSize() uint64 {
	if x != nil {
		return x.DataSize
	}
	return 0
}

func (x *ChannelInfo) GetDurationUs() float64 {
	if x != nil {
		return x.DurationUs
	}
	return 0
}

func (x *ChannelInfo) GetOccurrences() uint32 {
	if x != nil {
		return x.Occurrences
	}
	return 0
}

func (x *ChannelInfo) GetUtilization() float64 {
	if x != nil {
		return x.Utilization
	}
	return 0
}

func (x *ChannelInfo) GetHloNames() []string {
	if x != nil {
		return x.HloNames
	}
	return nil
}

func (x *ChannelInfo) GetSendDelayUs() float64 {
	if x != nil {
		return x.SendDelayUs
	}
	return 0
}

func (x *ChannelInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type PodViewerSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Warnings []string `protobuf:"bytes,1,rep,name=warnings,proto3" json:"warnings,omitempty"`
}

func (x *PodViewerSummary) Reset() {
	*x = PodViewerSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_protobuf_pod_viewer_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodViewerSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodViewerSummary) ProtoMessage() {}

func (x *PodViewerSummary) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_protobuf_pod_viewer_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodViewerSummary.ProtoReflect.Descriptor instead.
func (*PodViewerSummary) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_protobuf_pod_viewer_proto_rawDescGZIP(), []int{5}
}

func (x *PodViewerSummary) GetWarnings() []string {
	if x != nil {
		return x.Warnings
	}
	return nil
}

// Next ID: 8
// Topology graph draws all the cores in the system in a 2-D rectangle or
// 3-D cube. It is hierarchically grouped by host, chip and core.
type PodViewerTopology struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of chips in the x dimension of the rectangle/cube.
	XDimension int32 `protobuf:"varint,1,opt,name=x_dimension,json=xDimension,proto3" json:"x_dimension,omitempty"`
	// Number of chips in the y dimension of the rectangle/cube.
	YDimension int32 `protobuf:"varint,2,opt,name=y_dimension,json=yDimension,proto3" json:"y_dimension,omitempty"`
	// Number of chips in the z dimension of the cube.
	ZDimension int32 `protobuf:"varint,3,opt,name=z_dimension,json=zDimension,proto3" json:"z_dimension,omitempty"`
	// Number of chips in the x dimension of each host.
	HostXStride int32 `protobuf:"varint,4,opt,name=host_x_stride,json=hostXStride,proto3" json:"host_x_stride,omitempty"`
	// Number of chips in the y dimension of each host.
	HostYStride int32 `protobuf:"varint,5,opt,name=host_y_stride,json=hostYStride,proto3" json:"host_y_stride,omitempty"`
	// Number of chips in the z dimension of each host.
	HostZStride int32 `protobuf:"varint,6,opt,name=host_z_stride,json=hostZStride,proto3" json:"host_z_stride,omitempty"`
	// Number of cores per chip.
	NumCoresPerChip int32 `protobuf:"varint,7,opt,name=num_cores_per_chip,json=numCoresPerChip,proto3" json:"num_cores_per_chip,omitempty"`
}

func (x *PodViewerTopology) Reset() {
	*x = PodViewerTopology{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_protobuf_pod_viewer_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodViewerTopology) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodViewerTopology) ProtoMessage() {}

func (x *PodViewerTopology) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_protobuf_pod_viewer_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodViewerTopology.ProtoReflect.Descriptor instead.
func (*PodViewerTopology) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_protobuf_pod_viewer_proto_rawDescGZIP(), []int{6}
}

func (x *PodViewerTopology) GetXDimension() int32 {
	if x != nil {
		return x.XDimension
	}
	return 0
}

func (x *PodViewerTopology) GetYDimension() int32 {
	if x != nil {
		return x.YDimension
	}
	return 0
}

func (x *PodViewerTopology) GetZDimension() int32 {
	if x != nil {
		return x.ZDimension
	}
	return 0
}

func (x *PodViewerTopology) GetHostXStride() int32 {
	if x != nil {
		return x.HostXStride
	}
	return 0
}

func (x *PodViewerTopology) GetHostYStride() int32 {
	if x != nil {
		return x.HostYStride
	}
	return 0
}

func (x *PodViewerTopology) GetHostZStride() int32 {
	if x != nil {
		return x.HostZStride
	}
	return 0
}

func (x *PodViewerTopology) GetNumCoresPerChip() int32 {
	if x != nil {
		return x.NumCoresPerChip
	}
	return 0
}

// Next ID: 12
// A database of pod viewer records.
type PodViewerDatabase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of device used.
	DeviceType string `protobuf:"bytes,10,opt,name=device_type,json=deviceType,proto3" json:"device_type,omitempty"`
	// Pod level stats for each step.
	PodStatsSequence *PodStatsSequence `protobuf:"bytes,3,opt,name=pod_stats_sequence,json=podStatsSequence,proto3" json:"pod_stats_sequence,omitempty"`
	// Top level summary of pod viewer.
	Summary *PodViewerSummary `protobuf:"bytes,7,opt,name=summary,proto3" json:"summary,omitempty"`
	// Error and warning messages for diagnosing profiling issues.
	Diagnostics *Diagnostics `protobuf:"bytes,8,opt,name=diagnostics,proto3" json:"diagnostics,omitempty"`
	// A map from event type number to event name string for step breakdown.
	StepBreakdownEvents []*StepBreakdownEvents `protobuf:"bytes,9,rep,name=step_breakdown_events,json=stepBreakdownEvents,proto3" json:"step_breakdown_events,omitempty"`
	// Info to draw the topology graph.
	Topology *PodViewerTopology `protobuf:"bytes,11,opt,name=topology,proto3" json:"topology,omitempty"`
}

func (x *PodViewerDatabase) Reset() {
	*x = PodViewerDatabase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_protobuf_pod_viewer_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodViewerDatabase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodViewerDatabase) ProtoMessage() {}

func (x *PodViewerDatabase) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_protobuf_pod_viewer_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodViewerDatabase.ProtoReflect.Descriptor instead.
func (*PodViewerDatabase) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_protobuf_pod_viewer_proto_rawDescGZIP(), []int{7}
}

func (x *PodViewerDatabase) GetDeviceType() string {
	if x != nil {
		return x.DeviceType
	}
	return ""
}

func (x *PodViewerDatabase) GetPodStatsSequence() *PodStatsSequence {
	if x != nil {
		return x.PodStatsSequence
	}
	return nil
}

func (x *PodViewerDatabase) GetSummary() *PodViewerSummary {
	if x != nil {
		return x.Summary
	}
	return nil
}

func (x *PodViewerDatabase) GetDiagnostics() *Diagnostics {
	if x != nil {
		return x.Diagnostics
	}
	return nil
}

func (x *PodViewerDatabase) GetStepBreakdownEvents() []*StepBreakdownEvents {
	if x != nil {
		return x.StepBreakdownEvents
	}
	return nil
}

func (x *PodViewerDatabase) GetTopology() *PodViewerTopology {
	if x != nil {
		return x.Topology
	}
	return nil
}

var File_tensorflow_core_profiler_protobuf_pod_viewer_proto protoreflect.FileDescriptor

var file_tensorflow_core_profiler_protobuf_pod_viewer_proto_rawDesc = []byte{
	0x0a, 0x32, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x70, 0x6f, 0x64, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x1a, 0x33, 0x74, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x69, 0x61,
	0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x31,
	0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x70, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x2f, 0x0a, 0x0c, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49,
	0x64, 0x73, 0x22, 0xf1, 0x01, 0x0a, 0x0f, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65,
	0x4f, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x63,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x6f, 0x63, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0a, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x48, 0x0a, 0x0e, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc3, 0x04, 0x0a, 0x0b, 0x50, 0x6f, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x4d, 0x61, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x6e,
	0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x74, 0x65, 0x70, 0x4e, 0x75,
	0x6d, 0x12, 0x62, 0x0a, 0x12, 0x70, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x70,
	0x65, 0x72, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x72, 0x2e, 0x50, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4d, 0x61, 0x70, 0x2e,
	0x50, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x50, 0x65, 0x72, 0x43, 0x6f, 0x72, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x70, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x50, 0x65,
	0x72, 0x43, 0x6f, 0x72, 0x65, 0x12, 0x3f, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x64, 0x62, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x62, 0x12, 0x73, 0x0a, 0x19, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x69,
	0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x69, 0x64, 0x5f,
	0x6d, 0x61, 0x70, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x74, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e,
	0x50, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4d, 0x61, 0x70, 0x2e, 0x43, 0x6f, 0x72, 0x65,
	0x49, 0x64, 0x54, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x64, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x63, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x54, 0x6f, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x64, 0x4d, 0x61, 0x70, 0x12, 0x4d, 0x0a, 0x10, 0x61,
	0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x5f, 0x6f, 0x70, 0x5f, 0x64, 0x62, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x41, 0x6c, 0x6c, 0x52,
	0x65, 0x64, 0x75, 0x63, 0x65, 0x4f, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x61, 0x6c, 0x6c,
	0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x4f, 0x70, 0x44, 0x62, 0x1a, 0x67, 0x0a, 0x14, 0x50, 0x6f,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x50, 0x65, 0x72, 0x43, 0x6f, 0x72, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x39, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x50, 0x6f, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x47, 0x0a, 0x19, 0x43, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x54, 0x6f, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x64, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x58, 0x0a, 0x10,
	0x50, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x44, 0x0a, 0x0d, 0x70, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x6d, 0x61,
	0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x50, 0x6f,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4d, 0x61, 0x70, 0x52, 0x0b, 0x70, 0x6f, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x4d, 0x61, 0x70, 0x22, 0xe7, 0x02, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x72, 0x63, 0x5f, 0x63, 0x6f, 0x72,
	0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x72, 0x63,
	0x43, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x64, 0x73, 0x74, 0x5f, 0x63,
	0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x64,
	0x73, 0x74, 0x43, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x64, 0x61,
	0x74, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x63, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6f, 0x63,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x74, 0x69,
	0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b,
	0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x68,
	0x6c, 0x6f, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x68, 0x6c, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x65, 0x6e, 0x64,
	0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0b, 0x73, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x55, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x04,
	0x08, 0x02, 0x10, 0x03, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x0a, 0x10, 0x0b,
	0x22, 0x2e, 0x0a, 0x10, 0x50, 0x6f, 0x64, 0x56, 0x69, 0x65, 0x77, 0x65, 0x72, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73,
	0x22, 0x8f, 0x02, 0x0a, 0x11, 0x50, 0x6f, 0x64, 0x56, 0x69, 0x65, 0x77, 0x65, 0x72, 0x54, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x78, 0x5f, 0x64, 0x69, 0x6d, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x78, 0x44, 0x69,
	0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x79, 0x5f, 0x64, 0x69, 0x6d,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x79, 0x44,
	0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x7a, 0x5f, 0x64, 0x69,
	0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x7a,
	0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x68, 0x6f, 0x73,
	0x74, 0x5f, 0x78, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x68, 0x6f, 0x73, 0x74, 0x58, 0x53, 0x74, 0x72, 0x69, 0x64, 0x65, 0x12, 0x22, 0x0a,
	0x0d, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x64, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x68, 0x6f, 0x73, 0x74, 0x59, 0x53, 0x74, 0x72, 0x69, 0x64,
	0x65, 0x12, 0x22, 0x0a, 0x0d, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x7a, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x68, 0x6f, 0x73, 0x74, 0x5a, 0x53,
	0x74, 0x72, 0x69, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x12, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x6f, 0x72,
	0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x69, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x43, 0x6f, 0x72, 0x65, 0x73, 0x50, 0x65, 0x72, 0x43, 0x68,
	0x69, 0x70, 0x22, 0xce, 0x03, 0x0a, 0x11, 0x50, 0x6f, 0x64, 0x56, 0x69, 0x65, 0x77, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x53, 0x0a, 0x12, 0x70, 0x6f, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x50, 0x6f, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x10, 0x70, 0x6f,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x73, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3f,
	0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x50, 0x6f, 0x64, 0x56, 0x69, 0x65, 0x77, 0x65, 0x72, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12,
	0x42, 0x0a, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x12, 0x5c, 0x0a, 0x15, 0x73, 0x74, 0x65, 0x70, 0x5f, 0x62, 0x72, 0x65, 0x61,
	0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x42, 0x72, 0x65,
	0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x13, 0x73, 0x74,
	0x65, 0x70, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x42, 0x0a, 0x08, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x50, 0x6f, 0x64, 0x56, 0x69, 0x65,
	0x77, 0x65, 0x72, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x52, 0x08, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x02, 0x10,
	0x03, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x4a, 0x04, 0x08,
	0x06, 0x10, 0x07, 0x42, 0xda, 0x01, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x42,
	0x0e, 0x50, 0x6f, 0x64, 0x56, 0x69, 0x65, 0x77, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48,
	0x02, 0x50, 0x01, 0x5a, 0x40, 0x67, 0x69, 0x74, 0x65, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x71,
	0x63, 0x69, 0x69, 0x70, 0x2d, 0x69, 0x63, 0x70, 0x2f, 0x74, 0x66, 0x2d, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x6e, 0x67, 0x2f, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63,
	0x6f, 0x72, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0xa2, 0x02, 0x03, 0x54, 0x50, 0x58, 0xaa, 0x02, 0x13, 0x54, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x72, 0xca, 0x02, 0x13, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5c, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0xe2, 0x02, 0x1f, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x66, 0x6c, 0x6f, 0x77, 0x5c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x5c, 0x47, 0x50,
	0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x14, 0x54, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x3a, 0x3a, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tensorflow_core_profiler_protobuf_pod_viewer_proto_rawDescOnce sync.Once
	file_tensorflow_core_profiler_protobuf_pod_viewer_proto_rawDescData = file_tensorflow_core_profiler_protobuf_pod_viewer_proto_rawDesc
)

func file_tensorflow_core_profiler_protobuf_pod_viewer_proto_rawDescGZIP() []byte {
	file_tensorflow_core_profiler_protobuf_pod_viewer_proto_rawDescOnce.Do(func() {
		file_tensorflow_core_profiler_protobuf_pod_viewer_proto_rawDescData = protoimpl.X.CompressGZIP(file_tensorflow_core_profiler_protobuf_pod_viewer_proto_rawDescData)
	})
	return file_tensorflow_core_profiler_protobuf_pod_viewer_proto_rawDescData
}

var file_tensorflow_core_profiler_protobuf_pod_viewer_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_tensorflow_core_profiler_protobuf_pod_viewer_proto_goTypes = []interface{}{
	(*ReplicaGroup)(nil),        // 0: tensorflow.profiler.ReplicaGroup
	(*AllReduceOpInfo)(nil),     // 1: tensorflow.profiler.AllReduceOpInfo
	(*PodStatsMap)(nil),         // 2: tensorflow.profiler.PodStatsMap
	(*PodStatsSequence)(nil),    // 3: tensorflow.profiler.PodStatsSequence
	(*ChannelInfo)(nil),         // 4: tensorflow.profiler.ChannelInfo
	(*PodViewerSummary)(nil),    // 5: tensorflow.profiler.PodViewerSummary
	(*PodViewerTopology)(nil),   // 6: tensorflow.profiler.PodViewerTopology
	(*PodViewerDatabase)(nil),   // 7: tensorflow.profiler.PodViewerDatabase
	nil,                         // 8: tensorflow.profiler.PodStatsMap.PodStatsPerCoreEntry
	nil,                         // 9: tensorflow.profiler.PodStatsMap.CoreIdToReplicaIdMapEntry
	(*Diagnostics)(nil),         // 10: tensorflow.profiler.Diagnostics
	(*StepBreakdownEvents)(nil), // 11: tensorflow.profiler.StepBreakdownEvents
	(*PodStatsRecord)(nil),      // 12: tensorflow.profiler.PodStatsRecord
}
var file_tensorflow_core_profiler_protobuf_pod_viewer_proto_depIdxs = []int32{
	0,  // 0: tensorflow.profiler.AllReduceOpInfo.replica_groups:type_name -> tensorflow.profiler.ReplicaGroup
	8,  // 1: tensorflow.profiler.PodStatsMap.pod_stats_per_core:type_name -> tensorflow.profiler.PodStatsMap.PodStatsPerCoreEntry
	4,  // 2: tensorflow.profiler.PodStatsMap.channel_db:type_name -> tensorflow.profiler.ChannelInfo
	9,  // 3: tensorflow.profiler.PodStatsMap.core_id_to_replica_id_map:type_name -> tensorflow.profiler.PodStatsMap.CoreIdToReplicaIdMapEntry
	1,  // 4: tensorflow.profiler.PodStatsMap.all_reduce_op_db:type_name -> tensorflow.profiler.AllReduceOpInfo
	2,  // 5: tensorflow.profiler.PodStatsSequence.pod_stats_map:type_name -> tensorflow.profiler.PodStatsMap
	3,  // 6: tensorflow.profiler.PodViewerDatabase.pod_stats_sequence:type_name -> tensorflow.profiler.PodStatsSequence
	5,  // 7: tensorflow.profiler.PodViewerDatabase.summary:type_name -> tensorflow.profiler.PodViewerSummary
	10, // 8: tensorflow.profiler.PodViewerDatabase.diagnostics:type_name -> tensorflow.profiler.Diagnostics
	11, // 9: tensorflow.profiler.PodViewerDatabase.step_breakdown_events:type_name -> tensorflow.profiler.StepBreakdownEvents
	6,  // 10: tensorflow.profiler.PodViewerDatabase.topology:type_name -> tensorflow.profiler.PodViewerTopology
	12, // 11: tensorflow.profiler.PodStatsMap.PodStatsPerCoreEntry.value:type_name -> tensorflow.profiler.PodStatsRecord
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_tensorflow_core_profiler_protobuf_pod_viewer_proto_init() }
func file_tensorflow_core_profiler_protobuf_pod_viewer_proto_init() {
	if File_tensorflow_core_profiler_protobuf_pod_viewer_proto != nil {
		return
	}
	file_tensorflow_core_profiler_protobuf_diagnostics_proto_init()
	file_tensorflow_core_profiler_protobuf_pod_stats_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_tensorflow_core_profiler_protobuf_pod_viewer_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplicaGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_profiler_protobuf_pod_viewer_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllReduceOpInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_profiler_protobuf_pod_viewer_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodStatsMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_profiler_protobuf_pod_viewer_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodStatsSequence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_profiler_protobuf_pod_viewer_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_profiler_protobuf_pod_viewer_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodViewerSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_profiler_protobuf_pod_viewer_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodViewerTopology); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_profiler_protobuf_pod_viewer_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodViewerDatabase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tensorflow_core_profiler_protobuf_pod_viewer_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tensorflow_core_profiler_protobuf_pod_viewer_proto_goTypes,
		DependencyIndexes: file_tensorflow_core_profiler_protobuf_pod_viewer_proto_depIdxs,
		MessageInfos:      file_tensorflow_core_profiler_protobuf_pod_viewer_proto_msgTypes,
	}.Build()
	File_tensorflow_core_profiler_protobuf_pod_viewer_proto = out.File
	file_tensorflow_core_profiler_protobuf_pod_viewer_proto_rawDesc = nil
	file_tensorflow_core_profiler_protobuf_pod_viewer_proto_goTypes = nil
	file_tensorflow_core_profiler_protobuf_pod_viewer_proto_depIdxs = nil
}
