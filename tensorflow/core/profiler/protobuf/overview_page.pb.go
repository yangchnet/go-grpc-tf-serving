// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: tensorflow/core/profiler/protobuf/overview_page.proto

package protobuf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Overview result for a TensorFlow Op.
type OverviewTfOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the Op.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Category of the Op.
	Category string `protobuf:"bytes,2,opt,name=category,proto3" json:"category,omitempty"`
	// The amount of time that this Op takes by itself
	// as fraction of the total execution time on the device or host.
	SelfTimeFraction float64 `protobuf:"fixed64,3,opt,name=self_time_fraction,json=selfTimeFraction,proto3" json:"self_time_fraction,omitempty"`
	// The cumulative time upto this Op as fraction of the total execution time.
	CumulativeTimeFraction float64 `protobuf:"fixed64,4,opt,name=cumulative_time_fraction,json=cumulativeTimeFraction,proto3" json:"cumulative_time_fraction,omitempty"`
	// How many GFlops/sec that this Op achieves.
	FlopRate float64 `protobuf:"fixed64,5,opt,name=flop_rate,json=flopRate,proto3" json:"flop_rate,omitempty"`
	// Whether the Op is eligible to use TensorCores.
	IsOpTensorcoreEligible bool `protobuf:"varint,6,opt,name=is_op_tensorcore_eligible,json=isOpTensorcoreEligible,proto3" json:"is_op_tensorcore_eligible,omitempty"`
	// Whether at least one of the kernels launched in this op is using
	// TensorCore.
	IsOpUsingTensorcore bool `protobuf:"varint,7,opt,name=is_op_using_tensorcore,json=isOpUsingTensorcore,proto3" json:"is_op_using_tensorcore,omitempty"`
}

func (x *OverviewTfOp) Reset() {
	*x = OverviewTfOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_protobuf_overview_page_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OverviewTfOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OverviewTfOp) ProtoMessage() {}

func (x *OverviewTfOp) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_protobuf_overview_page_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OverviewTfOp.ProtoReflect.Descriptor instead.
func (*OverviewTfOp) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_protobuf_overview_page_proto_rawDescGZIP(), []int{0}
}

func (x *OverviewTfOp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OverviewTfOp) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *OverviewTfOp) GetSelfTimeFraction() float64 {
	if x != nil {
		return x.SelfTimeFraction
	}
	return 0
}

func (x *OverviewTfOp) GetCumulativeTimeFraction() float64 {
	if x != nil {
		return x.CumulativeTimeFraction
	}
	return 0
}

func (x *OverviewTfOp) GetFlopRate() float64 {
	if x != nil {
		return x.FlopRate
	}
	return 0
}

func (x *OverviewTfOp) GetIsOpTensorcoreEligible() bool {
	if x != nil {
		return x.IsOpTensorcoreEligible
	}
	return false
}

func (x *OverviewTfOp) GetIsOpUsingTensorcore() bool {
	if x != nil {
		return x.IsOpUsingTensorcore
	}
	return false
}

// Overview result for general analysis.
type OverviewPageAnalysis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MXU utilization in percentage.
	MxuUtilizationPercent float64 `protobuf:"fixed64,1,opt,name=mxu_utilization_percent,json=mxuUtilizationPercent,proto3" json:"mxu_utilization_percent,omitempty"`
	// Percentage of the device time that is idle.
	DeviceIdleTimePercent float64 `protobuf:"fixed64,2,opt,name=device_idle_time_percent,json=deviceIdleTimePercent,proto3" json:"device_idle_time_percent,omitempty"`
	// Percentage of the host time that is idle.
	HostIdleTimePercent float64 `protobuf:"fixed64,3,opt,name=host_idle_time_percent,json=hostIdleTimePercent,proto3" json:"host_idle_time_percent,omitempty"`
	// Top TF Ops executed on the device.
	TopDeviceOps []*OverviewTfOp `protobuf:"bytes,4,rep,name=top_device_ops,json=topDeviceOps,proto3" json:"top_device_ops,omitempty"`
	// Remark text in the performance summary section.
	RemarkText string `protobuf:"bytes,5,opt,name=remark_text,json=remarkText,proto3" json:"remark_text,omitempty"`
	// Color of the remark text.
	RemarkColor string `protobuf:"bytes,6,opt,name=remark_color,json=remarkColor,proto3" json:"remark_color,omitempty"`
	// FLOP rate utilization relative to the roofline in percentage.
	FlopRateUtilizationRelativeToRooflinePercent float64 `protobuf:"fixed64,7,opt,name=flop_rate_utilization_relative_to_roofline_percent,json=flopRateUtilizationRelativeToRooflinePercent,proto3" json:"flop_rate_utilization_relative_to_roofline_percent,omitempty"`
	// Memory bandwidth utilization relative to the hw limit in percentage.
	MemoryBwUtilizationRelativeToHwLimitPercent float64 `protobuf:"fixed64,8,opt,name=memory_bw_utilization_relative_to_hw_limit_percent,json=memoryBwUtilizationRelativeToHwLimitPercent,proto3" json:"memory_bw_utilization_relative_to_hw_limit_percent,omitempty"`
	// Percentage of device computation that is 16-bit.
	DeviceCompute_16BitPercent float64 `protobuf:"fixed64,9,opt,name=device_compute_16bit_percent,json=deviceCompute16bitPercent,proto3" json:"device_compute_16bit_percent,omitempty"`
	// Percentage of device computation that is 32-bit.
	DeviceCompute_32BitPercent float64 `protobuf:"fixed64,10,opt,name=device_compute_32bit_percent,json=deviceCompute32bitPercent,proto3" json:"device_compute_32bit_percent,omitempty"`
	// Percentage of TF ops executed on the host.
	HostTfOpPercent float64 `protobuf:"fixed64,11,opt,name=host_tf_op_percent,json=hostTfOpPercent,proto3" json:"host_tf_op_percent,omitempty"`
	// Percentage of TF ops executed on the device.
	DeviceTfOpPercent float64 `protobuf:"fixed64,12,opt,name=device_tf_op_percent,json=deviceTfOpPercent,proto3" json:"device_tf_op_percent,omitempty"`
	// Host trace level.
	HostTraceLevel uint32 `protobuf:"varint,13,opt,name=host_trace_level,json=hostTraceLevel,proto3" json:"host_trace_level,omitempty"`
	// Percentage of TF-op execution time on the host (excluding the idle time)
	// that are in eager mode.
	HostOpTimeEagerPercent float64 `protobuf:"fixed64,14,opt,name=host_op_time_eager_percent,json=hostOpTimeEagerPercent,proto3" json:"host_op_time_eager_percent,omitempty"`
	// Percentage of TF-op execution time on the device (excluding the idle time)
	// that are in eager mode.
	DeviceOpTimeEagerPercent float64 `protobuf:"fixed64,15,opt,name=device_op_time_eager_percent,json=deviceOpTimeEagerPercent,proto3" json:"device_op_time_eager_percent,omitempty"`
	// Percentage of TF-op execution time on the device (excluding the idle time)
	// that are for outside compilation.
	DeviceOpTimeOutsideCompilationPercent float64 `protobuf:"fixed64,16,opt,name=device_op_time_outside_compilation_percent,json=deviceOpTimeOutsideCompilationPercent,proto3" json:"device_op_time_outside_compilation_percent,omitempty"`
	// Percentage of the device time that is in use.
	DeviceDutyCyclePercent float64 `protobuf:"fixed64,17,opt,name=device_duty_cycle_percent,json=deviceDutyCyclePercent,proto3" json:"device_duty_cycle_percent,omitempty"`
}

func (x *OverviewPageAnalysis) Reset() {
	*x = OverviewPageAnalysis{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_protobuf_overview_page_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OverviewPageAnalysis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OverviewPageAnalysis) ProtoMessage() {}

func (x *OverviewPageAnalysis) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_protobuf_overview_page_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OverviewPageAnalysis.ProtoReflect.Descriptor instead.
func (*OverviewPageAnalysis) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_protobuf_overview_page_proto_rawDescGZIP(), []int{1}
}

func (x *OverviewPageAnalysis) GetMxuUtilizationPercent() float64 {
	if x != nil {
		return x.MxuUtilizationPercent
	}
	return 0
}

func (x *OverviewPageAnalysis) GetDeviceIdleTimePercent() float64 {
	if x != nil {
		return x.DeviceIdleTimePercent
	}
	return 0
}

func (x *OverviewPageAnalysis) GetHostIdleTimePercent() float64 {
	if x != nil {
		return x.HostIdleTimePercent
	}
	return 0
}

func (x *OverviewPageAnalysis) GetTopDeviceOps() []*OverviewTfOp {
	if x != nil {
		return x.TopDeviceOps
	}
	return nil
}

func (x *OverviewPageAnalysis) GetRemarkText() string {
	if x != nil {
		return x.RemarkText
	}
	return ""
}

func (x *OverviewPageAnalysis) GetRemarkColor() string {
	if x != nil {
		return x.RemarkColor
	}
	return ""
}

func (x *OverviewPageAnalysis) GetFlopRateUtilizationRelativeToRooflinePercent() float64 {
	if x != nil {
		return x.FlopRateUtilizationRelativeToRooflinePercent
	}
	return 0
}

func (x *OverviewPageAnalysis) GetMemoryBwUtilizationRelativeToHwLimitPercent() float64 {
	if x != nil {
		return x.MemoryBwUtilizationRelativeToHwLimitPercent
	}
	return 0
}

func (x *OverviewPageAnalysis) GetDeviceCompute_16BitPercent() float64 {
	if x != nil {
		return x.DeviceCompute_16BitPercent
	}
	return 0
}

func (x *OverviewPageAnalysis) GetDeviceCompute_32BitPercent() float64 {
	if x != nil {
		return x.DeviceCompute_32BitPercent
	}
	return 0
}

func (x *OverviewPageAnalysis) GetHostTfOpPercent() float64 {
	if x != nil {
		return x.HostTfOpPercent
	}
	return 0
}

func (x *OverviewPageAnalysis) GetDeviceTfOpPercent() float64 {
	if x != nil {
		return x.DeviceTfOpPercent
	}
	return 0
}

func (x *OverviewPageAnalysis) GetHostTraceLevel() uint32 {
	if x != nil {
		return x.HostTraceLevel
	}
	return 0
}

func (x *OverviewPageAnalysis) GetHostOpTimeEagerPercent() float64 {
	if x != nil {
		return x.HostOpTimeEagerPercent
	}
	return 0
}

func (x *OverviewPageAnalysis) GetDeviceOpTimeEagerPercent() float64 {
	if x != nil {
		return x.DeviceOpTimeEagerPercent
	}
	return 0
}

func (x *OverviewPageAnalysis) GetDeviceOpTimeOutsideCompilationPercent() float64 {
	if x != nil {
		return x.DeviceOpTimeOutsideCompilationPercent
	}
	return 0
}

func (x *OverviewPageAnalysis) GetDeviceDutyCyclePercent() float64 {
	if x != nil {
		return x.DeviceDutyCyclePercent
	}
	return 0
}

// Overview result for a performance tip to users.
type OverviewPageTip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Link to the tip.
	Link string `protobuf:"bytes,1,opt,name=link,proto3" json:"link,omitempty"`
}

func (x *OverviewPageTip) Reset() {
	*x = OverviewPageTip{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_protobuf_overview_page_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OverviewPageTip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OverviewPageTip) ProtoMessage() {}

func (x *OverviewPageTip) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_protobuf_overview_page_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OverviewPageTip.ProtoReflect.Descriptor instead.
func (*OverviewPageTip) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_protobuf_overview_page_proto_rawDescGZIP(), []int{2}
}

func (x *OverviewPageTip) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

type GenericRecommendation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Indicates if kernel launch is a performance bottleneck. Possible values:
	// "no", "moderate", "high".
	KernelLaunchBottleneck string `protobuf:"bytes,1,opt,name=kernel_launch_bottleneck,json=kernelLaunchBottleneck,proto3" json:"kernel_launch_bottleneck,omitempty"`
	// A statement that recommends if we need to further investigate kernel-launch
	// performance.
	KernelLaunchStatement string `protobuf:"bytes,2,opt,name=kernel_launch_statement,json=kernelLaunchStatement,proto3" json:"kernel_launch_statement,omitempty"`
	// Indicates if all other is a performance bottleneck. Possible values: "no",
	// "moderate", "high".
	AllOtherBottleneck string `protobuf:"bytes,3,opt,name=all_other_bottleneck,json=allOtherBottleneck,proto3" json:"all_other_bottleneck,omitempty"`
	// A statement that recommends if we need to further investigate all-other
	// performance.
	AllOtherStatement string `protobuf:"bytes,4,opt,name=all_other_statement,json=allOtherStatement,proto3" json:"all_other_statement,omitempty"`
	// A statement that recommends if the user should try using lower precision.
	// Shows this statement to users only if it is not empty.
	PrecisionStatement string `protobuf:"bytes,5,opt,name=precision_statement,json=precisionStatement,proto3" json:"precision_statement,omitempty"`
	// Indicates if device collectives are a performance bottleneck. Possible
	// values: "no", "moderate", "high".
	DeviceCollectivesBottleneck string `protobuf:"bytes,6,opt,name=device_collectives_bottleneck,json=deviceCollectivesBottleneck,proto3" json:"device_collectives_bottleneck,omitempty"`
	// A statement that recommends if we need to further investigate
	// device-collectives performance.
	DeviceCollectivesStatement string `protobuf:"bytes,7,opt,name=device_collectives_statement,json=deviceCollectivesStatement,proto3" json:"device_collectives_statement,omitempty"`
}

func (x *GenericRecommendation) Reset() {
	*x = GenericRecommendation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_protobuf_overview_page_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenericRecommendation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenericRecommendation) ProtoMessage() {}

func (x *GenericRecommendation) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_protobuf_overview_page_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenericRecommendation.ProtoReflect.Descriptor instead.
func (*GenericRecommendation) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_protobuf_overview_page_proto_rawDescGZIP(), []int{3}
}

func (x *GenericRecommendation) GetKernelLaunchBottleneck() string {
	if x != nil {
		return x.KernelLaunchBottleneck
	}
	return ""
}

func (x *GenericRecommendation) GetKernelLaunchStatement() string {
	if x != nil {
		return x.KernelLaunchStatement
	}
	return ""
}

func (x *GenericRecommendation) GetAllOtherBottleneck() string {
	if x != nil {
		return x.AllOtherBottleneck
	}
	return ""
}

func (x *GenericRecommendation) GetAllOtherStatement() string {
	if x != nil {
		return x.AllOtherStatement
	}
	return ""
}

func (x *GenericRecommendation) GetPrecisionStatement() string {
	if x != nil {
		return x.PrecisionStatement
	}
	return ""
}

func (x *GenericRecommendation) GetDeviceCollectivesBottleneck() string {
	if x != nil {
		return x.DeviceCollectivesBottleneck
	}
	return ""
}

func (x *GenericRecommendation) GetDeviceCollectivesStatement() string {
	if x != nil {
		return x.DeviceCollectivesStatement
	}
	return ""
}

// Overview result for the recommendation section.
type OverviewPageRecommendation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Possible performance bottleneck: "host", "device", "both".
	Bottleneck string `protobuf:"bytes,1,opt,name=bottleneck,proto3" json:"bottleneck,omitempty"`
	// A statement for input that recommends the next steps for investigating the
	// bottleneck.
	Statement string `protobuf:"bytes,2,opt,name=statement,proto3" json:"statement,omitempty"`
	// A list of tips for tackling input bottleneck.
	InputTips []*OverviewPageTip `protobuf:"bytes,11,rep,name=input_tips,json=inputTips,proto3" json:"input_tips,omitempty"`
	// A statement for output that recommends the next steps for investigating the
	// bottleneck.
	OutputStatement string `protobuf:"bytes,9,opt,name=output_statement,json=outputStatement,proto3" json:"output_statement,omitempty"`
	// A statement that recommends the next steps for investigating eager-mode
	// related bottleneck (it is an html so that it can link to other tools/docs.)
	EagerStatementHtml string `protobuf:"bytes,12,opt,name=eager_statement_html,json=eagerStatementHtml,proto3" json:"eager_statement_html,omitempty"`
	// A statement that recommends the next steps for investigating
	// outside-compilation related bottleneck (it is an html so that it can link
	// to other tools/docs.)
	OutsideCompilationStatementHtml string `protobuf:"bytes,13,opt,name=outside_compilation_statement_html,json=outsideCompilationStatementHtml,proto3" json:"outside_compilation_statement_html,omitempty"`
	// A statement that recommends the next steps for investigating tf-function
	// related bottleneck (it is an html so that it can link to other tools/docs.)
	TfFunctionStatementHtml string `protobuf:"bytes,10,opt,name=tf_function_statement_html,json=tfFunctionStatementHtml,proto3" json:"tf_function_statement_html,omitempty"`
	// A list of tips for improving host performance.
	HostTips []*OverviewPageTip `protobuf:"bytes,3,rep,name=host_tips,json=hostTips,proto3" json:"host_tips,omitempty"`
	// A list of tips for improving device performance.
	DeviceTips []*OverviewPageTip `protobuf:"bytes,4,rep,name=device_tips,json=deviceTips,proto3" json:"device_tips,omitempty"`
	// A list of links to related useful documents.
	DocumentationTips []*OverviewPageTip `protobuf:"bytes,5,rep,name=documentation_tips,json=documentationTips,proto3" json:"documentation_tips,omitempty"`
	// // The recommendation made to the user. Can be unpacked into a
	// GenericRecommendation.
	Recommendation *anypb.Any `protobuf:"bytes,6,opt,name=recommendation,proto3" json:"recommendation,omitempty"`
	// A list of tips for FAQ.
	FaqTips []*OverviewPageTip `protobuf:"bytes,7,rep,name=faq_tips,json=faqTips,proto3" json:"faq_tips,omitempty"`
	// A list of tips for inference run.
	InferenceTips []*OverviewPageTip `protobuf:"bytes,8,rep,name=inference_tips,json=inferenceTips,proto3" json:"inference_tips,omitempty"`
}

func (x *OverviewPageRecommendation) Reset() {
	*x = OverviewPageRecommendation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_protobuf_overview_page_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OverviewPageRecommendation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OverviewPageRecommendation) ProtoMessage() {}

func (x *OverviewPageRecommendation) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_protobuf_overview_page_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OverviewPageRecommendation.ProtoReflect.Descriptor instead.
func (*OverviewPageRecommendation) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_protobuf_overview_page_proto_rawDescGZIP(), []int{4}
}

func (x *OverviewPageRecommendation) GetBottleneck() string {
	if x != nil {
		return x.Bottleneck
	}
	return ""
}

func (x *OverviewPageRecommendation) GetStatement() string {
	if x != nil {
		return x.Statement
	}
	return ""
}

func (x *OverviewPageRecommendation) GetInputTips() []*OverviewPageTip {
	if x != nil {
		return x.InputTips
	}
	return nil
}

func (x *OverviewPageRecommendation) GetOutputStatement() string {
	if x != nil {
		return x.OutputStatement
	}
	return ""
}

func (x *OverviewPageRecommendation) GetEagerStatementHtml() string {
	if x != nil {
		return x.EagerStatementHtml
	}
	return ""
}

func (x *OverviewPageRecommendation) GetOutsideCompilationStatementHtml() string {
	if x != nil {
		return x.OutsideCompilationStatementHtml
	}
	return ""
}

func (x *OverviewPageRecommendation) GetTfFunctionStatementHtml() string {
	if x != nil {
		return x.TfFunctionStatementHtml
	}
	return ""
}

func (x *OverviewPageRecommendation) GetHostTips() []*OverviewPageTip {
	if x != nil {
		return x.HostTips
	}
	return nil
}

func (x *OverviewPageRecommendation) GetDeviceTips() []*OverviewPageTip {
	if x != nil {
		return x.DeviceTips
	}
	return nil
}

func (x *OverviewPageRecommendation) GetDocumentationTips() []*OverviewPageTip {
	if x != nil {
		return x.DocumentationTips
	}
	return nil
}

func (x *OverviewPageRecommendation) GetRecommendation() *anypb.Any {
	if x != nil {
		return x.Recommendation
	}
	return nil
}

func (x *OverviewPageRecommendation) GetFaqTips() []*OverviewPageTip {
	if x != nil {
		return x.FaqTips
	}
	return nil
}

func (x *OverviewPageRecommendation) GetInferenceTips() []*OverviewPageTip {
	if x != nil {
		return x.InferenceTips
	}
	return nil
}

// Result proto for host-independent job information.
type OverviewPageHostIndependentJobInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The change-list number of this build.
	ChangeList int64 `protobuf:"varint,1,opt,name=change_list,json=changeList,proto3" json:"change_list,omitempty"`
	// The time of this build (nanoseconds since the Unix epoch).
	BuildTime int64 `protobuf:"varint,2,opt,name=build_time,json=buildTime,proto3" json:"build_time,omitempty"`
	// The target of this build.
	BuildTarget string `protobuf:"bytes,3,opt,name=build_target,json=buildTarget,proto3" json:"build_target,omitempty"`
	// Profiling duration (in ms).
	ProfileDurationMs uint32 `protobuf:"varint,4,opt,name=profile_duration_ms,json=profileDurationMs,proto3" json:"profile_duration_ms,omitempty"`
}

func (x *OverviewPageHostIndependentJobInfo) Reset() {
	*x = OverviewPageHostIndependentJobInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_protobuf_overview_page_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OverviewPageHostIndependentJobInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OverviewPageHostIndependentJobInfo) ProtoMessage() {}

func (x *OverviewPageHostIndependentJobInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_protobuf_overview_page_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OverviewPageHostIndependentJobInfo.ProtoReflect.Descriptor instead.
func (*OverviewPageHostIndependentJobInfo) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_protobuf_overview_page_proto_rawDescGZIP(), []int{5}
}

func (x *OverviewPageHostIndependentJobInfo) GetChangeList() int64 {
	if x != nil {
		return x.ChangeList
	}
	return 0
}

func (x *OverviewPageHostIndependentJobInfo) GetBuildTime() int64 {
	if x != nil {
		return x.BuildTime
	}
	return 0
}

func (x *OverviewPageHostIndependentJobInfo) GetBuildTarget() string {
	if x != nil {
		return x.BuildTarget
	}
	return ""
}

func (x *OverviewPageHostIndependentJobInfo) GetProfileDurationMs() uint32 {
	if x != nil {
		return x.ProfileDurationMs
	}
	return 0
}

// Result proto for host-dependent job information.
type OverviewPageHostDependentJobInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This ID of the host where the job was run on.
	HostId string `protobuf:"bytes,1,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	// The command line used to run the job.
	CommandLine string `protobuf:"bytes,2,opt,name=command_line,json=commandLine,proto3" json:"command_line,omitempty"`
	// The start time of this run (nanoseconds since the Unix epoch).
	StartTime int64 `protobuf:"varint,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// BNS address specified by client at time of profiling request.
	BnsAddress string `protobuf:"bytes,4,opt,name=bns_address,json=bnsAddress,proto3" json:"bns_address,omitempty"`
	// Profiling start walltime (in ns).
	ProfileTimeNs uint64 `protobuf:"varint,5,opt,name=profile_time_ns,json=profileTimeNs,proto3" json:"profile_time_ns,omitempty"`
}

func (x *OverviewPageHostDependentJobInfo) Reset() {
	*x = OverviewPageHostDependentJobInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_protobuf_overview_page_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OverviewPageHostDependentJobInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OverviewPageHostDependentJobInfo) ProtoMessage() {}

func (x *OverviewPageHostDependentJobInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_protobuf_overview_page_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OverviewPageHostDependentJobInfo.ProtoReflect.Descriptor instead.
func (*OverviewPageHostDependentJobInfo) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_protobuf_overview_page_proto_rawDescGZIP(), []int{6}
}

func (x *OverviewPageHostDependentJobInfo) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *OverviewPageHostDependentJobInfo) GetCommandLine() string {
	if x != nil {
		return x.CommandLine
	}
	return ""
}

func (x *OverviewPageHostDependentJobInfo) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *OverviewPageHostDependentJobInfo) GetBnsAddress() string {
	if x != nil {
		return x.BnsAddress
	}
	return ""
}

func (x *OverviewPageHostDependentJobInfo) GetProfileTimeNs() uint64 {
	if x != nil {
		return x.ProfileTimeNs
	}
	return 0
}

// The run environment of a profiling session.
type OverviewPageRunEnvironment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of hosts used.
	HostCount int32 `protobuf:"varint,1,opt,name=host_count,json=hostCount,proto3" json:"host_count,omitempty"`
	// Number of tasks used.
	TaskCount int32 `protobuf:"varint,2,opt,name=task_count,json=taskCount,proto3" json:"task_count,omitempty"`
	// Distinct hostnames seen.
	Hostnames map[string]bool `protobuf:"bytes,3,rep,name=hostnames,proto3" json:"hostnames,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// The type of device used.
	DeviceType string `protobuf:"bytes,4,opt,name=device_type,json=deviceType,proto3" json:"device_type,omitempty"`
	// The number of device cores used.
	//
	//	In TPU case, this corresponds to the number of TPU cores
	//	In GPU case, this corresponds to the number of GPUs (not the number of
	//	SMs).
	DeviceCoreCount int32 `protobuf:"varint,5,opt,name=device_core_count,json=deviceCoreCount,proto3" json:"device_core_count,omitempty"`
	// Host-independent information about this job.
	HostIndependentJobInfo *OverviewPageHostIndependentJobInfo `protobuf:"bytes,7,opt,name=host_independent_job_info,json=hostIndependentJobInfo,proto3" json:"host_independent_job_info,omitempty"`
	// Host-dependent information about this job.
	HostDependentJobInfo []*OverviewPageHostDependentJobInfo `protobuf:"bytes,8,rep,name=host_dependent_job_info,json=hostDependentJobInfo,proto3" json:"host_dependent_job_info,omitempty"`
	// The number of replicas, corresponds to input parallelism.
	// If there is no model parallelism, replica_count = device_core_count
	ReplicaCount int32 `protobuf:"varint,9,opt,name=replica_count,json=replicaCount,proto3" json:"replica_count,omitempty"`
	// The number of cores used for a single replica, e.g. model parallelism.
	// If there is no model parallelism, then num_cores_per_replica = 1
	NumCoresPerReplica int32 `protobuf:"varint,10,opt,name=num_cores_per_replica,json=numCoresPerReplica,proto3" json:"num_cores_per_replica,omitempty"`
}

func (x *OverviewPageRunEnvironment) Reset() {
	*x = OverviewPageRunEnvironment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_protobuf_overview_page_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OverviewPageRunEnvironment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OverviewPageRunEnvironment) ProtoMessage() {}

func (x *OverviewPageRunEnvironment) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_protobuf_overview_page_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OverviewPageRunEnvironment.ProtoReflect.Descriptor instead.
func (*OverviewPageRunEnvironment) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_protobuf_overview_page_proto_rawDescGZIP(), []int{7}
}

func (x *OverviewPageRunEnvironment) GetHostCount() int32 {
	if x != nil {
		return x.HostCount
	}
	return 0
}

func (x *OverviewPageRunEnvironment) GetTaskCount() int32 {
	if x != nil {
		return x.TaskCount
	}
	return 0
}

func (x *OverviewPageRunEnvironment) GetHostnames() map[string]bool {
	if x != nil {
		return x.Hostnames
	}
	return nil
}

func (x *OverviewPageRunEnvironment) GetDeviceType() string {
	if x != nil {
		return x.DeviceType
	}
	return ""
}

func (x *OverviewPageRunEnvironment) GetDeviceCoreCount() int32 {
	if x != nil {
		return x.DeviceCoreCount
	}
	return 0
}

func (x *OverviewPageRunEnvironment) GetHostIndependentJobInfo() *OverviewPageHostIndependentJobInfo {
	if x != nil {
		return x.HostIndependentJobInfo
	}
	return nil
}

func (x *OverviewPageRunEnvironment) GetHostDependentJobInfo() []*OverviewPageHostDependentJobInfo {
	if x != nil {
		return x.HostDependentJobInfo
	}
	return nil
}

func (x *OverviewPageRunEnvironment) GetReplicaCount() int32 {
	if x != nil {
		return x.ReplicaCount
	}
	return 0
}

func (x *OverviewPageRunEnvironment) GetNumCoresPerReplica() int32 {
	if x != nil {
		return x.NumCoresPerReplica
	}
	return 0
}

type OverviewPage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The run environment of the profiled session.
	RunEnvironment *OverviewPageRunEnvironment `protobuf:"bytes,6,opt,name=run_environment,json=runEnvironment,proto3" json:"run_environment,omitempty"`
	// The step-time result.
	InputAnalysis *InputPipelineAnalysisResult `protobuf:"bytes,2,opt,name=input_analysis,json=inputAnalysis,proto3" json:"input_analysis,omitempty"`
	// The other analysis result.
	Analysis *OverviewPageAnalysis `protobuf:"bytes,3,opt,name=analysis,proto3" json:"analysis,omitempty"`
	// The recommendation made to the user.
	Recommendation *OverviewPageRecommendation `protobuf:"bytes,4,opt,name=recommendation,proto3" json:"recommendation,omitempty"`
	// Error and warning messages for diagnosing profiling issues.
	Diagnostics *Diagnostics `protobuf:"bytes,8,opt,name=diagnostics,proto3" json:"diagnostics,omitempty"`
}

func (x *OverviewPage) Reset() {
	*x = OverviewPage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_protobuf_overview_page_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OverviewPage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OverviewPage) ProtoMessage() {}

func (x *OverviewPage) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_protobuf_overview_page_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OverviewPage.ProtoReflect.Descriptor instead.
func (*OverviewPage) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_protobuf_overview_page_proto_rawDescGZIP(), []int{8}
}

func (x *OverviewPage) GetRunEnvironment() *OverviewPageRunEnvironment {
	if x != nil {
		return x.RunEnvironment
	}
	return nil
}

func (x *OverviewPage) GetInputAnalysis() *InputPipelineAnalysisResult {
	if x != nil {
		return x.InputAnalysis
	}
	return nil
}

func (x *OverviewPage) GetAnalysis() *OverviewPageAnalysis {
	if x != nil {
		return x.Analysis
	}
	return nil
}

func (x *OverviewPage) GetRecommendation() *OverviewPageRecommendation {
	if x != nil {
		return x.Recommendation
	}
	return nil
}

func (x *OverviewPage) GetDiagnostics() *Diagnostics {
	if x != nil {
		return x.Diagnostics
	}
	return nil
}

var File_tensorflow_core_profiler_protobuf_overview_page_proto protoreflect.FileDescriptor

var file_tensorflow_core_profiler_protobuf_overview_page_proto_rawDesc = []byte{
	0x0a, 0x35, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x6f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x1a, 0x19, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x33, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66,
	0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x36, 0x74, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb3, 0x02, 0x0a, 0x0c, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65,
	0x77, 0x54, 0x66, 0x4f, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x10, 0x73, 0x65, 0x6c, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x18, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a,
	0x09, 0x66, 0x6c, 0x6f, 0x70, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x66, 0x6c, 0x6f, 0x70, 0x52, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x69, 0x73,
	0x5f, 0x6f, 0x70, 0x5f, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x65,
	0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x69,
	0x73, 0x4f, 0x70, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x63, 0x6f, 0x72, 0x65, 0x45, 0x6c, 0x69,
	0x67, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x5f, 0x75,
	0x73, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x73, 0x4f, 0x70, 0x55, 0x73, 0x69, 0x6e, 0x67,
	0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x63, 0x6f, 0x72, 0x65, 0x22, 0xb8, 0x08, 0x0a, 0x14, 0x4f,
	0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x50, 0x61, 0x67, 0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x6d, 0x78, 0x75, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x6d, 0x78, 0x75, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x15, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x16, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x6c,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x13, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x6c, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x47, 0x0a, 0x0e, 0x74, 0x6f, 0x70,
	0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6f, 0x70, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77,
	0x54, 0x66, 0x4f, 0x70, 0x52, 0x0c, 0x74, 0x6f, 0x70, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4f,
	0x70, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x54,
	0x65, 0x78, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x6d, 0x61, 0x72,
	0x6b, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x68, 0x0a, 0x32, 0x66, 0x6c, 0x6f, 0x70, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x5f, 0x75, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x6f, 0x6f, 0x66,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x2c, 0x66, 0x6c, 0x6f, 0x70, 0x52, 0x61, 0x74, 0x65, 0x55, 0x74, 0x69, 0x6c,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x54,
	0x6f, 0x52, 0x6f, 0x6f, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x12, 0x67, 0x0a, 0x32, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x62, 0x77, 0x5f, 0x75, 0x74,
	0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x68, 0x77, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x2b, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x42, 0x77, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x54, 0x6f, 0x48, 0x77, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x1c, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x31, 0x36, 0x62, 0x69,
	0x74, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x19, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x31, 0x36,
	0x62, 0x69, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x1c, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x33, 0x32, 0x62,
	0x69, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x19, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x33,
	0x32, 0x62, 0x69, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x12, 0x68,
	0x6f, 0x73, 0x74, 0x5f, 0x74, 0x66, 0x5f, 0x6f, 0x70, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x68, 0x6f, 0x73, 0x74, 0x54, 0x66, 0x4f,
	0x70, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x74, 0x66, 0x5f, 0x6f, 0x70, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x66,
	0x4f, 0x70, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x68, 0x6f, 0x73,
	0x74, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x68, 0x6f, 0x73, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x3a, 0x0a, 0x1a, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6f, 0x70, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x65, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x68, 0x6f, 0x73, 0x74, 0x4f, 0x70, 0x54,
	0x69, 0x6d, 0x65, 0x45, 0x61, 0x67, 0x65, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12,
	0x3e, 0x0a, 0x1c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6f, 0x70, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x65, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x54,
	0x69, 0x6d, 0x65, 0x45, 0x61, 0x67, 0x65, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12,
	0x59, 0x0a, 0x2a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6f, 0x70, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x6f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x25, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x54, 0x69, 0x6d,
	0x65, 0x4f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x19, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x75, 0x74, 0x79, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x16, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x75, 0x74, 0x79, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x22, 0x25, 0x0a, 0x0f, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65,
	0x77, 0x50, 0x61, 0x67, 0x65, 0x54, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x22, 0xa2, 0x03, 0x0a,
	0x15, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x18, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c,
	0x5f, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x5f, 0x62, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x6e, 0x65,
	0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c,
	0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x42, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x6e, 0x65, 0x63, 0x6b,
	0x12, 0x36, 0x0a, 0x17, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x5f, 0x6c, 0x61, 0x75, 0x6e, 0x63,
	0x68, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x15, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x6c, 0x6c, 0x5f,
	0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x6e, 0x65, 0x63, 0x6b,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x6c, 0x6c, 0x4f, 0x74, 0x68, 0x65, 0x72,
	0x42, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x6e, 0x65, 0x63, 0x6b, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x6c,
	0x6c, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x4f, 0x74, 0x68, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x13, 0x70, 0x72,
	0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x1d, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x73, 0x5f, 0x62, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x6e, 0x65, 0x63, 0x6b, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x1b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x73, 0x42, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x6e, 0x65, 0x63, 0x6b, 0x12,
	0x40, 0x0a, 0x1c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x22, 0xb1, 0x06, 0x0a, 0x1a, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x50, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x6e, 0x65, 0x63, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x6f, 0x74, 0x74, 0x6c, 0x65, 0x6e, 0x65, 0x63, 0x6b,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x43,
	0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x69, 0x70, 0x73, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65,
	0x77, 0x50, 0x61, 0x67, 0x65, 0x54, 0x69, 0x70, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x54,
	0x69, 0x70, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x30,
	0x0a, 0x14, 0x65, 0x61, 0x67, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x68, 0x74, 0x6d, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x65, 0x61,
	0x67, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x74, 0x6d, 0x6c,
	0x12, 0x4b, 0x0a, 0x22, 0x6f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x69, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x68, 0x74, 0x6d, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x6f, 0x75,
	0x74, 0x73, 0x69, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x74, 0x6d, 0x6c, 0x12, 0x3b, 0x0a,
	0x1a, 0x74, 0x66, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x74, 0x6d, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x17, 0x74, 0x66, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x74, 0x6d, 0x6c, 0x12, 0x41, 0x0a, 0x09, 0x68, 0x6f,
	0x73, 0x74, 0x5f, 0x74, 0x69, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x72, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x50, 0x61, 0x67, 0x65,
	0x54, 0x69, 0x70, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x70, 0x73, 0x12, 0x45, 0x0a,
	0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x70, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65,
	0x77, 0x50, 0x61, 0x67, 0x65, 0x54, 0x69, 0x70, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x69, 0x70, 0x73, 0x12, 0x53, 0x0a, 0x12, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x70, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x50,
	0x61, 0x67, 0x65, 0x54, 0x69, 0x70, 0x52, 0x11, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x70, 0x73, 0x12, 0x3c, 0x0a, 0x0e, 0x72, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x08, 0x66, 0x61, 0x71, 0x5f, 0x74,
	0x69, 0x70, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e,
	0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x50, 0x61, 0x67, 0x65, 0x54, 0x69, 0x70, 0x52,
	0x07, 0x66, 0x61, 0x71, 0x54, 0x69, 0x70, 0x73, 0x12, 0x4b, 0x0a, 0x0e, 0x69, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x70, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x50,
	0x61, 0x67, 0x65, 0x54, 0x69, 0x70, 0x52, 0x0d, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x54, 0x69, 0x70, 0x73, 0x22, 0xb7, 0x01, 0x0a, 0x22, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69,
	0x65, 0x77, 0x50, 0x61, 0x67, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x6e, 0x74, 0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12,
	0x2e, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x22,
	0xc6, 0x01, 0x0a, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x50, 0x61, 0x67, 0x65,
	0x48, 0x6f, 0x73, 0x74, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x4a, 0x6f, 0x62,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x62, 0x6e, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x6e, 0x73, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x26, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4e, 0x73, 0x22, 0x83, 0x05, 0x0a, 0x1a, 0x4f, 0x76, 0x65,
	0x72, 0x76, 0x69, 0x65, 0x77, 0x50, 0x61, 0x67, 0x65, 0x52, 0x75, 0x6e, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x6f, 0x73, 0x74, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x68, 0x6f, 0x73,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x61, 0x73, 0x6b,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x5c, 0x0a, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x4f,
	0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x50, 0x61, 0x67, 0x65, 0x52, 0x75, 0x6e, 0x45, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63,
	0x6f, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x72, 0x0a, 0x19, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x70, 0x65, 0x6e,
	0x64, 0x65, 0x6e, 0x74, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69,
	0x65, 0x77, 0x50, 0x61, 0x67, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x6e, 0x74, 0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x16, 0x68, 0x6f,
	0x73, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x4a, 0x6f, 0x62,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x6c, 0x0a, 0x17, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x70,
	0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x4f, 0x76, 0x65, 0x72,
	0x76, 0x69, 0x65, 0x77, 0x50, 0x61, 0x67, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x44, 0x65, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x6e, 0x74, 0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x14, 0x68, 0x6f,
	0x73, 0x74, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x4a, 0x6f, 0x62, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x6e, 0x75, 0x6d, 0x5f, 0x63,
	0x6f, 0x72, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6e, 0x75, 0x6d, 0x43, 0x6f, 0x72, 0x65, 0x73,
	0x50, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x1a, 0x3c, 0x0a, 0x0e, 0x48, 0x6f,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x22, 0xb7,
	0x03, 0x0a, 0x0c, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x50, 0x61, 0x67, 0x65, 0x12,
	0x58, 0x0a, 0x0f, 0x72, 0x75, 0x6e, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x4f,
	0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x50, 0x61, 0x67, 0x65, 0x52, 0x75, 0x6e, 0x45, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0e, 0x72, 0x75, 0x6e, 0x45, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x57, 0x0a, 0x0e, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x0d, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x12, 0x45, 0x0a, 0x08, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x76,
	0x69, 0x65, 0x77, 0x50, 0x61, 0x67, 0x65, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52,
	0x08, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x12, 0x57, 0x0a, 0x0e, 0x72, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77,
	0x50, 0x61, 0x67, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x44, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x05,
	0x10, 0x06, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x42, 0xdd, 0x01, 0x0a, 0x17, 0x63, 0x6f, 0x6d,
	0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x72, 0x42, 0x11, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x50, 0x61,
	0x67, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x02, 0x50, 0x01, 0x5a, 0x40, 0x67, 0x69, 0x74,
	0x65, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x71, 0x63, 0x69, 0x69, 0x70, 0x2d, 0x69, 0x63, 0x70,
	0x2f, 0x74, 0x66, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2f, 0x74, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0xa2, 0x02, 0x03,
	0x54, 0x50, 0x58, 0xaa, 0x02, 0x13, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0xca, 0x02, 0x13, 0x54, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0xe2,
	0x02, 0x1f, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5c, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x72, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0xea, 0x02, 0x14, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x3a, 0x3a,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tensorflow_core_profiler_protobuf_overview_page_proto_rawDescOnce sync.Once
	file_tensorflow_core_profiler_protobuf_overview_page_proto_rawDescData = file_tensorflow_core_profiler_protobuf_overview_page_proto_rawDesc
)

func file_tensorflow_core_profiler_protobuf_overview_page_proto_rawDescGZIP() []byte {
	file_tensorflow_core_profiler_protobuf_overview_page_proto_rawDescOnce.Do(func() {
		file_tensorflow_core_profiler_protobuf_overview_page_proto_rawDescData = protoimpl.X.CompressGZIP(file_tensorflow_core_profiler_protobuf_overview_page_proto_rawDescData)
	})
	return file_tensorflow_core_profiler_protobuf_overview_page_proto_rawDescData
}

var file_tensorflow_core_profiler_protobuf_overview_page_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_tensorflow_core_profiler_protobuf_overview_page_proto_goTypes = []interface{}{
	(*OverviewTfOp)(nil),                       // 0: tensorflow.profiler.OverviewTfOp
	(*OverviewPageAnalysis)(nil),               // 1: tensorflow.profiler.OverviewPageAnalysis
	(*OverviewPageTip)(nil),                    // 2: tensorflow.profiler.OverviewPageTip
	(*GenericRecommendation)(nil),              // 3: tensorflow.profiler.GenericRecommendation
	(*OverviewPageRecommendation)(nil),         // 4: tensorflow.profiler.OverviewPageRecommendation
	(*OverviewPageHostIndependentJobInfo)(nil), // 5: tensorflow.profiler.OverviewPageHostIndependentJobInfo
	(*OverviewPageHostDependentJobInfo)(nil),   // 6: tensorflow.profiler.OverviewPageHostDependentJobInfo
	(*OverviewPageRunEnvironment)(nil),         // 7: tensorflow.profiler.OverviewPageRunEnvironment
	(*OverviewPage)(nil),                       // 8: tensorflow.profiler.OverviewPage
	nil,                                        // 9: tensorflow.profiler.OverviewPageRunEnvironment.HostnamesEntry
	(*anypb.Any)(nil),                          // 10: google.protobuf.Any
	(*InputPipelineAnalysisResult)(nil),        // 11: tensorflow.profiler.InputPipelineAnalysisResult
	(*Diagnostics)(nil),                        // 12: tensorflow.profiler.Diagnostics
}
var file_tensorflow_core_profiler_protobuf_overview_page_proto_depIdxs = []int32{
	0,  // 0: tensorflow.profiler.OverviewPageAnalysis.top_device_ops:type_name -> tensorflow.profiler.OverviewTfOp
	2,  // 1: tensorflow.profiler.OverviewPageRecommendation.input_tips:type_name -> tensorflow.profiler.OverviewPageTip
	2,  // 2: tensorflow.profiler.OverviewPageRecommendation.host_tips:type_name -> tensorflow.profiler.OverviewPageTip
	2,  // 3: tensorflow.profiler.OverviewPageRecommendation.device_tips:type_name -> tensorflow.profiler.OverviewPageTip
	2,  // 4: tensorflow.profiler.OverviewPageRecommendation.documentation_tips:type_name -> tensorflow.profiler.OverviewPageTip
	10, // 5: tensorflow.profiler.OverviewPageRecommendation.recommendation:type_name -> google.protobuf.Any
	2,  // 6: tensorflow.profiler.OverviewPageRecommendation.faq_tips:type_name -> tensorflow.profiler.OverviewPageTip
	2,  // 7: tensorflow.profiler.OverviewPageRecommendation.inference_tips:type_name -> tensorflow.profiler.OverviewPageTip
	9,  // 8: tensorflow.profiler.OverviewPageRunEnvironment.hostnames:type_name -> tensorflow.profiler.OverviewPageRunEnvironment.HostnamesEntry
	5,  // 9: tensorflow.profiler.OverviewPageRunEnvironment.host_independent_job_info:type_name -> tensorflow.profiler.OverviewPageHostIndependentJobInfo
	6,  // 10: tensorflow.profiler.OverviewPageRunEnvironment.host_dependent_job_info:type_name -> tensorflow.profiler.OverviewPageHostDependentJobInfo
	7,  // 11: tensorflow.profiler.OverviewPage.run_environment:type_name -> tensorflow.profiler.OverviewPageRunEnvironment
	11, // 12: tensorflow.profiler.OverviewPage.input_analysis:type_name -> tensorflow.profiler.InputPipelineAnalysisResult
	1,  // 13: tensorflow.profiler.OverviewPage.analysis:type_name -> tensorflow.profiler.OverviewPageAnalysis
	4,  // 14: tensorflow.profiler.OverviewPage.recommendation:type_name -> tensorflow.profiler.OverviewPageRecommendation
	12, // 15: tensorflow.profiler.OverviewPage.diagnostics:type_name -> tensorflow.profiler.Diagnostics
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_tensorflow_core_profiler_protobuf_overview_page_proto_init() }
func file_tensorflow_core_profiler_protobuf_overview_page_proto_init() {
	if File_tensorflow_core_profiler_protobuf_overview_page_proto != nil {
		return
	}
	file_tensorflow_core_profiler_protobuf_diagnostics_proto_init()
	file_tensorflow_core_profiler_protobuf_input_pipeline_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_tensorflow_core_profiler_protobuf_overview_page_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OverviewTfOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_profiler_protobuf_overview_page_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OverviewPageAnalysis); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_profiler_protobuf_overview_page_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OverviewPageTip); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_profiler_protobuf_overview_page_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenericRecommendation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_profiler_protobuf_overview_page_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OverviewPageRecommendation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_profiler_protobuf_overview_page_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OverviewPageHostIndependentJobInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_profiler_protobuf_overview_page_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OverviewPageHostDependentJobInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_profiler_protobuf_overview_page_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OverviewPageRunEnvironment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_profiler_protobuf_overview_page_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OverviewPage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tensorflow_core_profiler_protobuf_overview_page_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tensorflow_core_profiler_protobuf_overview_page_proto_goTypes,
		DependencyIndexes: file_tensorflow_core_profiler_protobuf_overview_page_proto_depIdxs,
		MessageInfos:      file_tensorflow_core_profiler_protobuf_overview_page_proto_msgTypes,
	}.Build()
	File_tensorflow_core_profiler_protobuf_overview_page_proto = out.File
	file_tensorflow_core_profiler_protobuf_overview_page_proto_rawDesc = nil
	file_tensorflow_core_profiler_protobuf_overview_page_proto_goTypes = nil
	file_tensorflow_core_profiler_protobuf_overview_page_proto_depIdxs = nil
}
