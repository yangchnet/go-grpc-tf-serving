// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: tensorflow/core/profiler/protobuf/op_stats.proto

package protobuf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Performance environment, e.g the peak performance capabilities of the device.
type PerfEnv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Peak performance of a TPU core or a GPU in TFLOP/s.
	PeakTeraFlopsPerSecond float64 `protobuf:"fixed64,1,opt,name=peak_tera_flops_per_second,json=peakTeraFlopsPerSecond,proto3" json:"peak_tera_flops_per_second,omitempty"`
	// Peak memory bandwidth of a TPU core or a GPU in GiBs/s.
	PeakBwGigaBytesPerSecond float64 `protobuf:"fixed64,4,opt,name=peak_bw_giga_bytes_per_second,json=peakBwGigaBytesPerSecond,proto3" json:"peak_bw_giga_bytes_per_second,omitempty"`
	// Peak off-chip memory bandwidth of a TPU core or a GPU in GiBs/s.
	PeakHbmBwGigaBytesPerSecond float64 `protobuf:"fixed64,2,opt,name=peak_hbm_bw_giga_bytes_per_second,json=peakHbmBwGigaBytesPerSecond,proto3" json:"peak_hbm_bw_giga_bytes_per_second,omitempty"`
	// The ridge point of roofline model in FLOP/Byte. (i.e., minimum operational
	// intensity required to achieve maximum performance).
	RidgePoint float64 `protobuf:"fixed64,3,opt,name=ridge_point,json=ridgePoint,proto3" json:"ridge_point,omitempty"`
}

func (x *PerfEnv) Reset() {
	*x = PerfEnv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_protobuf_op_stats_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerfEnv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerfEnv) ProtoMessage() {}

func (x *PerfEnv) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_protobuf_op_stats_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerfEnv.ProtoReflect.Descriptor instead.
func (*PerfEnv) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_protobuf_op_stats_proto_rawDescGZIP(), []int{0}
}

func (x *PerfEnv) GetPeakTeraFlopsPerSecond() float64 {
	if x != nil {
		return x.PeakTeraFlopsPerSecond
	}
	return 0
}

func (x *PerfEnv) GetPeakBwGigaBytesPerSecond() float64 {
	if x != nil {
		return x.PeakBwGigaBytesPerSecond
	}
	return 0
}

func (x *PerfEnv) GetPeakHbmBwGigaBytesPerSecond() float64 {
	if x != nil {
		return x.PeakHbmBwGigaBytesPerSecond
	}
	return 0
}

func (x *PerfEnv) GetRidgePoint() float64 {
	if x != nil {
		return x.RidgePoint
	}
	return 0
}

// Result proto for host-independent job information.
type HostIndependentJobInfoResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The change-list number of this build.
	ChangeList int64 `protobuf:"varint,1,opt,name=change_list,json=changeList,proto3" json:"change_list,omitempty"`
	// The time of this build (nanoseconds since the Unix epoch).
	BuildTime int64 `protobuf:"varint,2,opt,name=build_time,json=buildTime,proto3" json:"build_time,omitempty"`
	// The target of this build.
	BuildTarget string `protobuf:"bytes,3,opt,name=build_target,json=buildTarget,proto3" json:"build_target,omitempty"`
	// Profiling duration (in ms).
	ProfileDurationMs uint32 `protobuf:"varint,4,opt,name=profile_duration_ms,json=profileDurationMs,proto3" json:"profile_duration_ms,omitempty"`
}

func (x *HostIndependentJobInfoResult) Reset() {
	*x = HostIndependentJobInfoResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_protobuf_op_stats_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostIndependentJobInfoResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostIndependentJobInfoResult) ProtoMessage() {}

func (x *HostIndependentJobInfoResult) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_protobuf_op_stats_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostIndependentJobInfoResult.ProtoReflect.Descriptor instead.
func (*HostIndependentJobInfoResult) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_protobuf_op_stats_proto_rawDescGZIP(), []int{1}
}

func (x *HostIndependentJobInfoResult) GetChangeList() int64 {
	if x != nil {
		return x.ChangeList
	}
	return 0
}

func (x *HostIndependentJobInfoResult) GetBuildTime() int64 {
	if x != nil {
		return x.BuildTime
	}
	return 0
}

func (x *HostIndependentJobInfoResult) GetBuildTarget() string {
	if x != nil {
		return x.BuildTarget
	}
	return ""
}

func (x *HostIndependentJobInfoResult) GetProfileDurationMs() uint32 {
	if x != nil {
		return x.ProfileDurationMs
	}
	return 0
}

// Result proto for host-dependent job information.
type HostDependentJobInfoResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This ID of the host where the job was run on.
	HostId string `protobuf:"bytes,1,opt,name=host_id,json=hostId,proto3" json:"host_id,omitempty"`
	// The command line used to run the job.
	CommandLine string `protobuf:"bytes,2,opt,name=command_line,json=commandLine,proto3" json:"command_line,omitempty"`
	// The start time of this run (nanoseconds since the Unix epoch).
	StartTime int64 `protobuf:"varint,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// BNS address specified by client at time of profiling request.
	BnsAddress string `protobuf:"bytes,4,opt,name=bns_address,json=bnsAddress,proto3" json:"bns_address,omitempty"`
	// Profiling start walltime (in ns).
	ProfileTimeNs uint64 `protobuf:"varint,5,opt,name=profile_time_ns,json=profileTimeNs,proto3" json:"profile_time_ns,omitempty"`
}

func (x *HostDependentJobInfoResult) Reset() {
	*x = HostDependentJobInfoResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_protobuf_op_stats_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostDependentJobInfoResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostDependentJobInfoResult) ProtoMessage() {}

func (x *HostDependentJobInfoResult) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_protobuf_op_stats_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostDependentJobInfoResult.ProtoReflect.Descriptor instead.
func (*HostDependentJobInfoResult) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_protobuf_op_stats_proto_rawDescGZIP(), []int{2}
}

func (x *HostDependentJobInfoResult) GetHostId() string {
	if x != nil {
		return x.HostId
	}
	return ""
}

func (x *HostDependentJobInfoResult) GetCommandLine() string {
	if x != nil {
		return x.CommandLine
	}
	return ""
}

func (x *HostDependentJobInfoResult) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *HostDependentJobInfoResult) GetBnsAddress() string {
	if x != nil {
		return x.BnsAddress
	}
	return ""
}

func (x *HostDependentJobInfoResult) GetProfileTimeNs() uint64 {
	if x != nil {
		return x.ProfileTimeNs
	}
	return 0
}

// System topology, which describes the number of chips in a pod
// and the connectivity style.
type SystemTopology struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The X, Y, and Z dimensions of this topology. 0 means that dimension does
	// not exist.
	XDimension int64 `protobuf:"varint,1,opt,name=x_dimension,json=xDimension,proto3" json:"x_dimension,omitempty"`
	YDimension int64 `protobuf:"varint,2,opt,name=y_dimension,json=yDimension,proto3" json:"y_dimension,omitempty"`
	ZDimension int64 `protobuf:"varint,3,opt,name=z_dimension,json=zDimension,proto3" json:"z_dimension,omitempty"`
	// The number of expected bad chips in this system.
	NumExpectedReducedChips int64 `protobuf:"varint,4,opt,name=num_expected_reduced_chips,json=numExpectedReducedChips,proto3" json:"num_expected_reduced_chips,omitempty"`
}

func (x *SystemTopology) Reset() {
	*x = SystemTopology{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_protobuf_op_stats_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemTopology) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemTopology) ProtoMessage() {}

func (x *SystemTopology) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_protobuf_op_stats_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemTopology.ProtoReflect.Descriptor instead.
func (*SystemTopology) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_protobuf_op_stats_proto_rawDescGZIP(), []int{3}
}

func (x *SystemTopology) GetXDimension() int64 {
	if x != nil {
		return x.XDimension
	}
	return 0
}

func (x *SystemTopology) GetYDimension() int64 {
	if x != nil {
		return x.YDimension
	}
	return 0
}

func (x *SystemTopology) GetZDimension() int64 {
	if x != nil {
		return x.ZDimension
	}
	return 0
}

func (x *SystemTopology) GetNumExpectedReducedChips() int64 {
	if x != nil {
		return x.NumExpectedReducedChips
	}
	return 0
}

// The run environment of a profiling session.
type RunEnvironment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of hosts used.
	HostCount int32 `protobuf:"varint,1,opt,name=host_count,json=hostCount,proto3" json:"host_count,omitempty"`
	// Number of tasks used.
	TaskCount int32 `protobuf:"varint,2,opt,name=task_count,json=taskCount,proto3" json:"task_count,omitempty"`
	// Distinct hostnames seen.
	Hostnames map[string]bool `protobuf:"bytes,3,rep,name=hostnames,proto3" json:"hostnames,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// The type of device used.
	DeviceType string `protobuf:"bytes,4,opt,name=device_type,json=deviceType,proto3" json:"device_type,omitempty"`
	// The number of device cores used.
	//
	//	In TPU case, this corresponds to the number of TPU cores
	//	In GPU case, this corresponds to the number of GPUs (not the number of
	//	SMs).
	DeviceCoreCount int32 `protobuf:"varint,5,opt,name=device_core_count,json=deviceCoreCount,proto3" json:"device_core_count,omitempty"`
	// Host-independent information about this job.
	HostIndependentJobInfo *HostIndependentJobInfoResult `protobuf:"bytes,7,opt,name=host_independent_job_info,json=hostIndependentJobInfo,proto3" json:"host_independent_job_info,omitempty"`
	// Host-dependent information about this job.
	HostDependentJobInfo []*HostDependentJobInfoResult `protobuf:"bytes,8,rep,name=host_dependent_job_info,json=hostDependentJobInfo,proto3" json:"host_dependent_job_info,omitempty"`
	// The number of replicas, corresponds to input parallelism.
	// If there is no model parallelism, replica_count = device_core_count
	ReplicaCount int32 `protobuf:"varint,9,opt,name=replica_count,json=replicaCount,proto3" json:"replica_count,omitempty"`
	// The number of cores used for a single replica, e.g. model parallelism.
	// If there is no model parallelism, then num_cores_per_replica = 1
	NumCoresPerReplica int32 `protobuf:"varint,10,opt,name=num_cores_per_replica,json=numCoresPerReplica,proto3" json:"num_cores_per_replica,omitempty"`
	// The chip interconnection topology.
	//
	// Deprecated: Do not use.
	Topology *SystemTopology `protobuf:"bytes,11,opt,name=topology,proto3" json:"topology,omitempty"`
	// The chip and host interconnection topology.
	SystemTopology *Topology `protobuf:"bytes,13,opt,name=system_topology,json=systemTopology,proto3" json:"system_topology,omitempty"`
	// Host trace level.
	HostTraceLevel uint32 `protobuf:"varint,12,opt,name=host_trace_level,json=hostTraceLevel,proto3" json:"host_trace_level,omitempty"`
}

func (x *RunEnvironment) Reset() {
	*x = RunEnvironment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_protobuf_op_stats_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunEnvironment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunEnvironment) ProtoMessage() {}

func (x *RunEnvironment) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_protobuf_op_stats_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunEnvironment.ProtoReflect.Descriptor instead.
func (*RunEnvironment) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_protobuf_op_stats_proto_rawDescGZIP(), []int{4}
}

func (x *RunEnvironment) GetHostCount() int32 {
	if x != nil {
		return x.HostCount
	}
	return 0
}

func (x *RunEnvironment) GetTaskCount() int32 {
	if x != nil {
		return x.TaskCount
	}
	return 0
}

func (x *RunEnvironment) GetHostnames() map[string]bool {
	if x != nil {
		return x.Hostnames
	}
	return nil
}

func (x *RunEnvironment) GetDeviceType() string {
	if x != nil {
		return x.DeviceType
	}
	return ""
}

func (x *RunEnvironment) GetDeviceCoreCount() int32 {
	if x != nil {
		return x.DeviceCoreCount
	}
	return 0
}

func (x *RunEnvironment) GetHostIndependentJobInfo() *HostIndependentJobInfoResult {
	if x != nil {
		return x.HostIndependentJobInfo
	}
	return nil
}

func (x *RunEnvironment) GetHostDependentJobInfo() []*HostDependentJobInfoResult {
	if x != nil {
		return x.HostDependentJobInfo
	}
	return nil
}

func (x *RunEnvironment) GetReplicaCount() int32 {
	if x != nil {
		return x.ReplicaCount
	}
	return 0
}

func (x *RunEnvironment) GetNumCoresPerReplica() int32 {
	if x != nil {
		return x.NumCoresPerReplica
	}
	return 0
}

// Deprecated: Do not use.
func (x *RunEnvironment) GetTopology() *SystemTopology {
	if x != nil {
		return x.Topology
	}
	return nil
}

func (x *RunEnvironment) GetSystemTopology() *Topology {
	if x != nil {
		return x.SystemTopology
	}
	return nil
}

func (x *RunEnvironment) GetHostTraceLevel() uint32 {
	if x != nil {
		return x.HostTraceLevel
	}
	return 0
}

// Next ID: 7
type CoreDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hostname      string `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	DeviceOrdinal uint32 `protobuf:"varint,2,opt,name=device_ordinal,json=deviceOrdinal,proto3" json:"device_ordinal,omitempty"` // unique within host, TPU core only
	CoreNum       uint32 `protobuf:"varint,3,opt,name=core_num,json=coreNum,proto3" json:"core_num,omitempty"`                   // unique within chip per core type
	LocalChipId   uint32 `protobuf:"varint,4,opt,name=local_chip_id,json=localChipId,proto3" json:"local_chip_id,omitempty"`     // unique within host
	GlobalChipId  uint32 `protobuf:"varint,5,opt,name=global_chip_id,json=globalChipId,proto3" json:"global_chip_id,omitempty"`  // unique within mesh
	GlobalCoreId  uint32 `protobuf:"varint,6,opt,name=global_core_id,json=globalCoreId,proto3" json:"global_core_id,omitempty"`  // unique within mesh, TPU core only
}

func (x *CoreDetails) Reset() {
	*x = CoreDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_protobuf_op_stats_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoreDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoreDetails) ProtoMessage() {}

func (x *CoreDetails) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_protobuf_op_stats_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoreDetails.ProtoReflect.Descriptor instead.
func (*CoreDetails) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_protobuf_op_stats_proto_rawDescGZIP(), []int{5}
}

func (x *CoreDetails) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *CoreDetails) GetDeviceOrdinal() uint32 {
	if x != nil {
		return x.DeviceOrdinal
	}
	return 0
}

func (x *CoreDetails) GetCoreNum() uint32 {
	if x != nil {
		return x.CoreNum
	}
	return 0
}

func (x *CoreDetails) GetLocalChipId() uint32 {
	if x != nil {
		return x.LocalChipId
	}
	return 0
}

func (x *CoreDetails) GetGlobalChipId() uint32 {
	if x != nil {
		return x.GlobalChipId
	}
	return 0
}

func (x *CoreDetails) GetGlobalCoreId() uint32 {
	if x != nil {
		return x.GlobalCoreId
	}
	return 0
}

// Metrics based on hardware performance counters.
type PerformanceCounterResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Overall matrix unit utilization in percentage.
	MatrixUnitUtilizationPercent float64 `protobuf:"fixed64,1,opt,name=matrix_unit_utilization_percent,json=matrixUnitUtilizationPercent,proto3" json:"matrix_unit_utilization_percent,omitempty"`
}

func (x *PerformanceCounterResult) Reset() {
	*x = PerformanceCounterResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_protobuf_op_stats_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerformanceCounterResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerformanceCounterResult) ProtoMessage() {}

func (x *PerformanceCounterResult) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_protobuf_op_stats_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerformanceCounterResult.ProtoReflect.Descriptor instead.
func (*PerformanceCounterResult) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_protobuf_op_stats_proto_rawDescGZIP(), []int{6}
}

func (x *PerformanceCounterResult) GetMatrixUnitUtilizationPercent() float64 {
	if x != nil {
		return x.MatrixUnitUtilizationPercent
	}
	return 0
}

// Next ID: 14
// Operator Statistics.
type OpStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The database for the op metrics collected from the host over the entire
	// profiling session including incomplete steps.
	HostOpMetricsDb *OpMetricsDb `protobuf:"bytes,1,opt,name=host_op_metrics_db,json=hostOpMetricsDb,proto3" json:"host_op_metrics_db,omitempty"`
	// The database for the op metrics collected from the device over the entire
	// profiling session including incomplete steps.
	DeviceOpMetricsDb *OpMetricsDb `protobuf:"bytes,2,opt,name=device_op_metrics_db,json=deviceOpMetricsDb,proto3" json:"device_op_metrics_db,omitempty"`
	// The result for the HLO-metric database over the complete steps only.
	HloMetricsDbCompleteStepsOnly *OpMetricsDb `protobuf:"bytes,10,opt,name=hlo_metrics_db_complete_steps_only,json=hloMetricsDbCompleteStepsOnly,proto3" json:"hlo_metrics_db_complete_steps_only,omitempty"`
	// Performance environment of the op metrics collected.
	PerfEnv *PerfEnv `protobuf:"bytes,3,opt,name=perf_env,json=perfEnv,proto3" json:"perf_env,omitempty"`
	// The database of step sequences.
	StepDb *StepDatabaseResult `protobuf:"bytes,4,opt,name=step_db,json=stepDb,proto3" json:"step_db,omitempty"`
	// The run environment of this profiling session.
	RunEnvironment *RunEnvironment `protobuf:"bytes,5,opt,name=run_environment,json=runEnvironment,proto3" json:"run_environment,omitempty"`
	// Kernel stats results from all GPUs.
	KernelStatsDb *KernelStatsDb `protobuf:"bytes,6,opt,name=kernel_stats_db,json=kernelStatsDb,proto3" json:"kernel_stats_db,omitempty"`
	// Statistics for all tf-functions.
	TfFunctionDb *TfFunctionDb `protobuf:"bytes,8,opt,name=tf_function_db,json=tfFunctionDb,proto3" json:"tf_function_db,omitempty"`
	// A map from core ID to details.
	CoreIdToDetails map[uint32]*CoreDetails `protobuf:"bytes,11,rep,name=core_id_to_details,json=coreIdToDetails,proto3" json:"core_id_to_details,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Error and warning messages for diagnosing profiling issues.
	Diagnostics *Diagnostics `protobuf:"bytes,9,opt,name=diagnostics,proto3" json:"diagnostics,omitempty"`
	// A map from program ID to program name.
	ProgramIdToNameMap map[uint64]string `protobuf:"bytes,12,rep,name=program_id_to_name_map,json=programIdToNameMap,proto3" json:"program_id_to_name_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Performance counters.
	PerformanceCounterResult *PerformanceCounterResult `protobuf:"bytes,13,opt,name=performance_counter_result,json=performanceCounterResult,proto3" json:"performance_counter_result,omitempty"`
}

func (x *OpStats) Reset() {
	*x = OpStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_profiler_protobuf_op_stats_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpStats) ProtoMessage() {}

func (x *OpStats) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_profiler_protobuf_op_stats_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpStats.ProtoReflect.Descriptor instead.
func (*OpStats) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_profiler_protobuf_op_stats_proto_rawDescGZIP(), []int{7}
}

func (x *OpStats) GetHostOpMetricsDb() *OpMetricsDb {
	if x != nil {
		return x.HostOpMetricsDb
	}
	return nil
}

func (x *OpStats) GetDeviceOpMetricsDb() *OpMetricsDb {
	if x != nil {
		return x.DeviceOpMetricsDb
	}
	return nil
}

func (x *OpStats) GetHloMetricsDbCompleteStepsOnly() *OpMetricsDb {
	if x != nil {
		return x.HloMetricsDbCompleteStepsOnly
	}
	return nil
}

func (x *OpStats) GetPerfEnv() *PerfEnv {
	if x != nil {
		return x.PerfEnv
	}
	return nil
}

func (x *OpStats) GetStepDb() *StepDatabaseResult {
	if x != nil {
		return x.StepDb
	}
	return nil
}

func (x *OpStats) GetRunEnvironment() *RunEnvironment {
	if x != nil {
		return x.RunEnvironment
	}
	return nil
}

func (x *OpStats) GetKernelStatsDb() *KernelStatsDb {
	if x != nil {
		return x.KernelStatsDb
	}
	return nil
}

func (x *OpStats) GetTfFunctionDb() *TfFunctionDb {
	if x != nil {
		return x.TfFunctionDb
	}
	return nil
}

func (x *OpStats) GetCoreIdToDetails() map[uint32]*CoreDetails {
	if x != nil {
		return x.CoreIdToDetails
	}
	return nil
}

func (x *OpStats) GetDiagnostics() *Diagnostics {
	if x != nil {
		return x.Diagnostics
	}
	return nil
}

func (x *OpStats) GetProgramIdToNameMap() map[uint64]string {
	if x != nil {
		return x.ProgramIdToNameMap
	}
	return nil
}

func (x *OpStats) GetPerformanceCounterResult() *PerformanceCounterResult {
	if x != nil {
		return x.PerformanceCounterResult
	}
	return nil
}

var File_tensorflow_core_profiler_protobuf_op_stats_proto protoreflect.FileDescriptor

var file_tensorflow_core_profiler_protobuf_op_stats_proto_rawDesc = []byte{
	0x0a, 0x30, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x6f, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x13, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x1a, 0x33, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66,
	0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x69, 0x61, 0x67, 0x6e,
	0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x34, 0x74, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x32, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63,
	0x6f, 0x72, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x6f, 0x70, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c,
	0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x65, 0x70, 0x73, 0x5f,
	0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x33, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x66, 0x5f, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x74,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xef, 0x01, 0x0a, 0x07, 0x50, 0x65, 0x72, 0x66, 0x45, 0x6e, 0x76, 0x12, 0x3a, 0x0a, 0x1a, 0x70,
	0x65, 0x61, 0x6b, 0x5f, 0x74, 0x65, 0x72, 0x61, 0x5f, 0x66, 0x6c, 0x6f, 0x70, 0x73, 0x5f, 0x70,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x16, 0x70, 0x65, 0x61, 0x6b, 0x54, 0x65, 0x72, 0x61, 0x46, 0x6c, 0x6f, 0x70, 0x73, 0x50, 0x65,
	0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x3f, 0x0a, 0x1d, 0x70, 0x65, 0x61, 0x6b, 0x5f,
	0x62, 0x77, 0x5f, 0x67, 0x69, 0x67, 0x61, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x70, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18,
	0x70, 0x65, 0x61, 0x6b, 0x42, 0x77, 0x47, 0x69, 0x67, 0x61, 0x42, 0x79, 0x74, 0x65, 0x73, 0x50,
	0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x46, 0x0a, 0x21, 0x70, 0x65, 0x61, 0x6b,
	0x5f, 0x68, 0x62, 0x6d, 0x5f, 0x62, 0x77, 0x5f, 0x67, 0x69, 0x67, 0x61, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x1b, 0x70, 0x65, 0x61, 0x6b, 0x48, 0x62, 0x6d, 0x42, 0x77, 0x47, 0x69,
	0x67, 0x61, 0x42, 0x79, 0x74, 0x65, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x22, 0xb1, 0x01, 0x0a, 0x1c, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x6e, 0x74, 0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x22, 0xc0, 0x01, 0x0a, 0x1a, 0x48, 0x6f, 0x73, 0x74, 0x44, 0x65,
	0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x62, 0x6e, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x6e, 0x73, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x26, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4e, 0x73, 0x22, 0xb0, 0x01, 0x0a, 0x0e, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x78,
	0x5f, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x78, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b,
	0x79, 0x5f, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x79, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a,
	0x0b, 0x7a, 0x5f, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x7a, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3b,
	0x0a, 0x1a, 0x6e, 0x75, 0x6d, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x72,
	0x65, 0x64, 0x75, 0x63, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x69, 0x70, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x17, 0x6e, 0x75, 0x6d, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52,
	0x65, 0x64, 0x75, 0x63, 0x65, 0x64, 0x43, 0x68, 0x69, 0x70, 0x73, 0x22, 0x96, 0x06, 0x0a, 0x0e,
	0x52, 0x75, 0x6e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x50, 0x0a, 0x09,
	0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x2a, 0x0a, 0x11, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x6c, 0x0a, 0x19, 0x68,
	0x6f, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x5f,
	0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x72, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x70, 0x65, 0x6e,
	0x64, 0x65, 0x6e, 0x74, 0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x16, 0x68, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65,
	0x6e, 0x74, 0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x66, 0x0a, 0x17, 0x68, 0x6f, 0x73,
	0x74, 0x5f, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x6a, 0x6f, 0x62, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x74, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72,
	0x2e, 0x48, 0x6f, 0x73, 0x74, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x4a, 0x6f,
	0x62, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x14, 0x68, 0x6f, 0x73,
	0x74, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x6f,
	0x72, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6e, 0x75, 0x6d, 0x43, 0x6f, 0x72, 0x65, 0x73, 0x50,
	0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x12, 0x43, 0x0a, 0x08, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x72, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x08, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x12, 0x46,
	0x0a, 0x0f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x54, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x52, 0x0e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x68, 0x6f, 0x73, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x1a, 0x3c, 0x0a, 0x0e, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x4a, 0x04,
	0x08, 0x06, 0x10, 0x07, 0x22, 0xdb, 0x01, 0x0a, 0x0b, 0x43, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6f, 0x72, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x6f, 0x72, 0x65, 0x4e,
	0x75, 0x6d, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x63, 0x68, 0x69, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x43, 0x68, 0x69, 0x70, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x5f, 0x63, 0x68, 0x69, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x68, 0x69, 0x70, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e,
	0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x6f, 0x72, 0x65,
	0x49, 0x64, 0x22, 0x61, 0x0a, 0x18, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x45,
	0x0a, 0x1f, 0x6d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x75, 0x74,
	0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x1c, 0x6d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x55,
	0x6e, 0x69, 0x74, 0x55, 0x74, 0x69, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x22, 0xa4, 0x09, 0x0a, 0x07, 0x4f, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x4d, 0x0a, 0x12, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6f, 0x70, 0x5f, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x5f, 0x64, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x44, 0x62, 0x52,
	0x0f, 0x68, 0x6f, 0x73, 0x74, 0x4f, 0x70, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x44, 0x62,
	0x12, 0x51, 0x0a, 0x14, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6f, 0x70, 0x5f, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x64, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x44, 0x62,
	0x52, 0x11, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x70, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x44, 0x62, 0x12, 0x6b, 0x0a, 0x22, 0x68, 0x6c, 0x6f, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x5f, 0x64, 0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x73,
	0x74, 0x65, 0x70, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x44,
	0x62, 0x52, 0x1d, 0x68, 0x6c, 0x6f, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x44, 0x62, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x65, 0x70, 0x73, 0x4f, 0x6e, 0x6c, 0x79,
	0x12, 0x37, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x66, 0x5f, 0x65, 0x6e, 0x76, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x45, 0x6e, 0x76,
	0x52, 0x07, 0x70, 0x65, 0x72, 0x66, 0x45, 0x6e, 0x76, 0x12, 0x40, 0x0a, 0x07, 0x73, 0x74, 0x65,
	0x70, 0x5f, 0x64, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x74, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72,
	0x2e, 0x53, 0x74, 0x65, 0x70, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x06, 0x73, 0x74, 0x65, 0x70, 0x44, 0x62, 0x12, 0x4c, 0x0a, 0x0f, 0x72,
	0x75, 0x6e, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6e, 0x45, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0e, 0x72, 0x75, 0x6e, 0x45, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x0f, 0x6b, 0x65, 0x72,
	0x6e, 0x65, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x64, 0x62, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x44, 0x62, 0x52, 0x0d, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x44, 0x62, 0x12, 0x47, 0x0a, 0x0e, 0x74, 0x66, 0x5f, 0x66, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x62, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x72, 0x2e, 0x54, 0x66, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x62,
	0x52, 0x0c, 0x74, 0x66, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x62, 0x12, 0x5e,
	0x0a, 0x12, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72,
	0x2e, 0x4f, 0x70, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x54,
	0x6f, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x63,
	0x6f, 0x72, 0x65, 0x49, 0x64, 0x54, 0x6f, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x42,
	0x0a, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0b, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x12, 0x68, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x69, 0x64,
	0x5f, 0x74, 0x6f, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x4f, 0x70, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x54, 0x6f, 0x4e, 0x61, 0x6d, 0x65,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x49, 0x64, 0x54, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x6b, 0x0a, 0x1a,
	0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e,
	0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x18, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x1a, 0x64, 0x0a, 0x14, 0x43, 0x6f, 0x72,
	0x65, 0x49, 0x64, 0x54, 0x6f, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x45, 0x0a, 0x17, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x49, 0x64, 0x54, 0x6f, 0x4e, 0x61,
	0x6d, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x42, 0xd8, 0x01, 0x0a,
	0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x42, 0x0c, 0x4f, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x02, 0x50, 0x01, 0x5a, 0x40, 0x67, 0x69, 0x74, 0x65,
	0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x71, 0x63, 0x69, 0x69, 0x70, 0x2d, 0x69, 0x63, 0x70, 0x2f,
	0x74, 0x66, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2f, 0x74, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0xa2, 0x02, 0x03, 0x54,
	0x50, 0x58, 0xaa, 0x02, 0x13, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0xca, 0x02, 0x13, 0x54, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0xe2, 0x02,
	0x1f, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5c, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x72, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0xea, 0x02, 0x14, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x3a, 0x3a, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tensorflow_core_profiler_protobuf_op_stats_proto_rawDescOnce sync.Once
	file_tensorflow_core_profiler_protobuf_op_stats_proto_rawDescData = file_tensorflow_core_profiler_protobuf_op_stats_proto_rawDesc
)

func file_tensorflow_core_profiler_protobuf_op_stats_proto_rawDescGZIP() []byte {
	file_tensorflow_core_profiler_protobuf_op_stats_proto_rawDescOnce.Do(func() {
		file_tensorflow_core_profiler_protobuf_op_stats_proto_rawDescData = protoimpl.X.CompressGZIP(file_tensorflow_core_profiler_protobuf_op_stats_proto_rawDescData)
	})
	return file_tensorflow_core_profiler_protobuf_op_stats_proto_rawDescData
}

var file_tensorflow_core_profiler_protobuf_op_stats_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_tensorflow_core_profiler_protobuf_op_stats_proto_goTypes = []interface{}{
	(*PerfEnv)(nil),                      // 0: tensorflow.profiler.PerfEnv
	(*HostIndependentJobInfoResult)(nil), // 1: tensorflow.profiler.HostIndependentJobInfoResult
	(*HostDependentJobInfoResult)(nil),   // 2: tensorflow.profiler.HostDependentJobInfoResult
	(*SystemTopology)(nil),               // 3: tensorflow.profiler.SystemTopology
	(*RunEnvironment)(nil),               // 4: tensorflow.profiler.RunEnvironment
	(*CoreDetails)(nil),                  // 5: tensorflow.profiler.CoreDetails
	(*PerformanceCounterResult)(nil),     // 6: tensorflow.profiler.PerformanceCounterResult
	(*OpStats)(nil),                      // 7: tensorflow.profiler.OpStats
	nil,                                  // 8: tensorflow.profiler.RunEnvironment.HostnamesEntry
	nil,                                  // 9: tensorflow.profiler.OpStats.CoreIdToDetailsEntry
	nil,                                  // 10: tensorflow.profiler.OpStats.ProgramIdToNameMapEntry
	(*Topology)(nil),                     // 11: tensorflow.profiler.Topology
	(*OpMetricsDb)(nil),                  // 12: tensorflow.profiler.OpMetricsDb
	(*StepDatabaseResult)(nil),           // 13: tensorflow.profiler.StepDatabaseResult
	(*KernelStatsDb)(nil),                // 14: tensorflow.profiler.KernelStatsDb
	(*TfFunctionDb)(nil),                 // 15: tensorflow.profiler.TfFunctionDb
	(*Diagnostics)(nil),                  // 16: tensorflow.profiler.Diagnostics
}
var file_tensorflow_core_profiler_protobuf_op_stats_proto_depIdxs = []int32{
	8,  // 0: tensorflow.profiler.RunEnvironment.hostnames:type_name -> tensorflow.profiler.RunEnvironment.HostnamesEntry
	1,  // 1: tensorflow.profiler.RunEnvironment.host_independent_job_info:type_name -> tensorflow.profiler.HostIndependentJobInfoResult
	2,  // 2: tensorflow.profiler.RunEnvironment.host_dependent_job_info:type_name -> tensorflow.profiler.HostDependentJobInfoResult
	3,  // 3: tensorflow.profiler.RunEnvironment.topology:type_name -> tensorflow.profiler.SystemTopology
	11, // 4: tensorflow.profiler.RunEnvironment.system_topology:type_name -> tensorflow.profiler.Topology
	12, // 5: tensorflow.profiler.OpStats.host_op_metrics_db:type_name -> tensorflow.profiler.OpMetricsDb
	12, // 6: tensorflow.profiler.OpStats.device_op_metrics_db:type_name -> tensorflow.profiler.OpMetricsDb
	12, // 7: tensorflow.profiler.OpStats.hlo_metrics_db_complete_steps_only:type_name -> tensorflow.profiler.OpMetricsDb
	0,  // 8: tensorflow.profiler.OpStats.perf_env:type_name -> tensorflow.profiler.PerfEnv
	13, // 9: tensorflow.profiler.OpStats.step_db:type_name -> tensorflow.profiler.StepDatabaseResult
	4,  // 10: tensorflow.profiler.OpStats.run_environment:type_name -> tensorflow.profiler.RunEnvironment
	14, // 11: tensorflow.profiler.OpStats.kernel_stats_db:type_name -> tensorflow.profiler.KernelStatsDb
	15, // 12: tensorflow.profiler.OpStats.tf_function_db:type_name -> tensorflow.profiler.TfFunctionDb
	9,  // 13: tensorflow.profiler.OpStats.core_id_to_details:type_name -> tensorflow.profiler.OpStats.CoreIdToDetailsEntry
	16, // 14: tensorflow.profiler.OpStats.diagnostics:type_name -> tensorflow.profiler.Diagnostics
	10, // 15: tensorflow.profiler.OpStats.program_id_to_name_map:type_name -> tensorflow.profiler.OpStats.ProgramIdToNameMapEntry
	6,  // 16: tensorflow.profiler.OpStats.performance_counter_result:type_name -> tensorflow.profiler.PerformanceCounterResult
	5,  // 17: tensorflow.profiler.OpStats.CoreIdToDetailsEntry.value:type_name -> tensorflow.profiler.CoreDetails
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_tensorflow_core_profiler_protobuf_op_stats_proto_init() }
func file_tensorflow_core_profiler_protobuf_op_stats_proto_init() {
	if File_tensorflow_core_profiler_protobuf_op_stats_proto != nil {
		return
	}
	file_tensorflow_core_profiler_protobuf_diagnostics_proto_init()
	file_tensorflow_core_profiler_protobuf_kernel_stats_proto_init()
	file_tensorflow_core_profiler_protobuf_op_metrics_proto_init()
	file_tensorflow_core_profiler_protobuf_steps_db_proto_init()
	file_tensorflow_core_profiler_protobuf_tf_function_proto_init()
	file_tensorflow_core_profiler_protobuf_topology_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_tensorflow_core_profiler_protobuf_op_stats_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerfEnv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_profiler_protobuf_op_stats_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostIndependentJobInfoResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_profiler_protobuf_op_stats_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostDependentJobInfoResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_profiler_protobuf_op_stats_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemTopology); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_profiler_protobuf_op_stats_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunEnvironment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_profiler_protobuf_op_stats_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoreDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_profiler_protobuf_op_stats_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerformanceCounterResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_profiler_protobuf_op_stats_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tensorflow_core_profiler_protobuf_op_stats_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tensorflow_core_profiler_protobuf_op_stats_proto_goTypes,
		DependencyIndexes: file_tensorflow_core_profiler_protobuf_op_stats_proto_depIdxs,
		MessageInfos:      file_tensorflow_core_profiler_protobuf_op_stats_proto_msgTypes,
	}.Build()
	File_tensorflow_core_profiler_protobuf_op_stats_proto = out.File
	file_tensorflow_core_profiler_protobuf_op_stats_proto_rawDesc = nil
	file_tensorflow_core_profiler_protobuf_op_stats_proto_goTypes = nil
	file_tensorflow_core_profiler_protobuf_op_stats_proto_depIdxs = nil
}
