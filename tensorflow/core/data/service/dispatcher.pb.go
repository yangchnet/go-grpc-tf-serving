// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: tensorflow/core/data/service/dispatcher.proto

package service

import (
	framework "github.com/yangchnet/tf-serving/tensorflow/core/framework"
	protobuf "github.com/yangchnet/tf-serving/tensorflow/core/protobuf"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Next tag: 3
type TaskProgress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The task that this message is about.
	TaskId int64 `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// Whether the task has completed.
	Completed bool `protobuf:"varint,2,opt,name=completed,proto3" json:"completed,omitempty"`
}

func (x *TaskProgress) Reset() {
	*x = TaskProgress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_data_service_dispatcher_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskProgress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskProgress) ProtoMessage() {}

func (x *TaskProgress) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_data_service_dispatcher_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskProgress.ProtoReflect.Descriptor instead.
func (*TaskProgress) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_data_service_dispatcher_proto_rawDescGZIP(), []int{0}
}

func (x *TaskProgress) GetTaskId() int64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *TaskProgress) GetCompleted() bool {
	if x != nil {
		return x.Completed
	}
	return false
}

// Next tag: 6
type WorkerHeartbeatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkerAddress   string   `protobuf:"bytes,1,opt,name=worker_address,json=workerAddress,proto3" json:"worker_address,omitempty"`
	TransferAddress string   `protobuf:"bytes,3,opt,name=transfer_address,json=transferAddress,proto3" json:"transfer_address,omitempty"`
	WorkerTags      []string `protobuf:"bytes,4,rep,name=worker_tags,json=workerTags,proto3" json:"worker_tags,omitempty"`
	// The UID of the worker Borg job, used for telemetry.
	WorkerUid    int64   `protobuf:"varint,5,opt,name=worker_uid,json=workerUid,proto3" json:"worker_uid,omitempty"`
	CurrentTasks []int64 `protobuf:"varint,2,rep,packed,name=current_tasks,json=currentTasks,proto3" json:"current_tasks,omitempty"`
}

func (x *WorkerHeartbeatRequest) Reset() {
	*x = WorkerHeartbeatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_data_service_dispatcher_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkerHeartbeatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerHeartbeatRequest) ProtoMessage() {}

func (x *WorkerHeartbeatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_data_service_dispatcher_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerHeartbeatRequest.ProtoReflect.Descriptor instead.
func (*WorkerHeartbeatRequest) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_data_service_dispatcher_proto_rawDescGZIP(), []int{1}
}

func (x *WorkerHeartbeatRequest) GetWorkerAddress() string {
	if x != nil {
		return x.WorkerAddress
	}
	return ""
}

func (x *WorkerHeartbeatRequest) GetTransferAddress() string {
	if x != nil {
		return x.TransferAddress
	}
	return ""
}

func (x *WorkerHeartbeatRequest) GetWorkerTags() []string {
	if x != nil {
		return x.WorkerTags
	}
	return nil
}

func (x *WorkerHeartbeatRequest) GetWorkerUid() int64 {
	if x != nil {
		return x.WorkerUid
	}
	return 0
}

func (x *WorkerHeartbeatRequest) GetCurrentTasks() []int64 {
	if x != nil {
		return x.CurrentTasks
	}
	return nil
}

// Next tag: 3
type WorkerHeartbeatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewTasks      []*TaskDef `protobuf:"bytes,1,rep,name=new_tasks,json=newTasks,proto3" json:"new_tasks,omitempty"`
	TasksToDelete []int64    `protobuf:"varint,2,rep,packed,name=tasks_to_delete,json=tasksToDelete,proto3" json:"tasks_to_delete,omitempty"`
}

func (x *WorkerHeartbeatResponse) Reset() {
	*x = WorkerHeartbeatResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_data_service_dispatcher_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkerHeartbeatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerHeartbeatResponse) ProtoMessage() {}

func (x *WorkerHeartbeatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_data_service_dispatcher_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerHeartbeatResponse.ProtoReflect.Descriptor instead.
func (*WorkerHeartbeatResponse) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_data_service_dispatcher_proto_rawDescGZIP(), []int{2}
}

func (x *WorkerHeartbeatResponse) GetNewTasks() []*TaskDef {
	if x != nil {
		return x.NewTasks
	}
	return nil
}

func (x *WorkerHeartbeatResponse) GetTasksToDelete() []int64 {
	if x != nil {
		return x.TasksToDelete
	}
	return nil
}

// Next tag: 3
type WorkerUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkerAddress string          `protobuf:"bytes,1,opt,name=worker_address,json=workerAddress,proto3" json:"worker_address,omitempty"`
	Updates       []*TaskProgress `protobuf:"bytes,2,rep,name=updates,proto3" json:"updates,omitempty"`
}

func (x *WorkerUpdateRequest) Reset() {
	*x = WorkerUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_data_service_dispatcher_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkerUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerUpdateRequest) ProtoMessage() {}

func (x *WorkerUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_data_service_dispatcher_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerUpdateRequest.ProtoReflect.Descriptor instead.
func (*WorkerUpdateRequest) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_data_service_dispatcher_proto_rawDescGZIP(), []int{3}
}

func (x *WorkerUpdateRequest) GetWorkerAddress() string {
	if x != nil {
		return x.WorkerAddress
	}
	return ""
}

func (x *WorkerUpdateRequest) GetUpdates() []*TaskProgress {
	if x != nil {
		return x.Updates
	}
	return nil
}

// Next tag: 1
type WorkerUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WorkerUpdateResponse) Reset() {
	*x = WorkerUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_data_service_dispatcher_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkerUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerUpdateResponse) ProtoMessage() {}

func (x *WorkerUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_data_service_dispatcher_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerUpdateResponse.ProtoReflect.Descriptor instead.
func (*WorkerUpdateResponse) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_data_service_dispatcher_proto_rawDescGZIP(), []int{4}
}

// Next tag: 2
type GetDatasetDefRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetId string `protobuf:"bytes,1,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
}

func (x *GetDatasetDefRequest) Reset() {
	*x = GetDatasetDefRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_data_service_dispatcher_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDatasetDefRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDatasetDefRequest) ProtoMessage() {}

func (x *GetDatasetDefRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_data_service_dispatcher_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDatasetDefRequest.ProtoReflect.Descriptor instead.
func (*GetDatasetDefRequest) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_data_service_dispatcher_proto_rawDescGZIP(), []int{5}
}

func (x *GetDatasetDefRequest) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

// Next tag: 2
type GetDatasetDefResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetDef *DatasetDef `protobuf:"bytes,1,opt,name=dataset_def,json=datasetDef,proto3" json:"dataset_def,omitempty"`
}

func (x *GetDatasetDefResponse) Reset() {
	*x = GetDatasetDefResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_data_service_dispatcher_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDatasetDefResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDatasetDefResponse) ProtoMessage() {}

func (x *GetDatasetDefResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_data_service_dispatcher_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDatasetDefResponse.ProtoReflect.Descriptor instead.
func (*GetDatasetDefResponse) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_data_service_dispatcher_proto_rawDescGZIP(), []int{6}
}

func (x *GetDatasetDefResponse) GetDatasetDef() *DatasetDef {
	if x != nil {
		return x.DatasetDef
	}
	return nil
}

// Next tag: 4
type GetSplitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IterationId        int64 `protobuf:"varint,1,opt,name=iteration_id,json=iterationId,proto3" json:"iteration_id,omitempty"`
	Repetition         int64 `protobuf:"varint,2,opt,name=repetition,proto3" json:"repetition,omitempty"`
	SplitProviderIndex int64 `protobuf:"varint,3,opt,name=split_provider_index,json=splitProviderIndex,proto3" json:"split_provider_index,omitempty"`
}

func (x *GetSplitRequest) Reset() {
	*x = GetSplitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_data_service_dispatcher_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSplitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSplitRequest) ProtoMessage() {}

func (x *GetSplitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_data_service_dispatcher_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSplitRequest.ProtoReflect.Descriptor instead.
func (*GetSplitRequest) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_data_service_dispatcher_proto_rawDescGZIP(), []int{7}
}

func (x *GetSplitRequest) GetIterationId() int64 {
	if x != nil {
		return x.IterationId
	}
	return 0
}

func (x *GetSplitRequest) GetRepetition() int64 {
	if x != nil {
		return x.Repetition
	}
	return 0
}

func (x *GetSplitRequest) GetSplitProviderIndex() int64 {
	if x != nil {
		return x.SplitProviderIndex
	}
	return 0
}

// Next tag: 3
type GetSplitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Split       *framework.TensorProto `protobuf:"bytes,1,opt,name=split,proto3" json:"split,omitempty"`
	EndOfSplits bool                   `protobuf:"varint,2,opt,name=end_of_splits,json=endOfSplits,proto3" json:"end_of_splits,omitempty"`
}

func (x *GetSplitResponse) Reset() {
	*x = GetSplitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_data_service_dispatcher_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSplitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSplitResponse) ProtoMessage() {}

func (x *GetSplitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_data_service_dispatcher_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSplitResponse.ProtoReflect.Descriptor instead.
func (*GetSplitResponse) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_data_service_dispatcher_proto_rawDescGZIP(), []int{8}
}

func (x *GetSplitResponse) GetSplit() *framework.TensorProto {
	if x != nil {
		return x.Split
	}
	return nil
}

func (x *GetSplitResponse) GetEndOfSplits() bool {
	if x != nil {
		return x.EndOfSplits
	}
	return false
}

// Next tag: 1
type GetVersionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetVersionRequest) Reset() {
	*x = GetVersionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_data_service_dispatcher_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVersionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVersionRequest) ProtoMessage() {}

func (x *GetVersionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_data_service_dispatcher_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVersionRequest.ProtoReflect.Descriptor instead.
func (*GetVersionRequest) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_data_service_dispatcher_proto_rawDescGZIP(), []int{9}
}

// Next tag: 2
type GetVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version int64 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *GetVersionResponse) Reset() {
	*x = GetVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_data_service_dispatcher_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVersionResponse) ProtoMessage() {}

func (x *GetVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_data_service_dispatcher_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVersionResponse.ProtoReflect.Descriptor instead.
func (*GetVersionResponse) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_data_service_dispatcher_proto_rawDescGZIP(), []int{10}
}

func (x *GetVersionResponse) GetVersion() int64 {
	if x != nil {
		return x.Version
	}
	return 0
}

// Next tag: 5
type GetOrRegisterDatasetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The dataset to register.
	Dataset *DatasetDef `protobuf:"bytes,1,opt,name=dataset,proto3" json:"dataset,omitempty"`
	// Metadata related to tf.data service.
	Metadata *protobuf.DataServiceMetadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Types that are assignable to OptionalDatasetId:
	//
	//	*GetOrRegisterDatasetRequest_DatasetId
	OptionalDatasetId isGetOrRegisterDatasetRequest_OptionalDatasetId `protobuf_oneof:"optional_dataset_id"`
}

func (x *GetOrRegisterDatasetRequest) Reset() {
	*x = GetOrRegisterDatasetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_data_service_dispatcher_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrRegisterDatasetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrRegisterDatasetRequest) ProtoMessage() {}

func (x *GetOrRegisterDatasetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_data_service_dispatcher_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrRegisterDatasetRequest.ProtoReflect.Descriptor instead.
func (*GetOrRegisterDatasetRequest) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_data_service_dispatcher_proto_rawDescGZIP(), []int{11}
}

func (x *GetOrRegisterDatasetRequest) GetDataset() *DatasetDef {
	if x != nil {
		return x.Dataset
	}
	return nil
}

func (x *GetOrRegisterDatasetRequest) GetMetadata() *protobuf.DataServiceMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (m *GetOrRegisterDatasetRequest) GetOptionalDatasetId() isGetOrRegisterDatasetRequest_OptionalDatasetId {
	if m != nil {
		return m.OptionalDatasetId
	}
	return nil
}

func (x *GetOrRegisterDatasetRequest) GetDatasetId() string {
	if x, ok := x.GetOptionalDatasetId().(*GetOrRegisterDatasetRequest_DatasetId); ok {
		return x.DatasetId
	}
	return ""
}

type isGetOrRegisterDatasetRequest_OptionalDatasetId interface {
	isGetOrRegisterDatasetRequest_OptionalDatasetId()
}

type GetOrRegisterDatasetRequest_DatasetId struct {
	// If provided, tf.data service will register the dataset with the specified
	// ID. Otherwise, it will generate a unique dataset ID.
	DatasetId string `protobuf:"bytes,4,opt,name=dataset_id,json=datasetId,proto3,oneof"`
}

func (*GetOrRegisterDatasetRequest_DatasetId) isGetOrRegisterDatasetRequest_OptionalDatasetId() {}

// Next tag: 2
type GetOrRegisterDatasetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id for the registered dataset.
	DatasetId string `protobuf:"bytes,1,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
}

func (x *GetOrRegisterDatasetResponse) Reset() {
	*x = GetOrRegisterDatasetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_data_service_dispatcher_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrRegisterDatasetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrRegisterDatasetResponse) ProtoMessage() {}

func (x *GetOrRegisterDatasetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_data_service_dispatcher_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrRegisterDatasetResponse.ProtoReflect.Descriptor instead.
func (*GetOrRegisterDatasetResponse) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_data_service_dispatcher_proto_rawDescGZIP(), []int{12}
}

func (x *GetOrRegisterDatasetResponse) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

// Next tag: 2
type GetDataServiceMetadataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The dataset id to get the data service dataset metadata.
	DatasetId string `protobuf:"bytes,1,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
}

func (x *GetDataServiceMetadataRequest) Reset() {
	*x = GetDataServiceMetadataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_data_service_dispatcher_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDataServiceMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDataServiceMetadataRequest) ProtoMessage() {}

func (x *GetDataServiceMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_data_service_dispatcher_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDataServiceMetadataRequest.ProtoReflect.Descriptor instead.
func (*GetDataServiceMetadataRequest) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_data_service_dispatcher_proto_rawDescGZIP(), []int{13}
}

func (x *GetDataServiceMetadataRequest) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

// Next tag: 2
type GetDataServiceMetadataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The retrieved data service dataset metadata.
	Metadata *protobuf.DataServiceMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *GetDataServiceMetadataResponse) Reset() {
	*x = GetDataServiceMetadataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_data_service_dispatcher_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDataServiceMetadataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDataServiceMetadataResponse) ProtoMessage() {}

func (x *GetDataServiceMetadataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_data_service_dispatcher_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDataServiceMetadataResponse.ProtoReflect.Descriptor instead.
func (*GetDataServiceMetadataResponse) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_data_service_dispatcher_proto_rawDescGZIP(), []int{14}
}

func (x *GetDataServiceMetadataResponse) GetMetadata() *protobuf.DataServiceMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Next tag: 1
type GetDataServiceConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetDataServiceConfigRequest) Reset() {
	*x = GetDataServiceConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_data_service_dispatcher_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDataServiceConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDataServiceConfigRequest) ProtoMessage() {}

func (x *GetDataServiceConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_data_service_dispatcher_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDataServiceConfigRequest.ProtoReflect.Descriptor instead.
func (*GetDataServiceConfigRequest) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_data_service_dispatcher_proto_rawDescGZIP(), []int{15}
}

// Next tag: 2
type GetDataServiceConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *protobuf.DataServiceConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *GetDataServiceConfigResponse) Reset() {
	*x = GetDataServiceConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_data_service_dispatcher_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDataServiceConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDataServiceConfigResponse) ProtoMessage() {}

func (x *GetDataServiceConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_data_service_dispatcher_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDataServiceConfigResponse.ProtoReflect.Descriptor instead.
func (*GetDataServiceConfigResponse) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_data_service_dispatcher_proto_rawDescGZIP(), []int{16}
}

func (x *GetDataServiceConfigResponse) GetConfig() *protobuf.DataServiceConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

// Next tag: 7
type GetOrCreateJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the dataset to create a job for.
	DatasetId string `protobuf:"bytes,1,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	// A mode controlling how the tf.data service produces data for the job.
	ProcessingModeDef *protobuf.ProcessingModeDef `protobuf:"bytes,2,opt,name=processing_mode_def,json=processingModeDef,proto3" json:"processing_mode_def,omitempty"`
	// Optional job name identifying a shared job. If not set, the RPC will always
	// create a new job.
	//
	// Types that are assignable to OptionalJobName:
	//
	//	*GetOrCreateJobRequest_JobName
	OptionalJobName isGetOrCreateJobRequest_OptionalJobName `protobuf_oneof:"optional_job_name"`
	// Optional number of consumers. If set, the job's tasks will provide
	// their elements to consumers round-robin.
	//
	// Types that are assignable to OptionalNumConsumers:
	//
	//	*GetOrCreateJobRequest_NumConsumers
	OptionalNumConsumers isGetOrCreateJobRequest_OptionalNumConsumers `protobuf_oneof:"optional_num_consumers"`
	// True if cross-trainer cache is enabled.
	UseCrossTrainerCache bool `protobuf:"varint,5,opt,name=use_cross_trainer_cache,json=useCrossTrainerCache,proto3" json:"use_cross_trainer_cache,omitempty"`
	// Specifies which workers the client of this job reads from.
	TargetWorkers TargetWorkers `protobuf:"varint,6,opt,name=target_workers,json=targetWorkers,proto3,enum=tensorflow.data.TargetWorkers" json:"target_workers,omitempty"`
}

func (x *GetOrCreateJobRequest) Reset() {
	*x = GetOrCreateJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_data_service_dispatcher_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrCreateJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrCreateJobRequest) ProtoMessage() {}

func (x *GetOrCreateJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_data_service_dispatcher_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrCreateJobRequest.ProtoReflect.Descriptor instead.
func (*GetOrCreateJobRequest) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_data_service_dispatcher_proto_rawDescGZIP(), []int{17}
}

func (x *GetOrCreateJobRequest) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

func (x *GetOrCreateJobRequest) GetProcessingModeDef() *protobuf.ProcessingModeDef {
	if x != nil {
		return x.ProcessingModeDef
	}
	return nil
}

func (m *GetOrCreateJobRequest) GetOptionalJobName() isGetOrCreateJobRequest_OptionalJobName {
	if m != nil {
		return m.OptionalJobName
	}
	return nil
}

func (x *GetOrCreateJobRequest) GetJobName() string {
	if x, ok := x.GetOptionalJobName().(*GetOrCreateJobRequest_JobName); ok {
		return x.JobName
	}
	return ""
}

func (m *GetOrCreateJobRequest) GetOptionalNumConsumers() isGetOrCreateJobRequest_OptionalNumConsumers {
	if m != nil {
		return m.OptionalNumConsumers
	}
	return nil
}

func (x *GetOrCreateJobRequest) GetNumConsumers() int64 {
	if x, ok := x.GetOptionalNumConsumers().(*GetOrCreateJobRequest_NumConsumers); ok {
		return x.NumConsumers
	}
	return 0
}

func (x *GetOrCreateJobRequest) GetUseCrossTrainerCache() bool {
	if x != nil {
		return x.UseCrossTrainerCache
	}
	return false
}

func (x *GetOrCreateJobRequest) GetTargetWorkers() TargetWorkers {
	if x != nil {
		return x.TargetWorkers
	}
	return TargetWorkers_TARGET_WORKERS_UNSPECIFIED
}

type isGetOrCreateJobRequest_OptionalJobName interface {
	isGetOrCreateJobRequest_OptionalJobName()
}

type GetOrCreateJobRequest_JobName struct {
	JobName string `protobuf:"bytes,3,opt,name=job_name,json=jobName,proto3,oneof"`
}

func (*GetOrCreateJobRequest_JobName) isGetOrCreateJobRequest_OptionalJobName() {}

type isGetOrCreateJobRequest_OptionalNumConsumers interface {
	isGetOrCreateJobRequest_OptionalNumConsumers()
}

type GetOrCreateJobRequest_NumConsumers struct {
	NumConsumers int64 `protobuf:"varint,4,opt,name=num_consumers,json=numConsumers,proto3,oneof"`
}

func (*GetOrCreateJobRequest_NumConsumers) isGetOrCreateJobRequest_OptionalNumConsumers() {}

// Next tag: 2
type GetOrCreateJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId int64 `protobuf:"varint,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
}

func (x *GetOrCreateJobResponse) Reset() {
	*x = GetOrCreateJobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_data_service_dispatcher_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrCreateJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrCreateJobResponse) ProtoMessage() {}

func (x *GetOrCreateJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_data_service_dispatcher_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrCreateJobResponse.ProtoReflect.Descriptor instead.
func (*GetOrCreateJobResponse) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_data_service_dispatcher_proto_rawDescGZIP(), []int{18}
}

func (x *GetOrCreateJobResponse) GetJobId() int64 {
	if x != nil {
		return x.JobId
	}
	return 0
}

// Next tag: 3
type GetOrCreateIterationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The job to create an iteration for.
	JobId int64 `protobuf:"varint,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	// Which repetition of the job to read from.
	Repetition int64 `protobuf:"varint,2,opt,name=repetition,proto3" json:"repetition,omitempty"`
}

func (x *GetOrCreateIterationRequest) Reset() {
	*x = GetOrCreateIterationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_data_service_dispatcher_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrCreateIterationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrCreateIterationRequest) ProtoMessage() {}

func (x *GetOrCreateIterationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_data_service_dispatcher_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrCreateIterationRequest.ProtoReflect.Descriptor instead.
func (*GetOrCreateIterationRequest) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_data_service_dispatcher_proto_rawDescGZIP(), []int{19}
}

func (x *GetOrCreateIterationRequest) GetJobId() int64 {
	if x != nil {
		return x.JobId
	}
	return 0
}

func (x *GetOrCreateIterationRequest) GetRepetition() int64 {
	if x != nil {
		return x.Repetition
	}
	return 0
}

// Next tag: 2
type GetOrCreateIterationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An id for the client that will read from the iteration. When the client is
	// done with the iteration, they should call ReleaseIterationClient with this
	// id.
	IterationClientId int64 `protobuf:"varint,1,opt,name=iteration_client_id,json=iterationClientId,proto3" json:"iteration_client_id,omitempty"`
}

func (x *GetOrCreateIterationResponse) Reset() {
	*x = GetOrCreateIterationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_data_service_dispatcher_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrCreateIterationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrCreateIterationResponse) ProtoMessage() {}

func (x *GetOrCreateIterationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_data_service_dispatcher_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrCreateIterationResponse.ProtoReflect.Descriptor instead.
func (*GetOrCreateIterationResponse) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_data_service_dispatcher_proto_rawDescGZIP(), []int{20}
}

func (x *GetOrCreateIterationResponse) GetIterationClientId() int64 {
	if x != nil {
		return x.IterationClientId
	}
	return 0
}

// Next tag: 4
type MaybeRemoveTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId        int64 `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	ConsumerIndex int64 `protobuf:"varint,2,opt,name=consumer_index,json=consumerIndex,proto3" json:"consumer_index,omitempty"`
	Round         int64 `protobuf:"varint,3,opt,name=round,proto3" json:"round,omitempty"`
}

func (x *MaybeRemoveTaskRequest) Reset() {
	*x = MaybeRemoveTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_data_service_dispatcher_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaybeRemoveTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaybeRemoveTaskRequest) ProtoMessage() {}

func (x *MaybeRemoveTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_data_service_dispatcher_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaybeRemoveTaskRequest.ProtoReflect.Descriptor instead.
func (*MaybeRemoveTaskRequest) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_data_service_dispatcher_proto_rawDescGZIP(), []int{21}
}

func (x *MaybeRemoveTaskRequest) GetTaskId() int64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *MaybeRemoveTaskRequest) GetConsumerIndex() int64 {
	if x != nil {
		return x.ConsumerIndex
	}
	return 0
}

func (x *MaybeRemoveTaskRequest) GetRound() int64 {
	if x != nil {
		return x.Round
	}
	return 0
}

// Next tag: 2
type MaybeRemoveTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Removed bool `protobuf:"varint,1,opt,name=removed,proto3" json:"removed,omitempty"`
}

func (x *MaybeRemoveTaskResponse) Reset() {
	*x = MaybeRemoveTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_data_service_dispatcher_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaybeRemoveTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaybeRemoveTaskResponse) ProtoMessage() {}

func (x *MaybeRemoveTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_data_service_dispatcher_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaybeRemoveTaskResponse.ProtoReflect.Descriptor instead.
func (*MaybeRemoveTaskResponse) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_data_service_dispatcher_proto_rawDescGZIP(), []int{22}
}

func (x *MaybeRemoveTaskResponse) GetRemoved() bool {
	if x != nil {
		return x.Removed
	}
	return false
}

// Next tag: 2
type ReleaseIterationClientRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IterationClientId int64 `protobuf:"varint,1,opt,name=iteration_client_id,json=iterationClientId,proto3" json:"iteration_client_id,omitempty"`
}

func (x *ReleaseIterationClientRequest) Reset() {
	*x = ReleaseIterationClientRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_data_service_dispatcher_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseIterationClientRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseIterationClientRequest) ProtoMessage() {}

func (x *ReleaseIterationClientRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_data_service_dispatcher_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseIterationClientRequest.ProtoReflect.Descriptor instead.
func (*ReleaseIterationClientRequest) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_data_service_dispatcher_proto_rawDescGZIP(), []int{23}
}

func (x *ReleaseIterationClientRequest) GetIterationClientId() int64 {
	if x != nil {
		return x.IterationClientId
	}
	return 0
}

// Next tag: 1
type ReleaseIterationClientResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReleaseIterationClientResponse) Reset() {
	*x = ReleaseIterationClientResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_data_service_dispatcher_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseIterationClientResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseIterationClientResponse) ProtoMessage() {}

func (x *ReleaseIterationClientResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_data_service_dispatcher_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseIterationClientResponse.ProtoReflect.Descriptor instead.
func (*ReleaseIterationClientResponse) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_data_service_dispatcher_proto_rawDescGZIP(), []int{24}
}

// Next tag: 5
type ClientHeartbeatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The iteration client id to heartbeat for.
	IterationClientId int64 `protobuf:"varint,1,opt,name=iteration_client_id,json=iterationClientId,proto3" json:"iteration_client_id,omitempty"`
	// Reports which round the client is currently reading from when doing
	// round-robin reads.
	//
	// Types that are assignable to OptionalCurrentRound:
	//
	//	*ClientHeartbeatRequest_CurrentRound
	OptionalCurrentRound isClientHeartbeatRequest_OptionalCurrentRound `protobuf_oneof:"optional_current_round"`
	// Reports whether the client has successfully blocked the indicated round
	// from starting. This enables the dispatcher to add a new task in the
	// blocked round or later.
	//
	// Types that are assignable to OptionalBlockedRound:
	//
	//	*ClientHeartbeatRequest_BlockedRound
	OptionalBlockedRound isClientHeartbeatRequest_OptionalBlockedRound `protobuf_oneof:"optional_blocked_round"`
}

func (x *ClientHeartbeatRequest) Reset() {
	*x = ClientHeartbeatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_data_service_dispatcher_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientHeartbeatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientHeartbeatRequest) ProtoMessage() {}

func (x *ClientHeartbeatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_data_service_dispatcher_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientHeartbeatRequest.ProtoReflect.Descriptor instead.
func (*ClientHeartbeatRequest) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_data_service_dispatcher_proto_rawDescGZIP(), []int{25}
}

func (x *ClientHeartbeatRequest) GetIterationClientId() int64 {
	if x != nil {
		return x.IterationClientId
	}
	return 0
}

func (m *ClientHeartbeatRequest) GetOptionalCurrentRound() isClientHeartbeatRequest_OptionalCurrentRound {
	if m != nil {
		return m.OptionalCurrentRound
	}
	return nil
}

func (x *ClientHeartbeatRequest) GetCurrentRound() int64 {
	if x, ok := x.GetOptionalCurrentRound().(*ClientHeartbeatRequest_CurrentRound); ok {
		return x.CurrentRound
	}
	return 0
}

func (m *ClientHeartbeatRequest) GetOptionalBlockedRound() isClientHeartbeatRequest_OptionalBlockedRound {
	if m != nil {
		return m.OptionalBlockedRound
	}
	return nil
}

func (x *ClientHeartbeatRequest) GetBlockedRound() int64 {
	if x, ok := x.GetOptionalBlockedRound().(*ClientHeartbeatRequest_BlockedRound); ok {
		return x.BlockedRound
	}
	return 0
}

type isClientHeartbeatRequest_OptionalCurrentRound interface {
	isClientHeartbeatRequest_OptionalCurrentRound()
}

type ClientHeartbeatRequest_CurrentRound struct {
	CurrentRound int64 `protobuf:"varint,2,opt,name=current_round,json=currentRound,proto3,oneof"`
}

func (*ClientHeartbeatRequest_CurrentRound) isClientHeartbeatRequest_OptionalCurrentRound() {}

type isClientHeartbeatRequest_OptionalBlockedRound interface {
	isClientHeartbeatRequest_OptionalBlockedRound()
}

type ClientHeartbeatRequest_BlockedRound struct {
	BlockedRound int64 `protobuf:"varint,4,opt,name=blocked_round,json=blockedRound,proto3,oneof"`
}

func (*ClientHeartbeatRequest_BlockedRound) isClientHeartbeatRequest_OptionalBlockedRound() {}

// Next tag: 5
type ClientHeartbeatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of all tasks that the client should read from.
	TaskInfo []*TaskInfo `protobuf:"bytes,1,rep,name=task_info,json=taskInfo,proto3" json:"task_info,omitempty"`
	// Tells the client not to start the given round if possible.
	//
	// Types that are assignable to OptionalBlockRound:
	//
	//	*ClientHeartbeatResponse_BlockRound
	OptionalBlockRound isClientHeartbeatResponse_OptionalBlockRound `protobuf_oneof:"optional_block_round"`
	// Whether the iteration has finished.
	IterationFinished bool `protobuf:"varint,2,opt,name=iteration_finished,json=iterationFinished,proto3" json:"iteration_finished,omitempty"`
	// tf.data service deployment mode. Supported values are "REMOTE",
	// "COLOCATED", and "HYBRID". If unspecified, it is assumed to be "REMOTE".
	DeploymentMode protobuf.DeploymentMode `protobuf:"varint,4,opt,name=deployment_mode,json=deploymentMode,proto3,enum=tensorflow.data.DeploymentMode" json:"deployment_mode,omitempty"`
}

func (x *ClientHeartbeatResponse) Reset() {
	*x = ClientHeartbeatResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_data_service_dispatcher_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientHeartbeatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientHeartbeatResponse) ProtoMessage() {}

func (x *ClientHeartbeatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_data_service_dispatcher_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientHeartbeatResponse.ProtoReflect.Descriptor instead.
func (*ClientHeartbeatResponse) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_data_service_dispatcher_proto_rawDescGZIP(), []int{26}
}

func (x *ClientHeartbeatResponse) GetTaskInfo() []*TaskInfo {
	if x != nil {
		return x.TaskInfo
	}
	return nil
}

func (m *ClientHeartbeatResponse) GetOptionalBlockRound() isClientHeartbeatResponse_OptionalBlockRound {
	if m != nil {
		return m.OptionalBlockRound
	}
	return nil
}

func (x *ClientHeartbeatResponse) GetBlockRound() int64 {
	if x, ok := x.GetOptionalBlockRound().(*ClientHeartbeatResponse_BlockRound); ok {
		return x.BlockRound
	}
	return 0
}

func (x *ClientHeartbeatResponse) GetIterationFinished() bool {
	if x != nil {
		return x.IterationFinished
	}
	return false
}

func (x *ClientHeartbeatResponse) GetDeploymentMode() protobuf.DeploymentMode {
	if x != nil {
		return x.DeploymentMode
	}
	return protobuf.DeploymentMode(0)
}

type isClientHeartbeatResponse_OptionalBlockRound interface {
	isClientHeartbeatResponse_OptionalBlockRound()
}

type ClientHeartbeatResponse_BlockRound struct {
	BlockRound int64 `protobuf:"varint,3,opt,name=block_round,json=blockRound,proto3,oneof"`
}

func (*ClientHeartbeatResponse_BlockRound) isClientHeartbeatResponse_OptionalBlockRound() {}

// Next tag: 3
type WorkerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *WorkerInfo) Reset() {
	*x = WorkerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_data_service_dispatcher_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerInfo) ProtoMessage() {}

func (x *WorkerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_data_service_dispatcher_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerInfo.ProtoReflect.Descriptor instead.
func (*WorkerInfo) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_data_service_dispatcher_proto_rawDescGZIP(), []int{27}
}

func (x *WorkerInfo) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

// Next tag: 1
type GetWorkersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetWorkersRequest) Reset() {
	*x = GetWorkersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_data_service_dispatcher_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkersRequest) ProtoMessage() {}

func (x *GetWorkersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_data_service_dispatcher_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkersRequest.ProtoReflect.Descriptor instead.
func (*GetWorkersRequest) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_data_service_dispatcher_proto_rawDescGZIP(), []int{28}
}

// Next tag: 2
type GetWorkersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of all workers.
	Workers []*WorkerInfo `protobuf:"bytes,1,rep,name=workers,proto3" json:"workers,omitempty"`
}

func (x *GetWorkersResponse) Reset() {
	*x = GetWorkersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_data_service_dispatcher_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkersResponse) ProtoMessage() {}

func (x *GetWorkersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_data_service_dispatcher_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkersResponse.ProtoReflect.Descriptor instead.
func (*GetWorkersResponse) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_data_service_dispatcher_proto_rawDescGZIP(), []int{29}
}

func (x *GetWorkersResponse) GetWorkers() []*WorkerInfo {
	if x != nil {
		return x.Workers
	}
	return nil
}

var File_tensorflow_core_data_service_dispatcher_proto protoreflect.FileDescriptor

var file_tensorflow_core_data_service_dispatcher_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x64,
	0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0f, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x1a, 0x29, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x74, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f,
	0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x45, 0x0a, 0x0c, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x22, 0xcf, 0x01, 0x0a, 0x16, 0x57, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x74,
	0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x54, 0x61, 0x67, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f,
	0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x55, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x22, 0x78, 0x0a, 0x17, 0x57, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x74, 0x61, 0x73, 0x6b,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65,
	0x66, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x74,
	0x61, 0x73, 0x6b, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x54, 0x6f, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x22, 0x75, 0x0a, 0x13, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x37, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x16, 0x0a, 0x14, 0x57, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x35, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x44, 0x65, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x22, 0x55, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x44, 0x65, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x65,
	0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x44, 0x65, 0x66, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x44, 0x65, 0x66,
	0x22, 0x86, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x69, 0x74, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x65, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x70,
	0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x70, 0x6c, 0x69, 0x74,
	0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x65, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x53, 0x70, 0x6c, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a,
	0x05, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x05, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x12, 0x22, 0x0a, 0x0d,
	0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x4f, 0x66, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x73,
	0x22, 0x13, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x2e, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xd4, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x44, 0x65, 0x66, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x40, 0x0a, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1f,
	0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x42,
	0x15, 0x0a, 0x13, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0x3d, 0x0a, 0x1c,
	0x47, 0x65, 0x74, 0x4f, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x22, 0x3e, 0x0a, 0x1d, 0x47,
	0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64, 0x22, 0x62, 0x0a, 0x1e, 0x47,
	0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x1d, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5a,
	0x0a, 0x1c, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xfb, 0x02, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64,
	0x65, 0x44, 0x65, 0x66, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x4d, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x66, 0x12, 0x1b, 0x0a, 0x08, 0x6a, 0x6f, 0x62, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6a, 0x6f, 0x62,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0d, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x0c, 0x6e,
	0x75, 0x6d, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x75,
	0x73, 0x65, 0x5f, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x75, 0x73,
	0x65, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x12, 0x45, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x77, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x74, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x18,
	0x0a, 0x16, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x63,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x73, 0x22, 0x2f, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4f,
	0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x22, 0x54, 0x0a, 0x1b, 0x47, 0x65, 0x74,
	0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x4e, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x74,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2e, 0x0a, 0x13, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x69, 0x74,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22,
	0x6e, 0x0a, 0x16, 0x4d, 0x61, 0x79, 0x62, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73,
	0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x22,
	0x33, 0x0a, 0x17, 0x4d, 0x61, 0x79, 0x62, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x64, 0x22, 0x4f, 0x0a, 0x1d, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49,
	0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x11, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x20, 0x0a, 0x1e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd0, 0x01, 0x0a, 0x16, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x11, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x25, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x25, 0x0a, 0x0d, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x01, 0x52, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x42, 0x18, 0x0a, 0x16, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x42, 0x18, 0x0a, 0x16, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x22, 0x85, 0x02, 0x0a, 0x17, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21,
	0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x12, 0x2d, 0x0a, 0x12, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69,
	0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x12, 0x48, 0x0a, 0x0f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x74, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0e, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x22, 0x2c, 0x0a, 0x0a, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03,
	0x22, 0x13, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4b, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x77,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x57,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x77, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x73, 0x32, 0xb9, 0x0b, 0x0a, 0x11, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x64, 0x0a, 0x0f, 0x57, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x27, 0x2e, 0x74, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x57, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x48, 0x65, 0x61,
	0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b,
	0x0a, 0x0c, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x24,
	0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x0d, 0x47,
	0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x44, 0x65, 0x66, 0x12, 0x25, 0x2e, 0x74,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47,
	0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x44, 0x65, 0x66, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x44, 0x65, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x08, 0x47,
	0x65, 0x74, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x12, 0x20, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x70, 0x6c,
	0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x74, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x70, 0x6c, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x0a,
	0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x2e, 0x74, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x74,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23,
	0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x73, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x2c, 0x2e, 0x74, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x65,
	0x74, 0x4f, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x74, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x4f,
	0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4f,
	0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x12, 0x26, 0x2e, 0x74, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x74,
	0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x27, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x73, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2d, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49,
	0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x64, 0x0a, 0x0f, 0x4d, 0x61, 0x79, 0x62, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x12, 0x27, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x79, 0x62, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x74,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d,
	0x61, 0x79, 0x62, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x79, 0x0a, 0x16, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x12, 0x2e, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2f, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x64, 0x0a, 0x0f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x61, 0x72, 0x74,
	0x62, 0x65, 0x61, 0x74, 0x12, 0x27, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x61,
	0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e,
	0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x57, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x22, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x74, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x57,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x79,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x73, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x2c, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2d, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0xc2,
	0x01, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x42, 0x0f, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x02, 0x50, 0x01, 0x5a, 0x3b, 0x67, 0x69, 0x74,
	0x65, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x71, 0x63, 0x69, 0x69, 0x70, 0x2d, 0x69, 0x63, 0x70,
	0x2f, 0x74, 0x66, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2f, 0x74, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x61,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0xa2, 0x02, 0x03, 0x54, 0x44, 0x58, 0xaa, 0x02,
	0x0f, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0xca, 0x02, 0x0f, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5c, 0x44, 0x61,
	0x74, 0x61, 0xe2, 0x02, 0x1b, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5c,
	0x44, 0x61, 0x74, 0x61, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0xea, 0x02, 0x10, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x3a, 0x3a, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tensorflow_core_data_service_dispatcher_proto_rawDescOnce sync.Once
	file_tensorflow_core_data_service_dispatcher_proto_rawDescData = file_tensorflow_core_data_service_dispatcher_proto_rawDesc
)

func file_tensorflow_core_data_service_dispatcher_proto_rawDescGZIP() []byte {
	file_tensorflow_core_data_service_dispatcher_proto_rawDescOnce.Do(func() {
		file_tensorflow_core_data_service_dispatcher_proto_rawDescData = protoimpl.X.CompressGZIP(file_tensorflow_core_data_service_dispatcher_proto_rawDescData)
	})
	return file_tensorflow_core_data_service_dispatcher_proto_rawDescData
}

var file_tensorflow_core_data_service_dispatcher_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_tensorflow_core_data_service_dispatcher_proto_goTypes = []interface{}{
	(*TaskProgress)(nil),                   // 0: tensorflow.data.TaskProgress
	(*WorkerHeartbeatRequest)(nil),         // 1: tensorflow.data.WorkerHeartbeatRequest
	(*WorkerHeartbeatResponse)(nil),        // 2: tensorflow.data.WorkerHeartbeatResponse
	(*WorkerUpdateRequest)(nil),            // 3: tensorflow.data.WorkerUpdateRequest
	(*WorkerUpdateResponse)(nil),           // 4: tensorflow.data.WorkerUpdateResponse
	(*GetDatasetDefRequest)(nil),           // 5: tensorflow.data.GetDatasetDefRequest
	(*GetDatasetDefResponse)(nil),          // 6: tensorflow.data.GetDatasetDefResponse
	(*GetSplitRequest)(nil),                // 7: tensorflow.data.GetSplitRequest
	(*GetSplitResponse)(nil),               // 8: tensorflow.data.GetSplitResponse
	(*GetVersionRequest)(nil),              // 9: tensorflow.data.GetVersionRequest
	(*GetVersionResponse)(nil),             // 10: tensorflow.data.GetVersionResponse
	(*GetOrRegisterDatasetRequest)(nil),    // 11: tensorflow.data.GetOrRegisterDatasetRequest
	(*GetOrRegisterDatasetResponse)(nil),   // 12: tensorflow.data.GetOrRegisterDatasetResponse
	(*GetDataServiceMetadataRequest)(nil),  // 13: tensorflow.data.GetDataServiceMetadataRequest
	(*GetDataServiceMetadataResponse)(nil), // 14: tensorflow.data.GetDataServiceMetadataResponse
	(*GetDataServiceConfigRequest)(nil),    // 15: tensorflow.data.GetDataServiceConfigRequest
	(*GetDataServiceConfigResponse)(nil),   // 16: tensorflow.data.GetDataServiceConfigResponse
	(*GetOrCreateJobRequest)(nil),          // 17: tensorflow.data.GetOrCreateJobRequest
	(*GetOrCreateJobResponse)(nil),         // 18: tensorflow.data.GetOrCreateJobResponse
	(*GetOrCreateIterationRequest)(nil),    // 19: tensorflow.data.GetOrCreateIterationRequest
	(*GetOrCreateIterationResponse)(nil),   // 20: tensorflow.data.GetOrCreateIterationResponse
	(*MaybeRemoveTaskRequest)(nil),         // 21: tensorflow.data.MaybeRemoveTaskRequest
	(*MaybeRemoveTaskResponse)(nil),        // 22: tensorflow.data.MaybeRemoveTaskResponse
	(*ReleaseIterationClientRequest)(nil),  // 23: tensorflow.data.ReleaseIterationClientRequest
	(*ReleaseIterationClientResponse)(nil), // 24: tensorflow.data.ReleaseIterationClientResponse
	(*ClientHeartbeatRequest)(nil),         // 25: tensorflow.data.ClientHeartbeatRequest
	(*ClientHeartbeatResponse)(nil),        // 26: tensorflow.data.ClientHeartbeatResponse
	(*WorkerInfo)(nil),                     // 27: tensorflow.data.WorkerInfo
	(*GetWorkersRequest)(nil),              // 28: tensorflow.data.GetWorkersRequest
	(*GetWorkersResponse)(nil),             // 29: tensorflow.data.GetWorkersResponse
	(*TaskDef)(nil),                        // 30: tensorflow.data.TaskDef
	(*DatasetDef)(nil),                     // 31: tensorflow.data.DatasetDef
	(*framework.TensorProto)(nil),          // 32: tensorflow.TensorProto
	(*protobuf.DataServiceMetadata)(nil),   // 33: tensorflow.data.DataServiceMetadata
	(*protobuf.DataServiceConfig)(nil),     // 34: tensorflow.data.DataServiceConfig
	(*protobuf.ProcessingModeDef)(nil),     // 35: tensorflow.data.ProcessingModeDef
	(TargetWorkers)(0),                     // 36: tensorflow.data.TargetWorkers
	(*TaskInfo)(nil),                       // 37: tensorflow.data.TaskInfo
	(protobuf.DeploymentMode)(0),           // 38: tensorflow.data.DeploymentMode
}
var file_tensorflow_core_data_service_dispatcher_proto_depIdxs = []int32{
	30, // 0: tensorflow.data.WorkerHeartbeatResponse.new_tasks:type_name -> tensorflow.data.TaskDef
	0,  // 1: tensorflow.data.WorkerUpdateRequest.updates:type_name -> tensorflow.data.TaskProgress
	31, // 2: tensorflow.data.GetDatasetDefResponse.dataset_def:type_name -> tensorflow.data.DatasetDef
	32, // 3: tensorflow.data.GetSplitResponse.split:type_name -> tensorflow.TensorProto
	31, // 4: tensorflow.data.GetOrRegisterDatasetRequest.dataset:type_name -> tensorflow.data.DatasetDef
	33, // 5: tensorflow.data.GetOrRegisterDatasetRequest.metadata:type_name -> tensorflow.data.DataServiceMetadata
	33, // 6: tensorflow.data.GetDataServiceMetadataResponse.metadata:type_name -> tensorflow.data.DataServiceMetadata
	34, // 7: tensorflow.data.GetDataServiceConfigResponse.config:type_name -> tensorflow.data.DataServiceConfig
	35, // 8: tensorflow.data.GetOrCreateJobRequest.processing_mode_def:type_name -> tensorflow.data.ProcessingModeDef
	36, // 9: tensorflow.data.GetOrCreateJobRequest.target_workers:type_name -> tensorflow.data.TargetWorkers
	37, // 10: tensorflow.data.ClientHeartbeatResponse.task_info:type_name -> tensorflow.data.TaskInfo
	38, // 11: tensorflow.data.ClientHeartbeatResponse.deployment_mode:type_name -> tensorflow.data.DeploymentMode
	27, // 12: tensorflow.data.GetWorkersResponse.workers:type_name -> tensorflow.data.WorkerInfo
	1,  // 13: tensorflow.data.DispatcherService.WorkerHeartbeat:input_type -> tensorflow.data.WorkerHeartbeatRequest
	3,  // 14: tensorflow.data.DispatcherService.WorkerUpdate:input_type -> tensorflow.data.WorkerUpdateRequest
	5,  // 15: tensorflow.data.DispatcherService.GetDatasetDef:input_type -> tensorflow.data.GetDatasetDefRequest
	7,  // 16: tensorflow.data.DispatcherService.GetSplit:input_type -> tensorflow.data.GetSplitRequest
	9,  // 17: tensorflow.data.DispatcherService.GetVersion:input_type -> tensorflow.data.GetVersionRequest
	11, // 18: tensorflow.data.DispatcherService.GetOrRegisterDataset:input_type -> tensorflow.data.GetOrRegisterDatasetRequest
	17, // 19: tensorflow.data.DispatcherService.GetOrCreateJob:input_type -> tensorflow.data.GetOrCreateJobRequest
	19, // 20: tensorflow.data.DispatcherService.GetOrCreateIteration:input_type -> tensorflow.data.GetOrCreateIterationRequest
	21, // 21: tensorflow.data.DispatcherService.MaybeRemoveTask:input_type -> tensorflow.data.MaybeRemoveTaskRequest
	23, // 22: tensorflow.data.DispatcherService.ReleaseIterationClient:input_type -> tensorflow.data.ReleaseIterationClientRequest
	25, // 23: tensorflow.data.DispatcherService.ClientHeartbeat:input_type -> tensorflow.data.ClientHeartbeatRequest
	28, // 24: tensorflow.data.DispatcherService.GetWorkers:input_type -> tensorflow.data.GetWorkersRequest
	13, // 25: tensorflow.data.DispatcherService.GetDataServiceMetadata:input_type -> tensorflow.data.GetDataServiceMetadataRequest
	15, // 26: tensorflow.data.DispatcherService.GetDataServiceConfig:input_type -> tensorflow.data.GetDataServiceConfigRequest
	2,  // 27: tensorflow.data.DispatcherService.WorkerHeartbeat:output_type -> tensorflow.data.WorkerHeartbeatResponse
	4,  // 28: tensorflow.data.DispatcherService.WorkerUpdate:output_type -> tensorflow.data.WorkerUpdateResponse
	6,  // 29: tensorflow.data.DispatcherService.GetDatasetDef:output_type -> tensorflow.data.GetDatasetDefResponse
	8,  // 30: tensorflow.data.DispatcherService.GetSplit:output_type -> tensorflow.data.GetSplitResponse
	10, // 31: tensorflow.data.DispatcherService.GetVersion:output_type -> tensorflow.data.GetVersionResponse
	12, // 32: tensorflow.data.DispatcherService.GetOrRegisterDataset:output_type -> tensorflow.data.GetOrRegisterDatasetResponse
	18, // 33: tensorflow.data.DispatcherService.GetOrCreateJob:output_type -> tensorflow.data.GetOrCreateJobResponse
	20, // 34: tensorflow.data.DispatcherService.GetOrCreateIteration:output_type -> tensorflow.data.GetOrCreateIterationResponse
	22, // 35: tensorflow.data.DispatcherService.MaybeRemoveTask:output_type -> tensorflow.data.MaybeRemoveTaskResponse
	24, // 36: tensorflow.data.DispatcherService.ReleaseIterationClient:output_type -> tensorflow.data.ReleaseIterationClientResponse
	26, // 37: tensorflow.data.DispatcherService.ClientHeartbeat:output_type -> tensorflow.data.ClientHeartbeatResponse
	29, // 38: tensorflow.data.DispatcherService.GetWorkers:output_type -> tensorflow.data.GetWorkersResponse
	14, // 39: tensorflow.data.DispatcherService.GetDataServiceMetadata:output_type -> tensorflow.data.GetDataServiceMetadataResponse
	16, // 40: tensorflow.data.DispatcherService.GetDataServiceConfig:output_type -> tensorflow.data.GetDataServiceConfigResponse
	27, // [27:41] is the sub-list for method output_type
	13, // [13:27] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_tensorflow_core_data_service_dispatcher_proto_init() }
func file_tensorflow_core_data_service_dispatcher_proto_init() {
	if File_tensorflow_core_data_service_dispatcher_proto != nil {
		return
	}
	file_tensorflow_core_data_service_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_tensorflow_core_data_service_dispatcher_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskProgress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_data_service_dispatcher_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkerHeartbeatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_data_service_dispatcher_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkerHeartbeatResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_data_service_dispatcher_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkerUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_data_service_dispatcher_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkerUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_data_service_dispatcher_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDatasetDefRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_data_service_dispatcher_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDatasetDefResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_data_service_dispatcher_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSplitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_data_service_dispatcher_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSplitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_data_service_dispatcher_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVersionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_data_service_dispatcher_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_data_service_dispatcher_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrRegisterDatasetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_data_service_dispatcher_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrRegisterDatasetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_data_service_dispatcher_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDataServiceMetadataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_data_service_dispatcher_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDataServiceMetadataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_data_service_dispatcher_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDataServiceConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_data_service_dispatcher_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDataServiceConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_data_service_dispatcher_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrCreateJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_data_service_dispatcher_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrCreateJobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_data_service_dispatcher_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrCreateIterationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_data_service_dispatcher_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrCreateIterationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_data_service_dispatcher_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaybeRemoveTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_data_service_dispatcher_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaybeRemoveTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_data_service_dispatcher_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseIterationClientRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_data_service_dispatcher_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseIterationClientResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_data_service_dispatcher_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientHeartbeatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_data_service_dispatcher_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientHeartbeatResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_data_service_dispatcher_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_data_service_dispatcher_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWorkersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_data_service_dispatcher_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWorkersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_tensorflow_core_data_service_dispatcher_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*GetOrRegisterDatasetRequest_DatasetId)(nil),
	}
	file_tensorflow_core_data_service_dispatcher_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*GetOrCreateJobRequest_JobName)(nil),
		(*GetOrCreateJobRequest_NumConsumers)(nil),
	}
	file_tensorflow_core_data_service_dispatcher_proto_msgTypes[25].OneofWrappers = []interface{}{
		(*ClientHeartbeatRequest_CurrentRound)(nil),
		(*ClientHeartbeatRequest_BlockedRound)(nil),
	}
	file_tensorflow_core_data_service_dispatcher_proto_msgTypes[26].OneofWrappers = []interface{}{
		(*ClientHeartbeatResponse_BlockRound)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tensorflow_core_data_service_dispatcher_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tensorflow_core_data_service_dispatcher_proto_goTypes,
		DependencyIndexes: file_tensorflow_core_data_service_dispatcher_proto_depIdxs,
		MessageInfos:      file_tensorflow_core_data_service_dispatcher_proto_msgTypes,
	}.Build()
	File_tensorflow_core_data_service_dispatcher_proto = out.File
	file_tensorflow_core_data_service_dispatcher_proto_rawDesc = nil
	file_tensorflow_core_data_service_dispatcher_proto_goTypes = nil
	file_tensorflow_core_data_service_dispatcher_proto_depIdxs = nil
}
