// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: tensorflow/core/data/service/worker.proto

package service

import (
	framework "gitee.com/qciip-icp/tf-serving/tensorflow/core/framework"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ProcessTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Task *TaskDef `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
}

func (x *ProcessTaskRequest) Reset() {
	*x = ProcessTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_data_service_worker_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessTaskRequest) ProtoMessage() {}

func (x *ProcessTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_data_service_worker_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessTaskRequest.ProtoReflect.Descriptor instead.
func (*ProcessTaskRequest) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_data_service_worker_proto_rawDescGZIP(), []int{0}
}

func (x *ProcessTaskRequest) GetTask() *TaskDef {
	if x != nil {
		return x.Task
	}
	return nil
}

type ProcessTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ProcessTaskResponse) Reset() {
	*x = ProcessTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_data_service_worker_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessTaskResponse) ProtoMessage() {}

func (x *ProcessTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_data_service_worker_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessTaskResponse.ProtoReflect.Descriptor instead.
func (*ProcessTaskResponse) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_data_service_worker_proto_rawDescGZIP(), []int{1}
}

type GetElementRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The task to fetch an element from.
	TaskId int64 `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// Optional index to identify the consumer.
	//
	// Types that are assignable to OptionalConsumerIndex:
	//
	//	*GetElementRequest_ConsumerIndex
	OptionalConsumerIndex isGetElementRequest_OptionalConsumerIndex `protobuf_oneof:"optional_consumer_index"`
	// Optional round index, indicating which round of round-robin the consumer
	// wants to read from. This is used to keep consumers in sync.
	//
	// Types that are assignable to OptionalRoundIndex:
	//
	//	*GetElementRequest_RoundIndex
	OptionalRoundIndex isGetElementRequest_OptionalRoundIndex `protobuf_oneof:"optional_round_index"`
	// Whether the previous round was skipped. This information is needed by the
	// worker to recover after restarts.
	SkippedPreviousRound bool `protobuf:"varint,4,opt,name=skipped_previous_round,json=skippedPreviousRound,proto3" json:"skipped_previous_round,omitempty"`
	// Whether to skip the round if data isn't ready fast enough.
	AllowSkip bool `protobuf:"varint,5,opt,name=allow_skip,json=allowSkip,proto3" json:"allow_skip,omitempty"`
	// The trainer ID used to read elements from a multi-trainer cache. This cache
	// enables sharing data across concurrent training iterations. If set, this
	// request will read the data requested by other trainers, if available.
	TrainerId string `protobuf:"bytes,6,opt,name=trainer_id,json=trainerId,proto3" json:"trainer_id,omitempty"`
}

func (x *GetElementRequest) Reset() {
	*x = GetElementRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_data_service_worker_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetElementRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetElementRequest) ProtoMessage() {}

func (x *GetElementRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_data_service_worker_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetElementRequest.ProtoReflect.Descriptor instead.
func (*GetElementRequest) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_data_service_worker_proto_rawDescGZIP(), []int{2}
}

func (x *GetElementRequest) GetTaskId() int64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (m *GetElementRequest) GetOptionalConsumerIndex() isGetElementRequest_OptionalConsumerIndex {
	if m != nil {
		return m.OptionalConsumerIndex
	}
	return nil
}

func (x *GetElementRequest) GetConsumerIndex() int64 {
	if x, ok := x.GetOptionalConsumerIndex().(*GetElementRequest_ConsumerIndex); ok {
		return x.ConsumerIndex
	}
	return 0
}

func (m *GetElementRequest) GetOptionalRoundIndex() isGetElementRequest_OptionalRoundIndex {
	if m != nil {
		return m.OptionalRoundIndex
	}
	return nil
}

func (x *GetElementRequest) GetRoundIndex() int64 {
	if x, ok := x.GetOptionalRoundIndex().(*GetElementRequest_RoundIndex); ok {
		return x.RoundIndex
	}
	return 0
}

func (x *GetElementRequest) GetSkippedPreviousRound() bool {
	if x != nil {
		return x.SkippedPreviousRound
	}
	return false
}

func (x *GetElementRequest) GetAllowSkip() bool {
	if x != nil {
		return x.AllowSkip
	}
	return false
}

func (x *GetElementRequest) GetTrainerId() string {
	if x != nil {
		return x.TrainerId
	}
	return ""
}

type isGetElementRequest_OptionalConsumerIndex interface {
	isGetElementRequest_OptionalConsumerIndex()
}

type GetElementRequest_ConsumerIndex struct {
	ConsumerIndex int64 `protobuf:"varint,2,opt,name=consumer_index,json=consumerIndex,proto3,oneof"`
}

func (*GetElementRequest_ConsumerIndex) isGetElementRequest_OptionalConsumerIndex() {}

type isGetElementRequest_OptionalRoundIndex interface {
	isGetElementRequest_OptionalRoundIndex()
}

type GetElementRequest_RoundIndex struct {
	RoundIndex int64 `protobuf:"varint,3,opt,name=round_index,json=roundIndex,proto3,oneof"`
}

func (*GetElementRequest_RoundIndex) isGetElementRequest_OptionalRoundIndex() {}

type GetElementResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The produced element.
	//
	// Types that are assignable to Element:
	//
	//	*GetElementResponse_Compressed
	//	*GetElementResponse_Uncompressed
	Element isGetElementResponse_Element `protobuf_oneof:"element"`
	// The element's index within the task it came from.
	ElementIndex int64 `protobuf:"varint,6,opt,name=element_index,json=elementIndex,proto3" json:"element_index,omitempty"`
	// Boolean to indicate whether the iterator has been exhausted.
	EndOfSequence bool `protobuf:"varint,2,opt,name=end_of_sequence,json=endOfSequence,proto3" json:"end_of_sequence,omitempty"`
	// Indicates whether the round was skipped.
	SkipTask bool `protobuf:"varint,4,opt,name=skip_task,json=skipTask,proto3" json:"skip_task,omitempty"`
}

func (x *GetElementResponse) Reset() {
	*x = GetElementResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_data_service_worker_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetElementResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetElementResponse) ProtoMessage() {}

func (x *GetElementResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_data_service_worker_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetElementResponse.ProtoReflect.Descriptor instead.
func (*GetElementResponse) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_data_service_worker_proto_rawDescGZIP(), []int{3}
}

func (m *GetElementResponse) GetElement() isGetElementResponse_Element {
	if m != nil {
		return m.Element
	}
	return nil
}

func (x *GetElementResponse) GetCompressed() *framework.CompressedElement {
	if x, ok := x.GetElement().(*GetElementResponse_Compressed); ok {
		return x.Compressed
	}
	return nil
}

func (x *GetElementResponse) GetUncompressed() *framework.UncompressedElement {
	if x, ok := x.GetElement().(*GetElementResponse_Uncompressed); ok {
		return x.Uncompressed
	}
	return nil
}

func (x *GetElementResponse) GetElementIndex() int64 {
	if x != nil {
		return x.ElementIndex
	}
	return 0
}

func (x *GetElementResponse) GetEndOfSequence() bool {
	if x != nil {
		return x.EndOfSequence
	}
	return false
}

func (x *GetElementResponse) GetSkipTask() bool {
	if x != nil {
		return x.SkipTask
	}
	return false
}

type isGetElementResponse_Element interface {
	isGetElementResponse_Element()
}

type GetElementResponse_Compressed struct {
	Compressed *framework.CompressedElement `protobuf:"bytes,3,opt,name=compressed,proto3,oneof"`
}

type GetElementResponse_Uncompressed struct {
	Uncompressed *framework.UncompressedElement `protobuf:"bytes,5,opt,name=uncompressed,proto3,oneof"`
}

func (*GetElementResponse_Compressed) isGetElementResponse_Element() {}

func (*GetElementResponse_Uncompressed) isGetElementResponse_Element() {}

// Named GetWorkerTasks to avoid conflicting with GetTasks in dispatcher.proto
type GetWorkerTasksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetWorkerTasksRequest) Reset() {
	*x = GetWorkerTasksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_data_service_worker_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkerTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkerTasksRequest) ProtoMessage() {}

func (x *GetWorkerTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_data_service_worker_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkerTasksRequest.ProtoReflect.Descriptor instead.
func (*GetWorkerTasksRequest) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_data_service_worker_proto_rawDescGZIP(), []int{4}
}

type GetWorkerTasksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tasks []*TaskInfo `protobuf:"bytes,1,rep,name=tasks,proto3" json:"tasks,omitempty"`
}

func (x *GetWorkerTasksResponse) Reset() {
	*x = GetWorkerTasksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_data_service_worker_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWorkerTasksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkerTasksResponse) ProtoMessage() {}

func (x *GetWorkerTasksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_data_service_worker_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkerTasksResponse.ProtoReflect.Descriptor instead.
func (*GetWorkerTasksResponse) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_data_service_worker_proto_rawDescGZIP(), []int{5}
}

func (x *GetWorkerTasksResponse) GetTasks() []*TaskInfo {
	if x != nil {
		return x.Tasks
	}
	return nil
}

var File_tensorflow_core_data_service_worker_proto protoreflect.FileDescriptor

var file_tensorflow_core_data_service_worker_proto_rawDesc = []byte{
	0x0a, 0x29, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x77,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x74, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x29, 0x74, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x64, 0x61,
	0x74, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66,
	0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f,
	0x72, 0x6b, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x42, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x52, 0x04,
	0x74, 0x61, 0x73, 0x6b, 0x22, 0x15, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9f, 0x02, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0e, 0x63, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x21, 0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65,
	0x64, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x50,
	0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x6b, 0x69, 0x70, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x42, 0x19, 0x0a, 0x17, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x16, 0x0a, 0x14, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x9b, 0x02,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x64, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a,
	0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x4a, 0x0a, 0x0c, 0x75, 0x6e,
	0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x55, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x75, 0x6e, 0x63, 0x6f, 0x6d, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x26, 0x0a, 0x0f, 0x65,
	0x6e, 0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x65, 0x6e, 0x64, 0x4f, 0x66, 0x53, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x74, 0x61, 0x73, 0x6b,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x6b, 0x69, 0x70, 0x54, 0x61, 0x73, 0x6b,
	0x42, 0x09, 0x0a, 0x07, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x17, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x49, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f,
	0x0a, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x32,
	0xa3, 0x02, 0x0a, 0x0d, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x58, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x61, 0x73, 0x6b,
	0x12, 0x23, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x0a, 0x47,
	0x65, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x2e, 0x74, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e,
	0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x47, 0x65, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x61, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x54,
	0x61, 0x73, 0x6b, 0x73, 0x12, 0x26, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x74,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47,
	0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0xbe, 0x01, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x42, 0x0b, 0x57,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x02, 0x50, 0x01, 0x5a, 0x3b,
	0x67, 0x69, 0x74, 0x65, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x71, 0x63, 0x69, 0x69, 0x70, 0x2d,
	0x69, 0x63, 0x70, 0x2f, 0x74, 0x66, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2f, 0x74,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0xa2, 0x02, 0x03, 0x54, 0x44,
	0x58, 0xaa, 0x02, 0x0f, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0xca, 0x02, 0x0f, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77,
	0x5c, 0x44, 0x61, 0x74, 0x61, 0xe2, 0x02, 0x1b, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c,
	0x6f, 0x77, 0x5c, 0x44, 0x61, 0x74, 0x61, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xea, 0x02, 0x10, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77,
	0x3a, 0x3a, 0x44, 0x61, 0x74, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tensorflow_core_data_service_worker_proto_rawDescOnce sync.Once
	file_tensorflow_core_data_service_worker_proto_rawDescData = file_tensorflow_core_data_service_worker_proto_rawDesc
)

func file_tensorflow_core_data_service_worker_proto_rawDescGZIP() []byte {
	file_tensorflow_core_data_service_worker_proto_rawDescOnce.Do(func() {
		file_tensorflow_core_data_service_worker_proto_rawDescData = protoimpl.X.CompressGZIP(file_tensorflow_core_data_service_worker_proto_rawDescData)
	})
	return file_tensorflow_core_data_service_worker_proto_rawDescData
}

var file_tensorflow_core_data_service_worker_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_tensorflow_core_data_service_worker_proto_goTypes = []interface{}{
	(*ProcessTaskRequest)(nil),            // 0: tensorflow.data.ProcessTaskRequest
	(*ProcessTaskResponse)(nil),           // 1: tensorflow.data.ProcessTaskResponse
	(*GetElementRequest)(nil),             // 2: tensorflow.data.GetElementRequest
	(*GetElementResponse)(nil),            // 3: tensorflow.data.GetElementResponse
	(*GetWorkerTasksRequest)(nil),         // 4: tensorflow.data.GetWorkerTasksRequest
	(*GetWorkerTasksResponse)(nil),        // 5: tensorflow.data.GetWorkerTasksResponse
	(*TaskDef)(nil),                       // 6: tensorflow.data.TaskDef
	(*framework.CompressedElement)(nil),   // 7: tensorflow.data.CompressedElement
	(*framework.UncompressedElement)(nil), // 8: tensorflow.data.UncompressedElement
	(*TaskInfo)(nil),                      // 9: tensorflow.data.TaskInfo
}
var file_tensorflow_core_data_service_worker_proto_depIdxs = []int32{
	6, // 0: tensorflow.data.ProcessTaskRequest.task:type_name -> tensorflow.data.TaskDef
	7, // 1: tensorflow.data.GetElementResponse.compressed:type_name -> tensorflow.data.CompressedElement
	8, // 2: tensorflow.data.GetElementResponse.uncompressed:type_name -> tensorflow.data.UncompressedElement
	9, // 3: tensorflow.data.GetWorkerTasksResponse.tasks:type_name -> tensorflow.data.TaskInfo
	0, // 4: tensorflow.data.WorkerService.ProcessTask:input_type -> tensorflow.data.ProcessTaskRequest
	2, // 5: tensorflow.data.WorkerService.GetElement:input_type -> tensorflow.data.GetElementRequest
	4, // 6: tensorflow.data.WorkerService.GetWorkerTasks:input_type -> tensorflow.data.GetWorkerTasksRequest
	1, // 7: tensorflow.data.WorkerService.ProcessTask:output_type -> tensorflow.data.ProcessTaskResponse
	3, // 8: tensorflow.data.WorkerService.GetElement:output_type -> tensorflow.data.GetElementResponse
	5, // 9: tensorflow.data.WorkerService.GetWorkerTasks:output_type -> tensorflow.data.GetWorkerTasksResponse
	7, // [7:10] is the sub-list for method output_type
	4, // [4:7] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_tensorflow_core_data_service_worker_proto_init() }
func file_tensorflow_core_data_service_worker_proto_init() {
	if File_tensorflow_core_data_service_worker_proto != nil {
		return
	}
	file_tensorflow_core_data_service_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_tensorflow_core_data_service_worker_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_data_service_worker_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_data_service_worker_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetElementRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_data_service_worker_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetElementResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_data_service_worker_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWorkerTasksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_data_service_worker_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWorkerTasksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_tensorflow_core_data_service_worker_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*GetElementRequest_ConsumerIndex)(nil),
		(*GetElementRequest_RoundIndex)(nil),
	}
	file_tensorflow_core_data_service_worker_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*GetElementResponse_Compressed)(nil),
		(*GetElementResponse_Uncompressed)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tensorflow_core_data_service_worker_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tensorflow_core_data_service_worker_proto_goTypes,
		DependencyIndexes: file_tensorflow_core_data_service_worker_proto_depIdxs,
		MessageInfos:      file_tensorflow_core_data_service_worker_proto_msgTypes,
	}.Build()
	File_tensorflow_core_data_service_worker_proto = out.File
	file_tensorflow_core_data_service_worker_proto_rawDesc = nil
	file_tensorflow_core_data_service_worker_proto_goTypes = nil
	file_tensorflow_core_data_service_worker_proto_depIdxs = nil
}
