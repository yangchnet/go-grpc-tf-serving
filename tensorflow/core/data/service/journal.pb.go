// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: tensorflow/core/data/service/journal.proto

package service

import (
	protobuf "gitee.com/qciip-icp/tf-serving/tensorflow/core/protobuf"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Message representing journaled dispatcher metadata updates. When we apply
// one of these changes to the dispatcher's in-memory state, we also write an
// Update message to the journal.
// Next tag: 15
type Update struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to UpdateType:
	//
	//	*Update_RegisterDataset
	//	*Update_RegisterWorker
	//	*Update_CreateJob
	//	*Update_CreateIteration
	//	*Update_ProduceSplit
	//	*Update_AcquireIterationClient
	//	*Update_ReleaseIterationClient
	//	*Update_GarbageCollectIteration
	//	*Update_RemoveTask
	//	*Update_CreatePendingTask
	//	*Update_ClientHeartbeat
	//	*Update_CreateTask
	//	*Update_FinishTask
	UpdateType isUpdate_UpdateType `protobuf_oneof:"update_type"`
}

func (x *Update) Reset() {
	*x = Update{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_data_service_journal_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Update) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Update) ProtoMessage() {}

func (x *Update) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_data_service_journal_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Update.ProtoReflect.Descriptor instead.
func (*Update) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_data_service_journal_proto_rawDescGZIP(), []int{0}
}

func (m *Update) GetUpdateType() isUpdate_UpdateType {
	if m != nil {
		return m.UpdateType
	}
	return nil
}

func (x *Update) GetRegisterDataset() *RegisterDatasetUpdate {
	if x, ok := x.GetUpdateType().(*Update_RegisterDataset); ok {
		return x.RegisterDataset
	}
	return nil
}

func (x *Update) GetRegisterWorker() *RegisterWorkerUpdate {
	if x, ok := x.GetUpdateType().(*Update_RegisterWorker); ok {
		return x.RegisterWorker
	}
	return nil
}

func (x *Update) GetCreateJob() *CreateJobUpdate {
	if x, ok := x.GetUpdateType().(*Update_CreateJob); ok {
		return x.CreateJob
	}
	return nil
}

func (x *Update) GetCreateIteration() *CreateIterationUpdate {
	if x, ok := x.GetUpdateType().(*Update_CreateIteration); ok {
		return x.CreateIteration
	}
	return nil
}

func (x *Update) GetProduceSplit() *ProduceSplitUpdate {
	if x, ok := x.GetUpdateType().(*Update_ProduceSplit); ok {
		return x.ProduceSplit
	}
	return nil
}

func (x *Update) GetAcquireIterationClient() *AcquireIterationClientUpdate {
	if x, ok := x.GetUpdateType().(*Update_AcquireIterationClient); ok {
		return x.AcquireIterationClient
	}
	return nil
}

func (x *Update) GetReleaseIterationClient() *ReleaseIterationClientUpdate {
	if x, ok := x.GetUpdateType().(*Update_ReleaseIterationClient); ok {
		return x.ReleaseIterationClient
	}
	return nil
}

func (x *Update) GetGarbageCollectIteration() *GarbageCollectIterationUpdate {
	if x, ok := x.GetUpdateType().(*Update_GarbageCollectIteration); ok {
		return x.GarbageCollectIteration
	}
	return nil
}

func (x *Update) GetRemoveTask() *RemoveTaskUpdate {
	if x, ok := x.GetUpdateType().(*Update_RemoveTask); ok {
		return x.RemoveTask
	}
	return nil
}

func (x *Update) GetCreatePendingTask() *CreatePendingTaskUpdate {
	if x, ok := x.GetUpdateType().(*Update_CreatePendingTask); ok {
		return x.CreatePendingTask
	}
	return nil
}

func (x *Update) GetClientHeartbeat() *ClientHeartbeatUpdate {
	if x, ok := x.GetUpdateType().(*Update_ClientHeartbeat); ok {
		return x.ClientHeartbeat
	}
	return nil
}

func (x *Update) GetCreateTask() *CreateTaskUpdate {
	if x, ok := x.GetUpdateType().(*Update_CreateTask); ok {
		return x.CreateTask
	}
	return nil
}

func (x *Update) GetFinishTask() *FinishTaskUpdate {
	if x, ok := x.GetUpdateType().(*Update_FinishTask); ok {
		return x.FinishTask
	}
	return nil
}

type isUpdate_UpdateType interface {
	isUpdate_UpdateType()
}

type Update_RegisterDataset struct {
	RegisterDataset *RegisterDatasetUpdate `protobuf:"bytes,1,opt,name=register_dataset,json=registerDataset,proto3,oneof"`
}

type Update_RegisterWorker struct {
	RegisterWorker *RegisterWorkerUpdate `protobuf:"bytes,5,opt,name=register_worker,json=registerWorker,proto3,oneof"`
}

type Update_CreateJob struct {
	CreateJob *CreateJobUpdate `protobuf:"bytes,14,opt,name=create_job,json=createJob,proto3,oneof"`
}

type Update_CreateIteration struct {
	CreateIteration *CreateIterationUpdate `protobuf:"bytes,2,opt,name=create_iteration,json=createIteration,proto3,oneof"`
}

type Update_ProduceSplit struct {
	ProduceSplit *ProduceSplitUpdate `protobuf:"bytes,8,opt,name=produce_split,json=produceSplit,proto3,oneof"`
}

type Update_AcquireIterationClient struct {
	AcquireIterationClient *AcquireIterationClientUpdate `protobuf:"bytes,6,opt,name=acquire_iteration_client,json=acquireIterationClient,proto3,oneof"`
}

type Update_ReleaseIterationClient struct {
	ReleaseIterationClient *ReleaseIterationClientUpdate `protobuf:"bytes,7,opt,name=release_iteration_client,json=releaseIterationClient,proto3,oneof"`
}

type Update_GarbageCollectIteration struct {
	GarbageCollectIteration *GarbageCollectIterationUpdate `protobuf:"bytes,12,opt,name=garbage_collect_iteration,json=garbageCollectIteration,proto3,oneof"`
}

type Update_RemoveTask struct {
	RemoveTask *RemoveTaskUpdate `protobuf:"bytes,11,opt,name=remove_task,json=removeTask,proto3,oneof"`
}

type Update_CreatePendingTask struct {
	CreatePendingTask *CreatePendingTaskUpdate `protobuf:"bytes,9,opt,name=create_pending_task,json=createPendingTask,proto3,oneof"`
}

type Update_ClientHeartbeat struct {
	ClientHeartbeat *ClientHeartbeatUpdate `protobuf:"bytes,10,opt,name=client_heartbeat,json=clientHeartbeat,proto3,oneof"`
}

type Update_CreateTask struct {
	CreateTask *CreateTaskUpdate `protobuf:"bytes,3,opt,name=create_task,json=createTask,proto3,oneof"`
}

type Update_FinishTask struct {
	FinishTask *FinishTaskUpdate `protobuf:"bytes,4,opt,name=finish_task,json=finishTask,proto3,oneof"`
}

func (*Update_RegisterDataset) isUpdate_UpdateType() {}

func (*Update_RegisterWorker) isUpdate_UpdateType() {}

func (*Update_CreateJob) isUpdate_UpdateType() {}

func (*Update_CreateIteration) isUpdate_UpdateType() {}

func (*Update_ProduceSplit) isUpdate_UpdateType() {}

func (*Update_AcquireIterationClient) isUpdate_UpdateType() {}

func (*Update_ReleaseIterationClient) isUpdate_UpdateType() {}

func (*Update_GarbageCollectIteration) isUpdate_UpdateType() {}

func (*Update_RemoveTask) isUpdate_UpdateType() {}

func (*Update_CreatePendingTask) isUpdate_UpdateType() {}

func (*Update_ClientHeartbeat) isUpdate_UpdateType() {}

func (*Update_CreateTask) isUpdate_UpdateType() {}

func (*Update_FinishTask) isUpdate_UpdateType() {}

// Next tag: 5
type RegisterDatasetUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetId         string                        `protobuf:"bytes,1,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	Fingerprint       uint64                        `protobuf:"varint,2,opt,name=fingerprint,proto3" json:"fingerprint,omitempty"`
	Metadata          *protobuf.DataServiceMetadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	DedupeByDatasetId bool                          `protobuf:"varint,4,opt,name=dedupe_by_dataset_id,json=dedupeByDatasetId,proto3" json:"dedupe_by_dataset_id,omitempty"`
}

func (x *RegisterDatasetUpdate) Reset() {
	*x = RegisterDatasetUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_data_service_journal_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterDatasetUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterDatasetUpdate) ProtoMessage() {}

func (x *RegisterDatasetUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_data_service_journal_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterDatasetUpdate.ProtoReflect.Descriptor instead.
func (*RegisterDatasetUpdate) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_data_service_journal_proto_rawDescGZIP(), []int{1}
}

func (x *RegisterDatasetUpdate) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

func (x *RegisterDatasetUpdate) GetFingerprint() uint64 {
	if x != nil {
		return x.Fingerprint
	}
	return 0
}

func (x *RegisterDatasetUpdate) GetMetadata() *protobuf.DataServiceMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *RegisterDatasetUpdate) GetDedupeByDatasetId() bool {
	if x != nil {
		return x.DedupeByDatasetId
	}
	return false
}

// Next tag: 5
type RegisterWorkerUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkerAddress   string   `protobuf:"bytes,1,opt,name=worker_address,json=workerAddress,proto3" json:"worker_address,omitempty"`
	TransferAddress string   `protobuf:"bytes,2,opt,name=transfer_address,json=transferAddress,proto3" json:"transfer_address,omitempty"`
	WorkerTags      []string `protobuf:"bytes,3,rep,name=worker_tags,json=workerTags,proto3" json:"worker_tags,omitempty"`
	WorkerUid       int64    `protobuf:"varint,4,opt,name=worker_uid,json=workerUid,proto3" json:"worker_uid,omitempty"`
}

func (x *RegisterWorkerUpdate) Reset() {
	*x = RegisterWorkerUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_data_service_journal_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterWorkerUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterWorkerUpdate) ProtoMessage() {}

func (x *RegisterWorkerUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_data_service_journal_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterWorkerUpdate.ProtoReflect.Descriptor instead.
func (*RegisterWorkerUpdate) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_data_service_journal_proto_rawDescGZIP(), []int{2}
}

func (x *RegisterWorkerUpdate) GetWorkerAddress() string {
	if x != nil {
		return x.WorkerAddress
	}
	return ""
}

func (x *RegisterWorkerUpdate) GetTransferAddress() string {
	if x != nil {
		return x.TransferAddress
	}
	return ""
}

func (x *RegisterWorkerUpdate) GetWorkerTags() []string {
	if x != nil {
		return x.WorkerTags
	}
	return nil
}

func (x *RegisterWorkerUpdate) GetWorkerUid() int64 {
	if x != nil {
		return x.WorkerUid
	}
	return 0
}

// Next tag: 9
type CreateJobUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId             int64                       `protobuf:"varint,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	JobName           string                      `protobuf:"bytes,2,opt,name=job_name,json=jobName,proto3" json:"job_name,omitempty"`
	DatasetId         string                      `protobuf:"bytes,3,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	ProcessingModeDef *protobuf.ProcessingModeDef `protobuf:"bytes,4,opt,name=processing_mode_def,json=processingModeDef,proto3" json:"processing_mode_def,omitempty"`
	// Optional number of consumers. If set, the iteration's tasks will provide
	// their elements to consumers round-robin.
	//
	// Types that are assignable to OptionalNumConsumers:
	//
	//	*CreateJobUpdate_NumConsumers
	OptionalNumConsumers isCreateJobUpdate_OptionalNumConsumers `protobuf_oneof:"optional_num_consumers"`
	// Specifies which workers the client of this iteration reads from.
	TargetWorkers TargetWorkers `protobuf:"varint,7,opt,name=target_workers,json=targetWorkers,proto3,enum=tensorflow.data.TargetWorkers" json:"target_workers,omitempty"`
	// True if cross-trainer cache is enabled.
	UseCrossTrainerCache bool `protobuf:"varint,8,opt,name=use_cross_trainer_cache,json=useCrossTrainerCache,proto3" json:"use_cross_trainer_cache,omitempty"`
}

func (x *CreateJobUpdate) Reset() {
	*x = CreateJobUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_data_service_journal_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateJobUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateJobUpdate) ProtoMessage() {}

func (x *CreateJobUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_data_service_journal_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateJobUpdate.ProtoReflect.Descriptor instead.
func (*CreateJobUpdate) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_data_service_journal_proto_rawDescGZIP(), []int{3}
}

func (x *CreateJobUpdate) GetJobId() int64 {
	if x != nil {
		return x.JobId
	}
	return 0
}

func (x *CreateJobUpdate) GetJobName() string {
	if x != nil {
		return x.JobName
	}
	return ""
}

func (x *CreateJobUpdate) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

func (x *CreateJobUpdate) GetProcessingModeDef() *protobuf.ProcessingModeDef {
	if x != nil {
		return x.ProcessingModeDef
	}
	return nil
}

func (m *CreateJobUpdate) GetOptionalNumConsumers() isCreateJobUpdate_OptionalNumConsumers {
	if m != nil {
		return m.OptionalNumConsumers
	}
	return nil
}

func (x *CreateJobUpdate) GetNumConsumers() int64 {
	if x, ok := x.GetOptionalNumConsumers().(*CreateJobUpdate_NumConsumers); ok {
		return x.NumConsumers
	}
	return 0
}

func (x *CreateJobUpdate) GetTargetWorkers() TargetWorkers {
	if x != nil {
		return x.TargetWorkers
	}
	return TargetWorkers_TARGET_WORKERS_UNSPECIFIED
}

func (x *CreateJobUpdate) GetUseCrossTrainerCache() bool {
	if x != nil {
		return x.UseCrossTrainerCache
	}
	return false
}

type isCreateJobUpdate_OptionalNumConsumers interface {
	isCreateJobUpdate_OptionalNumConsumers()
}

type CreateJobUpdate_NumConsumers struct {
	NumConsumers int64 `protobuf:"varint,6,opt,name=num_consumers,json=numConsumers,proto3,oneof"`
}

func (*CreateJobUpdate_NumConsumers) isCreateJobUpdate_OptionalNumConsumers() {}

// Next tag: 5
type CreateIterationUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IterationId       int64 `protobuf:"varint,1,opt,name=iteration_id,json=iterationId,proto3" json:"iteration_id,omitempty"`
	JobId             int64 `protobuf:"varint,2,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	Repetition        int64 `protobuf:"varint,3,opt,name=repetition,proto3" json:"repetition,omitempty"`
	NumSplitProviders int64 `protobuf:"varint,4,opt,name=num_split_providers,json=numSplitProviders,proto3" json:"num_split_providers,omitempty"`
}

func (x *CreateIterationUpdate) Reset() {
	*x = CreateIterationUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_data_service_journal_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateIterationUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIterationUpdate) ProtoMessage() {}

func (x *CreateIterationUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_data_service_journal_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIterationUpdate.ProtoReflect.Descriptor instead.
func (*CreateIterationUpdate) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_data_service_journal_proto_rawDescGZIP(), []int{4}
}

func (x *CreateIterationUpdate) GetIterationId() int64 {
	if x != nil {
		return x.IterationId
	}
	return 0
}

func (x *CreateIterationUpdate) GetJobId() int64 {
	if x != nil {
		return x.JobId
	}
	return 0
}

func (x *CreateIterationUpdate) GetRepetition() int64 {
	if x != nil {
		return x.Repetition
	}
	return 0
}

func (x *CreateIterationUpdate) GetNumSplitProviders() int64 {
	if x != nil {
		return x.NumSplitProviders
	}
	return 0
}

// Next tag: 5
type ProduceSplitUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IterationId        int64 `protobuf:"varint,1,opt,name=iteration_id,json=iterationId,proto3" json:"iteration_id,omitempty"`
	Repetition         int64 `protobuf:"varint,2,opt,name=repetition,proto3" json:"repetition,omitempty"`
	SplitProviderIndex int64 `protobuf:"varint,4,opt,name=split_provider_index,json=splitProviderIndex,proto3" json:"split_provider_index,omitempty"`
	// Whether the split provider reached its end.
	Finished bool `protobuf:"varint,3,opt,name=finished,proto3" json:"finished,omitempty"`
}

func (x *ProduceSplitUpdate) Reset() {
	*x = ProduceSplitUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_data_service_journal_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProduceSplitUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProduceSplitUpdate) ProtoMessage() {}

func (x *ProduceSplitUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_data_service_journal_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProduceSplitUpdate.ProtoReflect.Descriptor instead.
func (*ProduceSplitUpdate) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_data_service_journal_proto_rawDescGZIP(), []int{5}
}

func (x *ProduceSplitUpdate) GetIterationId() int64 {
	if x != nil {
		return x.IterationId
	}
	return 0
}

func (x *ProduceSplitUpdate) GetRepetition() int64 {
	if x != nil {
		return x.Repetition
	}
	return 0
}

func (x *ProduceSplitUpdate) GetSplitProviderIndex() int64 {
	if x != nil {
		return x.SplitProviderIndex
	}
	return 0
}

func (x *ProduceSplitUpdate) GetFinished() bool {
	if x != nil {
		return x.Finished
	}
	return false
}

// Next tag: 3
type AcquireIterationClientUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IterationId       int64 `protobuf:"varint,1,opt,name=iteration_id,json=iterationId,proto3" json:"iteration_id,omitempty"`
	IterationClientId int64 `protobuf:"varint,2,opt,name=iteration_client_id,json=iterationClientId,proto3" json:"iteration_client_id,omitempty"`
}

func (x *AcquireIterationClientUpdate) Reset() {
	*x = AcquireIterationClientUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_data_service_journal_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcquireIterationClientUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcquireIterationClientUpdate) ProtoMessage() {}

func (x *AcquireIterationClientUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_data_service_journal_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcquireIterationClientUpdate.ProtoReflect.Descriptor instead.
func (*AcquireIterationClientUpdate) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_data_service_journal_proto_rawDescGZIP(), []int{6}
}

func (x *AcquireIterationClientUpdate) GetIterationId() int64 {
	if x != nil {
		return x.IterationId
	}
	return 0
}

func (x *AcquireIterationClientUpdate) GetIterationClientId() int64 {
	if x != nil {
		return x.IterationClientId
	}
	return 0
}

// Next tag: 3
type ReleaseIterationClientUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IterationClientId int64 `protobuf:"varint,1,opt,name=iteration_client_id,json=iterationClientId,proto3" json:"iteration_client_id,omitempty"`
	// The time when the client was released, measured in microseconds since the
	// epoch.
	TimeMicros int64 `protobuf:"varint,2,opt,name=time_micros,json=timeMicros,proto3" json:"time_micros,omitempty"`
}

func (x *ReleaseIterationClientUpdate) Reset() {
	*x = ReleaseIterationClientUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_data_service_journal_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseIterationClientUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseIterationClientUpdate) ProtoMessage() {}

func (x *ReleaseIterationClientUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_data_service_journal_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseIterationClientUpdate.ProtoReflect.Descriptor instead.
func (*ReleaseIterationClientUpdate) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_data_service_journal_proto_rawDescGZIP(), []int{7}
}

func (x *ReleaseIterationClientUpdate) GetIterationClientId() int64 {
	if x != nil {
		return x.IterationClientId
	}
	return 0
}

func (x *ReleaseIterationClientUpdate) GetTimeMicros() int64 {
	if x != nil {
		return x.TimeMicros
	}
	return 0
}

// Next tag: 2
type GarbageCollectIterationUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IterationId int64 `protobuf:"varint,1,opt,name=iteration_id,json=iterationId,proto3" json:"iteration_id,omitempty"`
}

func (x *GarbageCollectIterationUpdate) Reset() {
	*x = GarbageCollectIterationUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_data_service_journal_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GarbageCollectIterationUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GarbageCollectIterationUpdate) ProtoMessage() {}

func (x *GarbageCollectIterationUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_data_service_journal_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GarbageCollectIterationUpdate.ProtoReflect.Descriptor instead.
func (*GarbageCollectIterationUpdate) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_data_service_journal_proto_rawDescGZIP(), []int{8}
}

func (x *GarbageCollectIterationUpdate) GetIterationId() int64 {
	if x != nil {
		return x.IterationId
	}
	return 0
}

// Next tag: 2
type RemoveTaskUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId int64 `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (x *RemoveTaskUpdate) Reset() {
	*x = RemoveTaskUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_data_service_journal_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveTaskUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTaskUpdate) ProtoMessage() {}

func (x *RemoveTaskUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_data_service_journal_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTaskUpdate.ProtoReflect.Descriptor instead.
func (*RemoveTaskUpdate) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_data_service_journal_proto_rawDescGZIP(), []int{9}
}

func (x *RemoveTaskUpdate) GetTaskId() int64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

// Indicates that a client failed to block before reaching the target round.
// Next tag: 2
type TaskRejected struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A new target round to try adding the task in.
	NewTargetRound int64 `protobuf:"varint,1,opt,name=new_target_round,json=newTargetRound,proto3" json:"new_target_round,omitempty"`
}

func (x *TaskRejected) Reset() {
	*x = TaskRejected{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_data_service_journal_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskRejected) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskRejected) ProtoMessage() {}

func (x *TaskRejected) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_data_service_journal_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskRejected.ProtoReflect.Descriptor instead.
func (*TaskRejected) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_data_service_journal_proto_rawDescGZIP(), []int{10}
}

func (x *TaskRejected) GetNewTargetRound() int64 {
	if x != nil {
		return x.NewTargetRound
	}
	return 0
}

// Updates dispatcher state based on a client heartbeat.
// Next tag: 4
type ClientHeartbeatUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IterationClientId int64         `protobuf:"varint,1,opt,name=iteration_client_id,json=iterationClientId,proto3" json:"iteration_client_id,omitempty"`
	TaskAccepted      bool          `protobuf:"varint,2,opt,name=task_accepted,json=taskAccepted,proto3" json:"task_accepted,omitempty"`
	TaskRejected      *TaskRejected `protobuf:"bytes,3,opt,name=task_rejected,json=taskRejected,proto3" json:"task_rejected,omitempty"`
}

func (x *ClientHeartbeatUpdate) Reset() {
	*x = ClientHeartbeatUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_data_service_journal_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientHeartbeatUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientHeartbeatUpdate) ProtoMessage() {}

func (x *ClientHeartbeatUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_data_service_journal_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientHeartbeatUpdate.ProtoReflect.Descriptor instead.
func (*ClientHeartbeatUpdate) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_data_service_journal_proto_rawDescGZIP(), []int{11}
}

func (x *ClientHeartbeatUpdate) GetIterationClientId() int64 {
	if x != nil {
		return x.IterationClientId
	}
	return 0
}

func (x *ClientHeartbeatUpdate) GetTaskAccepted() bool {
	if x != nil {
		return x.TaskAccepted
	}
	return false
}

func (x *ClientHeartbeatUpdate) GetTaskRejected() *TaskRejected {
	if x != nil {
		return x.TaskRejected
	}
	return nil
}

// Next tag: 8
type CreatePendingTaskUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId          int64    `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	IterationId     int64    `protobuf:"varint,2,opt,name=iteration_id,json=iterationId,proto3" json:"iteration_id,omitempty"`
	WorkerAddress   string   `protobuf:"bytes,3,opt,name=worker_address,json=workerAddress,proto3" json:"worker_address,omitempty"`
	TransferAddress string   `protobuf:"bytes,4,opt,name=transfer_address,json=transferAddress,proto3" json:"transfer_address,omitempty"`
	WorkerTags      []string `protobuf:"bytes,6,rep,name=worker_tags,json=workerTags,proto3" json:"worker_tags,omitempty"`
	WorkerUid       int64    `protobuf:"varint,7,opt,name=worker_uid,json=workerUid,proto3" json:"worker_uid,omitempty"`
	StartingRound   int64    `protobuf:"varint,5,opt,name=starting_round,json=startingRound,proto3" json:"starting_round,omitempty"`
}

func (x *CreatePendingTaskUpdate) Reset() {
	*x = CreatePendingTaskUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_data_service_journal_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePendingTaskUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePendingTaskUpdate) ProtoMessage() {}

func (x *CreatePendingTaskUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_data_service_journal_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePendingTaskUpdate.ProtoReflect.Descriptor instead.
func (*CreatePendingTaskUpdate) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_data_service_journal_proto_rawDescGZIP(), []int{12}
}

func (x *CreatePendingTaskUpdate) GetTaskId() int64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *CreatePendingTaskUpdate) GetIterationId() int64 {
	if x != nil {
		return x.IterationId
	}
	return 0
}

func (x *CreatePendingTaskUpdate) GetWorkerAddress() string {
	if x != nil {
		return x.WorkerAddress
	}
	return ""
}

func (x *CreatePendingTaskUpdate) GetTransferAddress() string {
	if x != nil {
		return x.TransferAddress
	}
	return ""
}

func (x *CreatePendingTaskUpdate) GetWorkerTags() []string {
	if x != nil {
		return x.WorkerTags
	}
	return nil
}

func (x *CreatePendingTaskUpdate) GetWorkerUid() int64 {
	if x != nil {
		return x.WorkerUid
	}
	return 0
}

func (x *CreatePendingTaskUpdate) GetStartingRound() int64 {
	if x != nil {
		return x.StartingRound
	}
	return 0
}

// Next tag: 9
type CreateTaskUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId          int64    `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	IterationId     int64    `protobuf:"varint,2,opt,name=iteration_id,json=iterationId,proto3" json:"iteration_id,omitempty"`
	WorkerAddress   string   `protobuf:"bytes,4,opt,name=worker_address,json=workerAddress,proto3" json:"worker_address,omitempty"`
	TransferAddress string   `protobuf:"bytes,6,opt,name=transfer_address,json=transferAddress,proto3" json:"transfer_address,omitempty"`
	WorkerTags      []string `protobuf:"bytes,7,rep,name=worker_tags,json=workerTags,proto3" json:"worker_tags,omitempty"`
	WorkerUid       int64    `protobuf:"varint,8,opt,name=worker_uid,json=workerUid,proto3" json:"worker_uid,omitempty"`
}

func (x *CreateTaskUpdate) Reset() {
	*x = CreateTaskUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_data_service_journal_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTaskUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTaskUpdate) ProtoMessage() {}

func (x *CreateTaskUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_data_service_journal_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTaskUpdate.ProtoReflect.Descriptor instead.
func (*CreateTaskUpdate) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_data_service_journal_proto_rawDescGZIP(), []int{13}
}

func (x *CreateTaskUpdate) GetTaskId() int64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *CreateTaskUpdate) GetIterationId() int64 {
	if x != nil {
		return x.IterationId
	}
	return 0
}

func (x *CreateTaskUpdate) GetWorkerAddress() string {
	if x != nil {
		return x.WorkerAddress
	}
	return ""
}

func (x *CreateTaskUpdate) GetTransferAddress() string {
	if x != nil {
		return x.TransferAddress
	}
	return ""
}

func (x *CreateTaskUpdate) GetWorkerTags() []string {
	if x != nil {
		return x.WorkerTags
	}
	return nil
}

func (x *CreateTaskUpdate) GetWorkerUid() int64 {
	if x != nil {
		return x.WorkerUid
	}
	return 0
}

// Next tag: 2
type FinishTaskUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId int64 `protobuf:"varint,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (x *FinishTaskUpdate) Reset() {
	*x = FinishTaskUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_data_service_journal_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinishTaskUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinishTaskUpdate) ProtoMessage() {}

func (x *FinishTaskUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_data_service_journal_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinishTaskUpdate.ProtoReflect.Descriptor instead.
func (*FinishTaskUpdate) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_data_service_journal_proto_rawDescGZIP(), []int{14}
}

func (x *FinishTaskUpdate) GetTaskId() int64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

var File_tensorflow_core_data_service_journal_proto protoreflect.FileDescriptor

var file_tensorflow_core_data_service_journal_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6a,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x74, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x29, 0x74,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xef, 0x08, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x53, 0x0a, 0x10, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x74, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x65, 0x74, 0x12, 0x50, 0x0a, 0x0f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x6a, 0x6f, 0x62, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x12, 0x53, 0x0a, 0x10, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x4a, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x53, 0x70, 0x6c, 0x69, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x12, 0x69, 0x0a, 0x18, 0x61,
	0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x16,
	0x61, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x69, 0x0a, 0x18, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x5f, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x16, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x12, 0x6c, 0x0a, 0x19, 0x67, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x47, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x17, 0x67, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x44, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x73,
	0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x5a, 0x0a, 0x13, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x54, 0x61, 0x73, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x11,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x73,
	0x6b, 0x12, 0x53, 0x0a, 0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x72,
	0x74, 0x62, 0x65, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x74, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x61,
	0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x44, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x44, 0x0a, 0x0b,
	0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x61,
	0x73, 0x6b, 0x42, 0x0d, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x4a, 0x04, 0x08, 0x0d, 0x10, 0x0e, 0x22, 0xcb, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x6e, 0x74, 0x12, 0x40, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x2f, 0x0a, 0x14, 0x64, 0x65, 0x64, 0x75, 0x70, 0x65, 0x5f, 0x62,
	0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x11, 0x64, 0x65, 0x64, 0x75, 0x70, 0x65, 0x42, 0x79, 0x44, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x49, 0x64, 0x22, 0xa8, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x54, 0x61, 0x67,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x55, 0x69, 0x64,
	0x22, 0xf5, 0x02, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6a,
	0x6f, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a,
	0x6f, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x52, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x4d,
	0x6f, 0x64, 0x65, 0x44, 0x65, 0x66, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x66, 0x12, 0x25, 0x0a, 0x0d, 0x6e, 0x75, 0x6d,
	0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x00, 0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x73,
	0x12, 0x45, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x75, 0x73, 0x65, 0x5f, 0x63,
	0x72, 0x6f, 0x73, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x75, 0x73, 0x65, 0x43, 0x72, 0x6f,
	0x73, 0x73, 0x54, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x43, 0x61, 0x63, 0x68, 0x65, 0x42, 0x18,
	0x0a, 0x16, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x63,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x73, 0x22, 0xa1, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6a, 0x6f, 0x62, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x72, 0x65, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x72, 0x65, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13,
	0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x6e, 0x75, 0x6d, 0x53, 0x70,
	0x6c, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x22, 0xa5, 0x01, 0x0a,
	0x12, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x69, 0x74, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x65, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x65,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x66, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x22, 0x71, 0x0a, 0x1c, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x49,
	0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x69, 0x74, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x74, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x6f, 0x0a, 0x1c, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x74, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x69,
	0x6d, 0x65, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x22, 0x42, 0x0a, 0x1d, 0x47, 0x61, 0x72, 0x62,
	0x61, 0x67, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x74, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x2b, 0x0a, 0x10,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0x38, 0x0a, 0x0c, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x65, 0x77,
	0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x6e, 0x65, 0x77, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x22, 0xb0, 0x01, 0x0a, 0x15, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x65,
	0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a,
	0x13, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x69, 0x74, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x74, 0x61, 0x73, 0x6b, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x65, 0x64, 0x12, 0x42, 0x0a, 0x0d, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x0c, 0x74, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0x8e, 0x02, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x73, 0x6b, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69,
	0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x25,
	0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x54, 0x61, 0x67,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x55, 0x69, 0x64,
	0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0xec, 0x01, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74,
	0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x69, 0x74, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x29, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x54, 0x61, 0x67, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x77,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x55, 0x69, 0x64, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04,
	0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x22, 0x2b, 0x0a, 0x10, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x54, 0x61, 0x73, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x61, 0x73,
	0x6b, 0x49, 0x64, 0x42, 0xbf, 0x01, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x42, 0x0c, 0x4a, 0x6f, 0x75,
	0x72, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x02, 0x50, 0x01, 0x5a, 0x3b, 0x67,
	0x69, 0x74, 0x65, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x71, 0x63, 0x69, 0x69, 0x70, 0x2d, 0x69,
	0x63, 0x70, 0x2f, 0x74, 0x66, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2f, 0x74, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x64, 0x61,
	0x74, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0xa2, 0x02, 0x03, 0x54, 0x44, 0x58,
	0xaa, 0x02, 0x0f, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0xca, 0x02, 0x0f, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5c,
	0x44, 0x61, 0x74, 0x61, 0xe2, 0x02, 0x1b, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f,
	0x77, 0x5c, 0x44, 0x61, 0x74, 0x61, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0xea, 0x02, 0x10, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x3a,
	0x3a, 0x44, 0x61, 0x74, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tensorflow_core_data_service_journal_proto_rawDescOnce sync.Once
	file_tensorflow_core_data_service_journal_proto_rawDescData = file_tensorflow_core_data_service_journal_proto_rawDesc
)

func file_tensorflow_core_data_service_journal_proto_rawDescGZIP() []byte {
	file_tensorflow_core_data_service_journal_proto_rawDescOnce.Do(func() {
		file_tensorflow_core_data_service_journal_proto_rawDescData = protoimpl.X.CompressGZIP(file_tensorflow_core_data_service_journal_proto_rawDescData)
	})
	return file_tensorflow_core_data_service_journal_proto_rawDescData
}

var file_tensorflow_core_data_service_journal_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_tensorflow_core_data_service_journal_proto_goTypes = []interface{}{
	(*Update)(nil),                        // 0: tensorflow.data.Update
	(*RegisterDatasetUpdate)(nil),         // 1: tensorflow.data.RegisterDatasetUpdate
	(*RegisterWorkerUpdate)(nil),          // 2: tensorflow.data.RegisterWorkerUpdate
	(*CreateJobUpdate)(nil),               // 3: tensorflow.data.CreateJobUpdate
	(*CreateIterationUpdate)(nil),         // 4: tensorflow.data.CreateIterationUpdate
	(*ProduceSplitUpdate)(nil),            // 5: tensorflow.data.ProduceSplitUpdate
	(*AcquireIterationClientUpdate)(nil),  // 6: tensorflow.data.AcquireIterationClientUpdate
	(*ReleaseIterationClientUpdate)(nil),  // 7: tensorflow.data.ReleaseIterationClientUpdate
	(*GarbageCollectIterationUpdate)(nil), // 8: tensorflow.data.GarbageCollectIterationUpdate
	(*RemoveTaskUpdate)(nil),              // 9: tensorflow.data.RemoveTaskUpdate
	(*TaskRejected)(nil),                  // 10: tensorflow.data.TaskRejected
	(*ClientHeartbeatUpdate)(nil),         // 11: tensorflow.data.ClientHeartbeatUpdate
	(*CreatePendingTaskUpdate)(nil),       // 12: tensorflow.data.CreatePendingTaskUpdate
	(*CreateTaskUpdate)(nil),              // 13: tensorflow.data.CreateTaskUpdate
	(*FinishTaskUpdate)(nil),              // 14: tensorflow.data.FinishTaskUpdate
	(*protobuf.DataServiceMetadata)(nil),  // 15: tensorflow.data.DataServiceMetadata
	(*protobuf.ProcessingModeDef)(nil),    // 16: tensorflow.data.ProcessingModeDef
	(TargetWorkers)(0),                    // 17: tensorflow.data.TargetWorkers
}
var file_tensorflow_core_data_service_journal_proto_depIdxs = []int32{
	1,  // 0: tensorflow.data.Update.register_dataset:type_name -> tensorflow.data.RegisterDatasetUpdate
	2,  // 1: tensorflow.data.Update.register_worker:type_name -> tensorflow.data.RegisterWorkerUpdate
	3,  // 2: tensorflow.data.Update.create_job:type_name -> tensorflow.data.CreateJobUpdate
	4,  // 3: tensorflow.data.Update.create_iteration:type_name -> tensorflow.data.CreateIterationUpdate
	5,  // 4: tensorflow.data.Update.produce_split:type_name -> tensorflow.data.ProduceSplitUpdate
	6,  // 5: tensorflow.data.Update.acquire_iteration_client:type_name -> tensorflow.data.AcquireIterationClientUpdate
	7,  // 6: tensorflow.data.Update.release_iteration_client:type_name -> tensorflow.data.ReleaseIterationClientUpdate
	8,  // 7: tensorflow.data.Update.garbage_collect_iteration:type_name -> tensorflow.data.GarbageCollectIterationUpdate
	9,  // 8: tensorflow.data.Update.remove_task:type_name -> tensorflow.data.RemoveTaskUpdate
	12, // 9: tensorflow.data.Update.create_pending_task:type_name -> tensorflow.data.CreatePendingTaskUpdate
	11, // 10: tensorflow.data.Update.client_heartbeat:type_name -> tensorflow.data.ClientHeartbeatUpdate
	13, // 11: tensorflow.data.Update.create_task:type_name -> tensorflow.data.CreateTaskUpdate
	14, // 12: tensorflow.data.Update.finish_task:type_name -> tensorflow.data.FinishTaskUpdate
	15, // 13: tensorflow.data.RegisterDatasetUpdate.metadata:type_name -> tensorflow.data.DataServiceMetadata
	16, // 14: tensorflow.data.CreateJobUpdate.processing_mode_def:type_name -> tensorflow.data.ProcessingModeDef
	17, // 15: tensorflow.data.CreateJobUpdate.target_workers:type_name -> tensorflow.data.TargetWorkers
	10, // 16: tensorflow.data.ClientHeartbeatUpdate.task_rejected:type_name -> tensorflow.data.TaskRejected
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_tensorflow_core_data_service_journal_proto_init() }
func file_tensorflow_core_data_service_journal_proto_init() {
	if File_tensorflow_core_data_service_journal_proto != nil {
		return
	}
	file_tensorflow_core_data_service_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_tensorflow_core_data_service_journal_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Update); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_data_service_journal_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterDatasetUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_data_service_journal_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterWorkerUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_data_service_journal_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateJobUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_data_service_journal_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateIterationUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_data_service_journal_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProduceSplitUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_data_service_journal_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcquireIterationClientUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_data_service_journal_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseIterationClientUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_data_service_journal_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GarbageCollectIterationUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_data_service_journal_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveTaskUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_data_service_journal_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskRejected); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_data_service_journal_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientHeartbeatUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_data_service_journal_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePendingTaskUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_data_service_journal_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTaskUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_data_service_journal_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinishTaskUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_tensorflow_core_data_service_journal_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Update_RegisterDataset)(nil),
		(*Update_RegisterWorker)(nil),
		(*Update_CreateJob)(nil),
		(*Update_CreateIteration)(nil),
		(*Update_ProduceSplit)(nil),
		(*Update_AcquireIterationClient)(nil),
		(*Update_ReleaseIterationClient)(nil),
		(*Update_GarbageCollectIteration)(nil),
		(*Update_RemoveTask)(nil),
		(*Update_CreatePendingTask)(nil),
		(*Update_ClientHeartbeat)(nil),
		(*Update_CreateTask)(nil),
		(*Update_FinishTask)(nil),
	}
	file_tensorflow_core_data_service_journal_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*CreateJobUpdate_NumConsumers)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tensorflow_core_data_service_journal_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tensorflow_core_data_service_journal_proto_goTypes,
		DependencyIndexes: file_tensorflow_core_data_service_journal_proto_depIdxs,
		MessageInfos:      file_tensorflow_core_data_service_journal_proto_msgTypes,
	}.Build()
	File_tensorflow_core_data_service_journal_proto = out.File
	file_tensorflow_core_data_service_journal_proto_rawDesc = nil
	file_tensorflow_core_data_service_journal_proto_goTypes = nil
	file_tensorflow_core_data_service_journal_proto_depIdxs = nil
}
