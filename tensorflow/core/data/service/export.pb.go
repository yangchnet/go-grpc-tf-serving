// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: tensorflow/core/data/service/export.proto

package service

import (
	protobuf "gitee.com/qciip-icp/tf-serving/tensorflow/core/protobuf"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// State of the dispatcher server, exported to improve debuggability.
// Next tag: 4
type DispatcherStateExport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DispatcherConfig *protobuf.DispatcherConfig         `protobuf:"bytes,1,opt,name=dispatcher_config,json=dispatcherConfig,proto3" json:"dispatcher_config,omitempty"`
	WorkerAddresses  []string                           `protobuf:"bytes,2,rep,name=worker_addresses,json=workerAddresses,proto3" json:"worker_addresses,omitempty"`
	Iterations       []*DispatcherStateExport_Iteration `protobuf:"bytes,3,rep,name=iterations,proto3" json:"iterations,omitempty"`
}

func (x *DispatcherStateExport) Reset() {
	*x = DispatcherStateExport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_data_service_export_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DispatcherStateExport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DispatcherStateExport) ProtoMessage() {}

func (x *DispatcherStateExport) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_data_service_export_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DispatcherStateExport.ProtoReflect.Descriptor instead.
func (*DispatcherStateExport) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_data_service_export_proto_rawDescGZIP(), []int{0}
}

func (x *DispatcherStateExport) GetDispatcherConfig() *protobuf.DispatcherConfig {
	if x != nil {
		return x.DispatcherConfig
	}
	return nil
}

func (x *DispatcherStateExport) GetWorkerAddresses() []string {
	if x != nil {
		return x.WorkerAddresses
	}
	return nil
}

func (x *DispatcherStateExport) GetIterations() []*DispatcherStateExport_Iteration {
	if x != nil {
		return x.Iterations
	}
	return nil
}

// State of the worker server, exported to improve debuggability.
// Next tag: 5
type WorkerStateExport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkerConfig    *protobuf.WorkerConfig `protobuf:"bytes,1,opt,name=worker_config,json=workerConfig,proto3" json:"worker_config,omitempty"`
	Tasks           []*TaskDef             `protobuf:"bytes,2,rep,name=tasks,proto3" json:"tasks,omitempty"`
	FinishedTaskIds []int64                `protobuf:"varint,3,rep,packed,name=finished_task_ids,json=finishedTaskIds,proto3" json:"finished_task_ids,omitempty"`
	DeletedTaskIds  []int64                `protobuf:"varint,4,rep,packed,name=deleted_task_ids,json=deletedTaskIds,proto3" json:"deleted_task_ids,omitempty"`
}

func (x *WorkerStateExport) Reset() {
	*x = WorkerStateExport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_data_service_export_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkerStateExport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerStateExport) ProtoMessage() {}

func (x *WorkerStateExport) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_data_service_export_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerStateExport.ProtoReflect.Descriptor instead.
func (*WorkerStateExport) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_data_service_export_proto_rawDescGZIP(), []int{1}
}

func (x *WorkerStateExport) GetWorkerConfig() *protobuf.WorkerConfig {
	if x != nil {
		return x.WorkerConfig
	}
	return nil
}

func (x *WorkerStateExport) GetTasks() []*TaskDef {
	if x != nil {
		return x.Tasks
	}
	return nil
}

func (x *WorkerStateExport) GetFinishedTaskIds() []int64 {
	if x != nil {
		return x.FinishedTaskIds
	}
	return nil
}

func (x *WorkerStateExport) GetDeletedTaskIds() []int64 {
	if x != nil {
		return x.DeletedTaskIds
	}
	return nil
}

// State of the tf.data service server, exported to improve debuggability.
// The dispatcher and worker servers will populate the corresponding fields.
// Next tag: 3
type ServerStateExport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DispatcherStateExport *DispatcherStateExport `protobuf:"bytes,1,opt,name=dispatcher_state_export,json=dispatcherStateExport,proto3" json:"dispatcher_state_export,omitempty"`
	WorkerStateExport     *WorkerStateExport     `protobuf:"bytes,2,opt,name=worker_state_export,json=workerStateExport,proto3" json:"worker_state_export,omitempty"`
}

func (x *ServerStateExport) Reset() {
	*x = ServerStateExport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_data_service_export_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerStateExport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerStateExport) ProtoMessage() {}

func (x *ServerStateExport) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_data_service_export_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerStateExport.ProtoReflect.Descriptor instead.
func (*ServerStateExport) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_data_service_export_proto_rawDescGZIP(), []int{2}
}

func (x *ServerStateExport) GetDispatcherStateExport() *DispatcherStateExport {
	if x != nil {
		return x.DispatcherStateExport
	}
	return nil
}

func (x *ServerStateExport) GetWorkerStateExport() *WorkerStateExport {
	if x != nil {
		return x.WorkerStateExport
	}
	return nil
}

type DispatcherStateExport_Iteration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatasetId        string                      `protobuf:"bytes,1,opt,name=dataset_id,json=datasetId,proto3" json:"dataset_id,omitempty"`
	IterationId      int64                       `protobuf:"varint,2,opt,name=iteration_id,json=iterationId,proto3" json:"iteration_id,omitempty"`
	IterationKey     *IterationKeyDef            `protobuf:"bytes,3,opt,name=iteration_key,json=iterationKey,proto3" json:"iteration_key,omitempty"`
	ProcessingMode   *protobuf.ProcessingModeDef `protobuf:"bytes,4,opt,name=processing_mode,json=processingMode,proto3" json:"processing_mode,omitempty"`
	NumConsumers     int64                       `protobuf:"varint,6,opt,name=num_consumers,json=numConsumers,proto3" json:"num_consumers,omitempty"`
	NumClients       int64                       `protobuf:"varint,8,opt,name=num_clients,json=numClients,proto3" json:"num_clients,omitempty"`
	Finished         bool                        `protobuf:"varint,10,opt,name=finished,proto3" json:"finished,omitempty"`
	GarbageCollected bool                        `protobuf:"varint,11,opt,name=garbage_collected,json=garbageCollected,proto3" json:"garbage_collected,omitempty"`
}

func (x *DispatcherStateExport_Iteration) Reset() {
	*x = DispatcherStateExport_Iteration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_data_service_export_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DispatcherStateExport_Iteration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DispatcherStateExport_Iteration) ProtoMessage() {}

func (x *DispatcherStateExport_Iteration) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_data_service_export_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DispatcherStateExport_Iteration.ProtoReflect.Descriptor instead.
func (*DispatcherStateExport_Iteration) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_data_service_export_proto_rawDescGZIP(), []int{0, 0}
}

func (x *DispatcherStateExport_Iteration) GetDatasetId() string {
	if x != nil {
		return x.DatasetId
	}
	return ""
}

func (x *DispatcherStateExport_Iteration) GetIterationId() int64 {
	if x != nil {
		return x.IterationId
	}
	return 0
}

func (x *DispatcherStateExport_Iteration) GetIterationKey() *IterationKeyDef {
	if x != nil {
		return x.IterationKey
	}
	return nil
}

func (x *DispatcherStateExport_Iteration) GetProcessingMode() *protobuf.ProcessingModeDef {
	if x != nil {
		return x.ProcessingMode
	}
	return nil
}

func (x *DispatcherStateExport_Iteration) GetNumConsumers() int64 {
	if x != nil {
		return x.NumConsumers
	}
	return 0
}

func (x *DispatcherStateExport_Iteration) GetNumClients() int64 {
	if x != nil {
		return x.NumClients
	}
	return 0
}

func (x *DispatcherStateExport_Iteration) GetFinished() bool {
	if x != nil {
		return x.Finished
	}
	return false
}

func (x *DispatcherStateExport_Iteration) GetGarbageCollected() bool {
	if x != nil {
		return x.GarbageCollected
	}
	return false
}

var File_tensorflow_core_data_service_export_proto protoreflect.FileDescriptor

var file_tensorflow_core_data_service_export_proto_rawDesc = []byte{
	0x0a, 0x29, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x65,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x74, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x29, 0x74, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x64, 0x61,
	0x74, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66,
	0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77,
	0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xe4, 0x04, 0x0a, 0x15, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x5b, 0x0a,
	0x11, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x10, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x29, 0x0a, 0x10, 0x77, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x50, 0x0a, 0x0a, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x69, 0x73, 0x70,
	0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x2e, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x69, 0x74, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xf0, 0x02, 0x0a, 0x09, 0x49, 0x74, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x65, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x69, 0x74, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x0d, 0x69, 0x74, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x44, 0x65, 0x66,
	0x52, 0x0c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x4b,
	0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x66, 0x52, 0x0e, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6e,
	0x75, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x2b, 0x0a,
	0x11, 0x67, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x67, 0x61, 0x72, 0x62, 0x61, 0x67,
	0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0xea, 0x01, 0x0a, 0x11, 0x57,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x4f, 0x0a, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x2e, 0x0a, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x66, 0x52, 0x05, 0x74, 0x61, 0x73, 0x6b,
	0x73, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0f, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x73, 0x12, 0x28, 0x0a,
	0x10, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x73, 0x22, 0xc7, 0x01, 0x0a, 0x11, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x5e, 0x0a,
	0x17, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x15, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x52, 0x0a,
	0x13, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x65, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x11,
	0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x42, 0xbe, 0x01, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x42, 0x0b, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x02, 0x50, 0x01, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x65,
	0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x71, 0x63, 0x69, 0x69, 0x70, 0x2d, 0x69, 0x63, 0x70, 0x2f,
	0x74, 0x66, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2f, 0x74, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0xa2, 0x02, 0x03, 0x54, 0x44, 0x58, 0xaa, 0x02, 0x0f,
	0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x44, 0x61, 0x74, 0x61, 0xca,
	0x02, 0x0f, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5c, 0x44, 0x61, 0x74,
	0x61, 0xe2, 0x02, 0x1b, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5c, 0x44,
	0x61, 0x74, 0x61, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,
	0x02, 0x10, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x3a, 0x3a, 0x44, 0x61,
	0x74, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tensorflow_core_data_service_export_proto_rawDescOnce sync.Once
	file_tensorflow_core_data_service_export_proto_rawDescData = file_tensorflow_core_data_service_export_proto_rawDesc
)

func file_tensorflow_core_data_service_export_proto_rawDescGZIP() []byte {
	file_tensorflow_core_data_service_export_proto_rawDescOnce.Do(func() {
		file_tensorflow_core_data_service_export_proto_rawDescData = protoimpl.X.CompressGZIP(file_tensorflow_core_data_service_export_proto_rawDescData)
	})
	return file_tensorflow_core_data_service_export_proto_rawDescData
}

var file_tensorflow_core_data_service_export_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_tensorflow_core_data_service_export_proto_goTypes = []interface{}{
	(*DispatcherStateExport)(nil),           // 0: tensorflow.data.DispatcherStateExport
	(*WorkerStateExport)(nil),               // 1: tensorflow.data.WorkerStateExport
	(*ServerStateExport)(nil),               // 2: tensorflow.data.ServerStateExport
	(*DispatcherStateExport_Iteration)(nil), // 3: tensorflow.data.DispatcherStateExport.Iteration
	(*protobuf.DispatcherConfig)(nil),       // 4: tensorflow.data.experimental.DispatcherConfig
	(*protobuf.WorkerConfig)(nil),           // 5: tensorflow.data.experimental.WorkerConfig
	(*TaskDef)(nil),                         // 6: tensorflow.data.TaskDef
	(*IterationKeyDef)(nil),                 // 7: tensorflow.data.IterationKeyDef
	(*protobuf.ProcessingModeDef)(nil),      // 8: tensorflow.data.ProcessingModeDef
}
var file_tensorflow_core_data_service_export_proto_depIdxs = []int32{
	4, // 0: tensorflow.data.DispatcherStateExport.dispatcher_config:type_name -> tensorflow.data.experimental.DispatcherConfig
	3, // 1: tensorflow.data.DispatcherStateExport.iterations:type_name -> tensorflow.data.DispatcherStateExport.Iteration
	5, // 2: tensorflow.data.WorkerStateExport.worker_config:type_name -> tensorflow.data.experimental.WorkerConfig
	6, // 3: tensorflow.data.WorkerStateExport.tasks:type_name -> tensorflow.data.TaskDef
	0, // 4: tensorflow.data.ServerStateExport.dispatcher_state_export:type_name -> tensorflow.data.DispatcherStateExport
	1, // 5: tensorflow.data.ServerStateExport.worker_state_export:type_name -> tensorflow.data.WorkerStateExport
	7, // 6: tensorflow.data.DispatcherStateExport.Iteration.iteration_key:type_name -> tensorflow.data.IterationKeyDef
	8, // 7: tensorflow.data.DispatcherStateExport.Iteration.processing_mode:type_name -> tensorflow.data.ProcessingModeDef
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_tensorflow_core_data_service_export_proto_init() }
func file_tensorflow_core_data_service_export_proto_init() {
	if File_tensorflow_core_data_service_export_proto != nil {
		return
	}
	file_tensorflow_core_data_service_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_tensorflow_core_data_service_export_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DispatcherStateExport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_data_service_export_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkerStateExport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_data_service_export_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerStateExport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_data_service_export_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DispatcherStateExport_Iteration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tensorflow_core_data_service_export_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tensorflow_core_data_service_export_proto_goTypes,
		DependencyIndexes: file_tensorflow_core_data_service_export_proto_depIdxs,
		MessageInfos:      file_tensorflow_core_data_service_export_proto_msgTypes,
	}.Build()
	File_tensorflow_core_data_service_export_proto = out.File
	file_tensorflow_core_data_service_export_proto_rawDesc = nil
	file_tensorflow_core_data_service_export_proto_goTypes = nil
	file_tensorflow_core_data_service_export_proto_depIdxs = nil
}
