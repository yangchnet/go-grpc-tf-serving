// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: tensorflow/core/debug/debug_service.proto

package debug

import (
	context "context"
	protobuf "github.com/yangchnet/tf-serving/tensorflow/core/protobuf"
	util "github.com/yangchnet/tf-serving/tensorflow/core/util"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EventListenerClient is the client API for EventListener service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventListenerClient interface {
	// Client(s) can use this RPC method to send the EventListener Event protos.
	// The Event protos can hold information such as:
	//   1) intermediate tensors from a debugged graph being executed, which can
	//      be sent from DebugIdentity ops configured with grpc URLs.
	//   2) GraphDefs of partition graphs, which can be sent from special debug
	//      ops that get executed immediately after the beginning of the graph
	//      execution.
	SendEvents(ctx context.Context, opts ...grpc.CallOption) (EventListener_SendEventsClient, error)
	// Send the tracebacks of a TensorFlow execution call.
	SendTracebacks(ctx context.Context, in *CallTraceback, opts ...grpc.CallOption) (*EventReply, error)
	// Send a collection of source code files being debugged.
	SendSourceFiles(ctx context.Context, in *protobuf.DebuggedSourceFiles, opts ...grpc.CallOption) (*EventReply, error)
}

type eventListenerClient struct {
	cc grpc.ClientConnInterface
}

func NewEventListenerClient(cc grpc.ClientConnInterface) EventListenerClient {
	return &eventListenerClient{cc}
}

func (c *eventListenerClient) SendEvents(ctx context.Context, opts ...grpc.CallOption) (EventListener_SendEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &EventListener_ServiceDesc.Streams[0], "/tensorflow.EventListener/SendEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventListenerSendEventsClient{stream}
	return x, nil
}

type EventListener_SendEventsClient interface {
	Send(*util.Event) error
	Recv() (*EventReply, error)
	grpc.ClientStream
}

type eventListenerSendEventsClient struct {
	grpc.ClientStream
}

func (x *eventListenerSendEventsClient) Send(m *util.Event) error {
	return x.ClientStream.SendMsg(m)
}

func (x *eventListenerSendEventsClient) Recv() (*EventReply, error) {
	m := new(EventReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *eventListenerClient) SendTracebacks(ctx context.Context, in *CallTraceback, opts ...grpc.CallOption) (*EventReply, error) {
	out := new(EventReply)
	err := c.cc.Invoke(ctx, "/tensorflow.EventListener/SendTracebacks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventListenerClient) SendSourceFiles(ctx context.Context, in *protobuf.DebuggedSourceFiles, opts ...grpc.CallOption) (*EventReply, error) {
	out := new(EventReply)
	err := c.cc.Invoke(ctx, "/tensorflow.EventListener/SendSourceFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventListenerServer is the server API for EventListener service.
// All implementations must embed UnimplementedEventListenerServer
// for forward compatibility
type EventListenerServer interface {
	// Client(s) can use this RPC method to send the EventListener Event protos.
	// The Event protos can hold information such as:
	//   1) intermediate tensors from a debugged graph being executed, which can
	//      be sent from DebugIdentity ops configured with grpc URLs.
	//   2) GraphDefs of partition graphs, which can be sent from special debug
	//      ops that get executed immediately after the beginning of the graph
	//      execution.
	SendEvents(EventListener_SendEventsServer) error
	// Send the tracebacks of a TensorFlow execution call.
	SendTracebacks(context.Context, *CallTraceback) (*EventReply, error)
	// Send a collection of source code files being debugged.
	SendSourceFiles(context.Context, *protobuf.DebuggedSourceFiles) (*EventReply, error)
	mustEmbedUnimplementedEventListenerServer()
}

// UnimplementedEventListenerServer must be embedded to have forward compatible implementations.
type UnimplementedEventListenerServer struct {
}

func (UnimplementedEventListenerServer) SendEvents(EventListener_SendEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method SendEvents not implemented")
}
func (UnimplementedEventListenerServer) SendTracebacks(context.Context, *CallTraceback) (*EventReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTracebacks not implemented")
}
func (UnimplementedEventListenerServer) SendSourceFiles(context.Context, *protobuf.DebuggedSourceFiles) (*EventReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSourceFiles not implemented")
}
func (UnimplementedEventListenerServer) mustEmbedUnimplementedEventListenerServer() {}

// UnsafeEventListenerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventListenerServer will
// result in compilation errors.
type UnsafeEventListenerServer interface {
	mustEmbedUnimplementedEventListenerServer()
}

func RegisterEventListenerServer(s grpc.ServiceRegistrar, srv EventListenerServer) {
	s.RegisterService(&EventListener_ServiceDesc, srv)
}

func _EventListener_SendEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EventListenerServer).SendEvents(&eventListenerSendEventsServer{stream})
}

type EventListener_SendEventsServer interface {
	Send(*EventReply) error
	Recv() (*util.Event, error)
	grpc.ServerStream
}

type eventListenerSendEventsServer struct {
	grpc.ServerStream
}

func (x *eventListenerSendEventsServer) Send(m *EventReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *eventListenerSendEventsServer) Recv() (*util.Event, error) {
	m := new(util.Event)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _EventListener_SendTracebacks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallTraceback)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventListenerServer).SendTracebacks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tensorflow.EventListener/SendTracebacks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventListenerServer).SendTracebacks(ctx, req.(*CallTraceback))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventListener_SendSourceFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protobuf.DebuggedSourceFiles)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventListenerServer).SendSourceFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tensorflow.EventListener/SendSourceFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventListenerServer).SendSourceFiles(ctx, req.(*protobuf.DebuggedSourceFiles))
	}
	return interceptor(ctx, in, info, handler)
}

// EventListener_ServiceDesc is the grpc.ServiceDesc for EventListener service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventListener_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tensorflow.EventListener",
	HandlerType: (*EventListenerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendTracebacks",
			Handler:    _EventListener_SendTracebacks_Handler,
		},
		{
			MethodName: "SendSourceFiles",
			Handler:    _EventListener_SendSourceFiles_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendEvents",
			Handler:       _EventListener_SendEvents_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "tensorflow/core/debug/debug_service.proto",
}
