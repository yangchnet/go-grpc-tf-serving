// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: tensorflow/core/protobuf/tpu/compile_metadata.proto

package tpu

import (
	xla "github.com/yangchnet/tf-serving/tensorflow/compiler/xla"
	framework "github.com/yangchnet/tf-serving/tensorflow/core/framework"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TPUCompileMetadataProto_Arg_Kind int32

const (
	TPUCompileMetadataProto_Arg_INVALID   TPUCompileMetadataProto_Arg_Kind = 0
	TPUCompileMetadataProto_Arg_PARAMETER TPUCompileMetadataProto_Arg_Kind = 1
	TPUCompileMetadataProto_Arg_VARIABLE  TPUCompileMetadataProto_Arg_Kind = 2
	// These are args which have been guaranteed to be constants during the
	// session lifetime by the use of the GuaranteeConstOp (or ConstantOp).
	TPUCompileMetadataProto_Arg_GUARANTEED_CONSTANT TPUCompileMetadataProto_Arg_Kind = 3
)

// Enum value maps for TPUCompileMetadataProto_Arg_Kind.
var (
	TPUCompileMetadataProto_Arg_Kind_name = map[int32]string{
		0: "INVALID",
		1: "PARAMETER",
		2: "VARIABLE",
		3: "GUARANTEED_CONSTANT",
	}
	TPUCompileMetadataProto_Arg_Kind_value = map[string]int32{
		"INVALID":             0,
		"PARAMETER":           1,
		"VARIABLE":            2,
		"GUARANTEED_CONSTANT": 3,
	}
)

func (x TPUCompileMetadataProto_Arg_Kind) Enum() *TPUCompileMetadataProto_Arg_Kind {
	p := new(TPUCompileMetadataProto_Arg_Kind)
	*p = x
	return p
}

func (x TPUCompileMetadataProto_Arg_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TPUCompileMetadataProto_Arg_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_tensorflow_core_protobuf_tpu_compile_metadata_proto_enumTypes[0].Descriptor()
}

func (TPUCompileMetadataProto_Arg_Kind) Type() protoreflect.EnumType {
	return &file_tensorflow_core_protobuf_tpu_compile_metadata_proto_enumTypes[0]
}

func (x TPUCompileMetadataProto_Arg_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TPUCompileMetadataProto_Arg_Kind.Descriptor instead.
func (TPUCompileMetadataProto_Arg_Kind) EnumDescriptor() ([]byte, []int) {
	return file_tensorflow_core_protobuf_tpu_compile_metadata_proto_rawDescGZIP(), []int{0, 0, 0}
}

type TPUCompileMetadataProto_Arg_EnableXlaSharding int32

const (
	TPUCompileMetadataProto_Arg_DISALLOWED TPUCompileMetadataProto_Arg_EnableXlaSharding = 0
	// Sharding is allowed if host training loop exists.
	TPUCompileMetadataProto_Arg_TENTATIVE TPUCompileMetadataProto_Arg_EnableXlaSharding = 1
	TPUCompileMetadataProto_Arg_ALLOWED   TPUCompileMetadataProto_Arg_EnableXlaSharding = 2
)

// Enum value maps for TPUCompileMetadataProto_Arg_EnableXlaSharding.
var (
	TPUCompileMetadataProto_Arg_EnableXlaSharding_name = map[int32]string{
		0: "DISALLOWED",
		1: "TENTATIVE",
		2: "ALLOWED",
	}
	TPUCompileMetadataProto_Arg_EnableXlaSharding_value = map[string]int32{
		"DISALLOWED": 0,
		"TENTATIVE":  1,
		"ALLOWED":    2,
	}
)

func (x TPUCompileMetadataProto_Arg_EnableXlaSharding) Enum() *TPUCompileMetadataProto_Arg_EnableXlaSharding {
	p := new(TPUCompileMetadataProto_Arg_EnableXlaSharding)
	*p = x
	return p
}

func (x TPUCompileMetadataProto_Arg_EnableXlaSharding) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TPUCompileMetadataProto_Arg_EnableXlaSharding) Descriptor() protoreflect.EnumDescriptor {
	return file_tensorflow_core_protobuf_tpu_compile_metadata_proto_enumTypes[1].Descriptor()
}

func (TPUCompileMetadataProto_Arg_EnableXlaSharding) Type() protoreflect.EnumType {
	return &file_tensorflow_core_protobuf_tpu_compile_metadata_proto_enumTypes[1]
}

func (x TPUCompileMetadataProto_Arg_EnableXlaSharding) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TPUCompileMetadataProto_Arg_EnableXlaSharding.Descriptor instead.
func (TPUCompileMetadataProto_Arg_EnableXlaSharding) EnumDescriptor() ([]byte, []int) {
	return file_tensorflow_core_protobuf_tpu_compile_metadata_proto_rawDescGZIP(), []int{0, 0, 1}
}

type TPUCompileOptions_Precision int32

const (
	TPUCompileOptions_DEFAULT        TPUCompileOptions_Precision = 0
	TPUCompileOptions_BFLOAT16       TPUCompileOptions_Precision = 1
	TPUCompileOptions_FLOAT32        TPUCompileOptions_Precision = 2
	TPUCompileOptions_TENSOR_FLOAT32 TPUCompileOptions_Precision = 3
)

// Enum value maps for TPUCompileOptions_Precision.
var (
	TPUCompileOptions_Precision_name = map[int32]string{
		0: "DEFAULT",
		1: "BFLOAT16",
		2: "FLOAT32",
		3: "TENSOR_FLOAT32",
	}
	TPUCompileOptions_Precision_value = map[string]int32{
		"DEFAULT":        0,
		"BFLOAT16":       1,
		"FLOAT32":        2,
		"TENSOR_FLOAT32": 3,
	}
)

func (x TPUCompileOptions_Precision) Enum() *TPUCompileOptions_Precision {
	p := new(TPUCompileOptions_Precision)
	*p = x
	return p
}

func (x TPUCompileOptions_Precision) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TPUCompileOptions_Precision) Descriptor() protoreflect.EnumDescriptor {
	return file_tensorflow_core_protobuf_tpu_compile_metadata_proto_enumTypes[2].Descriptor()
}

func (TPUCompileOptions_Precision) Type() protoreflect.EnumType {
	return &file_tensorflow_core_protobuf_tpu_compile_metadata_proto_enumTypes[2]
}

func (x TPUCompileOptions_Precision) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TPUCompileOptions_Precision.Descriptor instead.
func (TPUCompileOptions_Precision) EnumDescriptor() ([]byte, []int) {
	return file_tensorflow_core_protobuf_tpu_compile_metadata_proto_rawDescGZIP(), []int{1, 0}
}

// This is an experimental proto used in the TF/XLA bridge to store metadata to
// a compile op (e.g. _TPUCompileMlir).
// TODO(lyandy): Deprecate proto once generic metadata proto is created.
type TPUCompileMetadataProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Args    []*TPUCompileMetadataProto_Arg    `protobuf:"bytes,1,rep,name=args,proto3" json:"args,omitempty"`
	Retvals []*TPUCompileMetadataProto_Retval `protobuf:"bytes,2,rep,name=retvals,proto3" json:"retvals,omitempty"`
	// Number of replicas of the computation and number of cores in each replica.
	// TODO(b/140721404): it may not be necessary to state the number of cores per
	// replica here. Reconsider when replicated model-parallelism is implemented
	// in XLA.
	NumReplicas        int32                      `protobuf:"varint,3,opt,name=num_replicas,json=numReplicas,proto3" json:"num_replicas,omitempty"`
	NumCoresPerReplica int32                      `protobuf:"varint,4,opt,name=num_cores_per_replica,json=numCoresPerReplica,proto3" json:"num_cores_per_replica,omitempty"`
	DeviceAssignment   *xla.DeviceAssignmentProto `protobuf:"bytes,8,opt,name=device_assignment,json=deviceAssignment,proto3" json:"device_assignment,omitempty"`
	// A fingerprint of the function library. Ensures that any functions called
	// by the computation have matching definitions.
	FunctionLibraryFingerprint uint64 `protobuf:"varint,6,opt,name=function_library_fingerprint,json=functionLibraryFingerprint,proto3" json:"function_library_fingerprint,omitempty"`
	// Unique session identifier. Can be empty.
	SessionHandle string `protobuf:"bytes,9,opt,name=session_handle,json=sessionHandle,proto3" json:"session_handle,omitempty"`
	// Fingerprint of guaranteed_const value. The fingerprint computation inside
	// tpu_compile_op may be slow. The computation can be avoided by setting the
	// fingerprint value here.
	GuaranteedConstFingerprint string        `protobuf:"bytes,10,opt,name=guaranteed_const_fingerprint,json=guaranteedConstFingerprint,proto3" json:"guaranteed_const_fingerprint,omitempty"`
	PaddingMaps                []*PaddingMap `protobuf:"bytes,11,rep,name=padding_maps,json=paddingMaps,proto3" json:"padding_maps,omitempty"`
	// The location of step markers that XLA compile will instrument.
	StepMarkerLocation xla.DebugOptions_StepMarkerLocation `protobuf:"varint,12,opt,name=step_marker_location,json=stepMarkerLocation,proto3,enum=xla.DebugOptions_StepMarkerLocation" json:"step_marker_location,omitempty"`
	// Minimum number of batches run through the XLA graph before XLA fusion
	// autotuner is enabled. Default value of zero disables the autotuner.
	// The XLA fusion autotuner can improve performance by executing a heuristic
	// search on the compiler parameters.
	XlaFusionAutotunerThresh int64 `protobuf:"varint,13,opt,name=xla_fusion_autotuner_thresh,json=xlaFusionAutotunerThresh,proto3" json:"xla_fusion_autotuner_thresh,omitempty"`
	// Enables TPU compiler to add partitioning policies for inputs/outputs to
	// the XLA computation for model parallelism.
	EnableAutomaticModelParallelism bool `protobuf:"varint,14,opt,name=enable_automatic_model_parallelism,json=enableAutomaticModelParallelism,proto3" json:"enable_automatic_model_parallelism,omitempty"`
	// Whether to use XLA's SPMD or MPMD partitioner when compiler partitioning is
	// requested.
	UseSpmdForXlaPartitioning bool `protobuf:"varint,15,opt,name=use_spmd_for_xla_partitioning,json=useSpmdForXlaPartitioning,proto3" json:"use_spmd_for_xla_partitioning,omitempty"`
	// Whether to automatically generate XLA shardings for SPMD partitioner.
	UseAutoSpmdForXlaPartitioning bool `protobuf:"varint,18,opt,name=use_auto_spmd_for_xla_partitioning,json=useAutoSpmdForXlaPartitioning,proto3" json:"use_auto_spmd_for_xla_partitioning,omitempty"`
	// Device mesh shape used to create the sharding search space when
	// use_auto_spmd_partitioning=true.
	AutoSpmdMeshShape []int64 `protobuf:"varint,19,rep,packed,name=auto_spmd_mesh_shape,json=autoSpmdMeshShape,proto3" json:"auto_spmd_mesh_shape,omitempty"`
	// Device mesh ids compatible with the above mesh_shape used when
	// use_auto_spmd_partitioning=true.
	AutoSpmdMeshIds []int64 `protobuf:"varint,20,rep,packed,name=auto_spmd_mesh_ids,json=autoSpmdMeshIds,proto3" json:"auto_spmd_mesh_ids,omitempty"`
	// A fingerprint generated by hashing the MLIR module content.
	MlirFingerprint uint64             `protobuf:"varint,17,opt,name=mlir_fingerprint,json=mlirFingerprint,proto3" json:"mlir_fingerprint,omitempty"`
	CompileOptions  *TPUCompileOptions `protobuf:"bytes,21,opt,name=compile_options,json=compileOptions,proto3" json:"compile_options,omitempty"`
}

func (x *TPUCompileMetadataProto) Reset() {
	*x = TPUCompileMetadataProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_protobuf_tpu_compile_metadata_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TPUCompileMetadataProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TPUCompileMetadataProto) ProtoMessage() {}

func (x *TPUCompileMetadataProto) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_protobuf_tpu_compile_metadata_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TPUCompileMetadataProto.ProtoReflect.Descriptor instead.
func (*TPUCompileMetadataProto) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_protobuf_tpu_compile_metadata_proto_rawDescGZIP(), []int{0}
}

func (x *TPUCompileMetadataProto) GetArgs() []*TPUCompileMetadataProto_Arg {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *TPUCompileMetadataProto) GetRetvals() []*TPUCompileMetadataProto_Retval {
	if x != nil {
		return x.Retvals
	}
	return nil
}

func (x *TPUCompileMetadataProto) GetNumReplicas() int32 {
	if x != nil {
		return x.NumReplicas
	}
	return 0
}

func (x *TPUCompileMetadataProto) GetNumCoresPerReplica() int32 {
	if x != nil {
		return x.NumCoresPerReplica
	}
	return 0
}

func (x *TPUCompileMetadataProto) GetDeviceAssignment() *xla.DeviceAssignmentProto {
	if x != nil {
		return x.DeviceAssignment
	}
	return nil
}

func (x *TPUCompileMetadataProto) GetFunctionLibraryFingerprint() uint64 {
	if x != nil {
		return x.FunctionLibraryFingerprint
	}
	return 0
}

func (x *TPUCompileMetadataProto) GetSessionHandle() string {
	if x != nil {
		return x.SessionHandle
	}
	return ""
}

func (x *TPUCompileMetadataProto) GetGuaranteedConstFingerprint() string {
	if x != nil {
		return x.GuaranteedConstFingerprint
	}
	return ""
}

func (x *TPUCompileMetadataProto) GetPaddingMaps() []*PaddingMap {
	if x != nil {
		return x.PaddingMaps
	}
	return nil
}

func (x *TPUCompileMetadataProto) GetStepMarkerLocation() xla.DebugOptions_StepMarkerLocation {
	if x != nil {
		return x.StepMarkerLocation
	}
	return xla.DebugOptions_StepMarkerLocation(0)
}

func (x *TPUCompileMetadataProto) GetXlaFusionAutotunerThresh() int64 {
	if x != nil {
		return x.XlaFusionAutotunerThresh
	}
	return 0
}

func (x *TPUCompileMetadataProto) GetEnableAutomaticModelParallelism() bool {
	if x != nil {
		return x.EnableAutomaticModelParallelism
	}
	return false
}

func (x *TPUCompileMetadataProto) GetUseSpmdForXlaPartitioning() bool {
	if x != nil {
		return x.UseSpmdForXlaPartitioning
	}
	return false
}

func (x *TPUCompileMetadataProto) GetUseAutoSpmdForXlaPartitioning() bool {
	if x != nil {
		return x.UseAutoSpmdForXlaPartitioning
	}
	return false
}

func (x *TPUCompileMetadataProto) GetAutoSpmdMeshShape() []int64 {
	if x != nil {
		return x.AutoSpmdMeshShape
	}
	return nil
}

func (x *TPUCompileMetadataProto) GetAutoSpmdMeshIds() []int64 {
	if x != nil {
		return x.AutoSpmdMeshIds
	}
	return nil
}

func (x *TPUCompileMetadataProto) GetMlirFingerprint() uint64 {
	if x != nil {
		return x.MlirFingerprint
	}
	return 0
}

func (x *TPUCompileMetadataProto) GetCompileOptions() *TPUCompileOptions {
	if x != nil {
		return x.CompileOptions
	}
	return nil
}

// Stable protobuf for TPU compilation options, suitable for persistent storage.
// This proto needs to be backward compatible under maintenance.
// TODO(timshen): investigate and migrate other options from
// TPUCompileMetadataProto.
type TPUCompileOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatrixUnitOperandPrecision TPUCompileOptions_Precision `protobuf:"varint,1,opt,name=matrix_unit_operand_precision,json=matrixUnitOperandPrecision,proto3,enum=tensorflow.tpu.TPUCompileOptions_Precision" json:"matrix_unit_operand_precision,omitempty"`
}

func (x *TPUCompileOptions) Reset() {
	*x = TPUCompileOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_protobuf_tpu_compile_metadata_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TPUCompileOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TPUCompileOptions) ProtoMessage() {}

func (x *TPUCompileOptions) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_protobuf_tpu_compile_metadata_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TPUCompileOptions.ProtoReflect.Descriptor instead.
func (*TPUCompileOptions) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_protobuf_tpu_compile_metadata_proto_rawDescGZIP(), []int{1}
}

func (x *TPUCompileOptions) GetMatrixUnitOperandPrecision() TPUCompileOptions_Precision {
	if x != nil {
		return x.MatrixUnitOperandPrecision
	}
	return TPUCompileOptions_DEFAULT
}

// Description of the types and shapes of the arguments to a computation.
type TPUCompileMetadataProto_Arg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dtype framework.DataType               `protobuf:"varint,1,opt,name=dtype,proto3,enum=tensorflow.DataType" json:"dtype,omitempty"`
	Shape *framework.TensorShapeProto      `protobuf:"bytes,2,opt,name=shape,proto3" json:"shape,omitempty"`
	Kind  TPUCompileMetadataProto_Arg_Kind `protobuf:"varint,3,opt,name=kind,proto3,enum=tensorflow.tpu.TPUCompileMetadataProto_Arg_Kind" json:"kind,omitempty"`
	// The cross-core sharding of this input within each replica, e.g.,
	// assigning to one core, or replicate across all cores.
	Sharding *xla.OpSharding `protobuf:"bytes,4,opt,name=sharding,proto3" json:"sharding,omitempty"`
	// Whether this argument will receive the same data across all replicas.
	IsSameDataAcrossReplicas bool `protobuf:"varint,5,opt,name=is_same_data_across_replicas,json=isSameDataAcrossReplicas,proto3" json:"is_same_data_across_replicas,omitempty"`
	// Whether to allow XLA to produce separate programs to shard/unshard this
	// argument. Requires this arg to be an on-device Kind::VARIABLE, or a
	// Kind::PARAMETER. For Kind::PARAMETER, it represents the initial value of
	// a variable, and retval_index_for_sharding must be specified for the
	// corresponding updated value.
	EnableXlaSharding TPUCompileMetadataProto_Arg_EnableXlaSharding `protobuf:"varint,6,opt,name=enable_xla_sharding,json=enableXlaSharding,proto3,enum=tensorflow.tpu.TPUCompileMetadataProto_Arg_EnableXlaSharding" json:"enable_xla_sharding,omitempty"`
	// If XLA sharding is allowed on a Kind::PARAMETER, this field is used to
	// specify the corresponding updated value in the return values. Use -1 for
	// variables that are not updated.
	RetvalIndexForSharding int32 `protobuf:"varint,8,opt,name=retval_index_for_sharding,json=retvalIndexForSharding,proto3" json:"retval_index_for_sharding,omitempty"`
	// Whether this argument is placed on fast memory or not.
	FastMem bool `protobuf:"varint,7,opt,name=fast_mem,json=fastMem,proto3" json:"fast_mem,omitempty"`
	// Whether to let XLA to decide the layout during compilation, as opposed to
	// using a fixed layout determined by the shape.
	UnrestrictedLayout bool `protobuf:"varint,9,opt,name=unrestricted_layout,json=unrestrictedLayout,proto3" json:"unrestricted_layout,omitempty"`
	// Name of the node that the arg comes from.
	Name string `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	// Whether to use XLA collectives to broadcast this parameter to all
	// replicas, instead of using TensorFlow Send/Recv among the tasks.
	RequiresXlaBroadcast bool `protobuf:"varint,11,opt,name=requires_xla_broadcast,json=requiresXlaBroadcast,proto3" json:"requires_xla_broadcast,omitempty"`
}

func (x *TPUCompileMetadataProto_Arg) Reset() {
	*x = TPUCompileMetadataProto_Arg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_protobuf_tpu_compile_metadata_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TPUCompileMetadataProto_Arg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TPUCompileMetadataProto_Arg) ProtoMessage() {}

func (x *TPUCompileMetadataProto_Arg) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_protobuf_tpu_compile_metadata_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TPUCompileMetadataProto_Arg.ProtoReflect.Descriptor instead.
func (*TPUCompileMetadataProto_Arg) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_protobuf_tpu_compile_metadata_proto_rawDescGZIP(), []int{0, 0}
}

func (x *TPUCompileMetadataProto_Arg) GetDtype() framework.DataType {
	if x != nil {
		return x.Dtype
	}
	return framework.DataType(0)
}

func (x *TPUCompileMetadataProto_Arg) GetShape() *framework.TensorShapeProto {
	if x != nil {
		return x.Shape
	}
	return nil
}

func (x *TPUCompileMetadataProto_Arg) GetKind() TPUCompileMetadataProto_Arg_Kind {
	if x != nil {
		return x.Kind
	}
	return TPUCompileMetadataProto_Arg_INVALID
}

func (x *TPUCompileMetadataProto_Arg) GetSharding() *xla.OpSharding {
	if x != nil {
		return x.Sharding
	}
	return nil
}

func (x *TPUCompileMetadataProto_Arg) GetIsSameDataAcrossReplicas() bool {
	if x != nil {
		return x.IsSameDataAcrossReplicas
	}
	return false
}

func (x *TPUCompileMetadataProto_Arg) GetEnableXlaSharding() TPUCompileMetadataProto_Arg_EnableXlaSharding {
	if x != nil {
		return x.EnableXlaSharding
	}
	return TPUCompileMetadataProto_Arg_DISALLOWED
}

func (x *TPUCompileMetadataProto_Arg) GetRetvalIndexForSharding() int32 {
	if x != nil {
		return x.RetvalIndexForSharding
	}
	return 0
}

func (x *TPUCompileMetadataProto_Arg) GetFastMem() bool {
	if x != nil {
		return x.FastMem
	}
	return false
}

func (x *TPUCompileMetadataProto_Arg) GetUnrestrictedLayout() bool {
	if x != nil {
		return x.UnrestrictedLayout
	}
	return false
}

func (x *TPUCompileMetadataProto_Arg) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TPUCompileMetadataProto_Arg) GetRequiresXlaBroadcast() bool {
	if x != nil {
		return x.RequiresXlaBroadcast
	}
	return false
}

// Description of the return values from a computation.
type TPUCompileMetadataProto_Retval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The cross-core sharding of this return value within each replica, e.g.,
	// assigning to one core, or replicate across all cores.
	Sharding *xla.OpSharding `protobuf:"bytes,1,opt,name=sharding,proto3" json:"sharding,omitempty"`
}

func (x *TPUCompileMetadataProto_Retval) Reset() {
	*x = TPUCompileMetadataProto_Retval{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_core_protobuf_tpu_compile_metadata_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TPUCompileMetadataProto_Retval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TPUCompileMetadataProto_Retval) ProtoMessage() {}

func (x *TPUCompileMetadataProto_Retval) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_core_protobuf_tpu_compile_metadata_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TPUCompileMetadataProto_Retval.ProtoReflect.Descriptor instead.
func (*TPUCompileMetadataProto_Retval) Descriptor() ([]byte, []int) {
	return file_tensorflow_core_protobuf_tpu_compile_metadata_proto_rawDescGZIP(), []int{0, 1}
}

func (x *TPUCompileMetadataProto_Retval) GetSharding() *xla.OpSharding {
	if x != nil {
		return x.Sharding
	}
	return nil
}

var File_tensorflow_core_protobuf_tpu_compile_metadata_proto protoreflect.FileDescriptor

var file_tensorflow_core_protobuf_tpu_compile_metadata_proto_rawDesc = []byte{
	0x0a, 0x33, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x70, 0x75, 0x2f, 0x63,
	0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x74, 0x70, 0x75, 0x1a, 0x21, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f,
	0x77, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x2f, 0x78, 0x6c, 0x61, 0x2f, 0x78,
	0x6c, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x2f, 0x78, 0x6c,
	0x61, 0x2f, 0x78, 0x6c, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2c, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x74, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x5f, 0x73, 0x68, 0x61, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25,
	0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x32, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f,
	0x77, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x70, 0x75, 0x2f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x70, 0x61, 0x64, 0x64,
	0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa3, 0x0f, 0x0a, 0x17, 0x54, 0x50,
	0x55, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x3f, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x74, 0x70, 0x75, 0x2e, 0x54, 0x50, 0x55, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x72, 0x67,
	0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x48, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x76, 0x61, 0x6c,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x74, 0x70, 0x75, 0x2e, 0x54, 0x50, 0x55, 0x43, 0x6f, 0x6d, 0x70,
	0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x74, 0x76, 0x61, 0x6c, 0x52, 0x07, 0x72, 0x65, 0x74, 0x76, 0x61, 0x6c, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x73,
	0x5f, 0x70, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x12, 0x6e, 0x75, 0x6d, 0x43, 0x6f, 0x72, 0x65, 0x73, 0x50, 0x65, 0x72, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x12, 0x47, 0x0a, 0x11, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x10, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x40, 0x0a, 0x1c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x62, 0x72,
	0x61, 0x72, 0x79, 0x5f, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1a, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c,
	0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e,
	0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x40, 0x0a, 0x1c, 0x67, 0x75, 0x61, 0x72,
	0x61, 0x6e, 0x74, 0x65, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x5f, 0x66, 0x69, 0x6e,
	0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a,
	0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x46,
	0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x70, 0x61,
	0x64, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x61, 0x70, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x74, 0x70,
	0x75, 0x2e, 0x50, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x52, 0x0b, 0x70, 0x61,
	0x64, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x73, 0x12, 0x56, 0x0a, 0x14, 0x73, 0x74, 0x65,
	0x70, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x73,
	0x74, 0x65, 0x70, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3d, 0x0a, 0x1b, 0x78, 0x6c, 0x61, 0x5f, 0x66, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x61, 0x75, 0x74, 0x6f, 0x74, 0x75, 0x6e, 0x65, 0x72, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x78, 0x6c, 0x61, 0x46, 0x75, 0x73, 0x69, 0x6f,
	0x6e, 0x41, 0x75, 0x74, 0x6f, 0x74, 0x75, 0x6e, 0x65, 0x72, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x12, 0x4b, 0x0a, 0x22, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x69, 0x63, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6c,
	0x6c, 0x65, 0x6c, 0x69, 0x73, 0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x69, 0x73, 0x6d, 0x12, 0x40, 0x0a,
	0x1d, 0x75, 0x73, 0x65, 0x5f, 0x73, 0x70, 0x6d, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x78, 0x6c,
	0x61, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x75, 0x73, 0x65, 0x53, 0x70, 0x6d, 0x64, 0x46, 0x6f, 0x72,
	0x58, 0x6c, 0x61, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x12,
	0x49, 0x0a, 0x22, 0x75, 0x73, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x73, 0x70, 0x6d, 0x64,
	0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x78, 0x6c, 0x61, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x75, 0x73, 0x65,
	0x41, 0x75, 0x74, 0x6f, 0x53, 0x70, 0x6d, 0x64, 0x46, 0x6f, 0x72, 0x58, 0x6c, 0x61, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x2f, 0x0a, 0x14, 0x61, 0x75,
	0x74, 0x6f, 0x5f, 0x73, 0x70, 0x6d, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x68, 0x5f, 0x73, 0x68, 0x61,
	0x70, 0x65, 0x18, 0x13, 0x20, 0x03, 0x28, 0x03, 0x52, 0x11, 0x61, 0x75, 0x74, 0x6f, 0x53, 0x70,
	0x6d, 0x64, 0x4d, 0x65, 0x73, 0x68, 0x53, 0x68, 0x61, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x12, 0x61,
	0x75, 0x74, 0x6f, 0x5f, 0x73, 0x70, 0x6d, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x68, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0f, 0x61, 0x75, 0x74, 0x6f, 0x53, 0x70, 0x6d,
	0x64, 0x4d, 0x65, 0x73, 0x68, 0x49, 0x64, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x6d, 0x6c, 0x69, 0x72,
	0x5f, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0f, 0x6d, 0x6c, 0x69, 0x72, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72,
	0x69, 0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x5f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x74, 0x70, 0x75, 0x2e, 0x54, 0x50,
	0x55, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a,
	0xe4, 0x05, 0x0a, 0x03, 0x41, 0x72, 0x67, 0x12, 0x2a, 0x0a, 0x05, 0x64, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x64, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x53, 0x68, 0x61, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x05, 0x73, 0x68, 0x61, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x74, 0x70, 0x75, 0x2e, 0x54, 0x50, 0x55, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41,
	0x72, 0x67, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x2b, 0x0a,
	0x08, 0x73, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x4f, 0x70, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x52, 0x08, 0x73, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x3e, 0x0a, 0x1c, 0x69, 0x73,
	0x5f, 0x73, 0x61, 0x6d, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x63, 0x72, 0x6f, 0x73,
	0x73, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x18, 0x69, 0x73, 0x53, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x41, 0x63, 0x72, 0x6f,
	0x73, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x6d, 0x0a, 0x13, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x78, 0x6c, 0x61, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x74, 0x70, 0x75, 0x2e, 0x54, 0x50, 0x55, 0x43, 0x6f, 0x6d, 0x70,
	0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x41, 0x72, 0x67, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x58, 0x6c, 0x61, 0x53, 0x68,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x11, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x58, 0x6c,
	0x61, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x39, 0x0a, 0x19, 0x72, 0x65, 0x74,
	0x76, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x73, 0x68,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x72, 0x65,
	0x74, 0x76, 0x61, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x46, 0x6f, 0x72, 0x53, 0x68, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x6d,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x66, 0x61, 0x73, 0x74, 0x4d, 0x65, 0x6d, 0x12,
	0x2f, 0x0a, 0x13, 0x75, 0x6e, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x5f,
	0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x75, 0x6e,
	0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73,
	0x5f, 0x78, 0x6c, 0x61, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x58, 0x6c,
	0x61, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x22, 0x49, 0x0a, 0x04, 0x4b, 0x69,
	0x6e, 0x64, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12,
	0x0d, 0x0a, 0x09, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x10, 0x01, 0x12, 0x0c,
	0x0a, 0x08, 0x56, 0x41, 0x52, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13,
	0x47, 0x55, 0x41, 0x52, 0x41, 0x4e, 0x54, 0x45, 0x45, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54,
	0x41, 0x4e, 0x54, 0x10, 0x03, 0x22, 0x3f, 0x0a, 0x11, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x58,
	0x6c, 0x61, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x49,
	0x53, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x45,
	0x4e, 0x54, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x4c, 0x4c,
	0x4f, 0x57, 0x45, 0x44, 0x10, 0x02, 0x1a, 0x35, 0x0a, 0x06, 0x52, 0x65, 0x74, 0x76, 0x61, 0x6c,
	0x12, 0x2b, 0x0a, 0x08, 0x73, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x4f, 0x70, 0x53, 0x68, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x52, 0x08, 0x73, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x4a, 0x04, 0x08,
	0x05, 0x10, 0x06, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x4a, 0x04, 0x08, 0x10, 0x10, 0x11, 0x22,
	0xcc, 0x01, 0x0a, 0x11, 0x54, 0x50, 0x55, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x6e, 0x0a, 0x1d, 0x6d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x5f,
	0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x74,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x74, 0x70, 0x75, 0x2e, 0x54, 0x50,
	0x55, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x1a, 0x6d, 0x61, 0x74, 0x72, 0x69,
	0x78, 0x55, 0x6e, 0x69, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x47, 0x0a, 0x09, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12,
	0x0c, 0x0a, 0x08, 0x42, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x31, 0x36, 0x10, 0x01, 0x12, 0x0b, 0x0a,
	0x07, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x33, 0x32, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x45,
	0x4e, 0x53, 0x4f, 0x52, 0x5f, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x33, 0x32, 0x10, 0x03, 0x42, 0xc5,
	0x01, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x74, 0x70, 0x75, 0x42, 0x14, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x02, 0x50, 0x01, 0x5a,
	0x3b, 0x67, 0x69, 0x74, 0x65, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x71, 0x63, 0x69, 0x69, 0x70,
	0x2d, 0x69, 0x63, 0x70, 0x2f, 0x74, 0x66, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2f,
	0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x70, 0x75, 0xf8, 0x01, 0x01, 0xa2,
	0x02, 0x03, 0x54, 0x54, 0x58, 0xaa, 0x02, 0x0e, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x54, 0x70, 0x75, 0xca, 0x02, 0x0e, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66,
	0x6c, 0x6f, 0x77, 0x5c, 0x54, 0x70, 0x75, 0xe2, 0x02, 0x1a, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x66, 0x6c, 0x6f, 0x77, 0x5c, 0x54, 0x70, 0x75, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0f, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f,
	0x77, 0x3a, 0x3a, 0x54, 0x70, 0x75, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tensorflow_core_protobuf_tpu_compile_metadata_proto_rawDescOnce sync.Once
	file_tensorflow_core_protobuf_tpu_compile_metadata_proto_rawDescData = file_tensorflow_core_protobuf_tpu_compile_metadata_proto_rawDesc
)

func file_tensorflow_core_protobuf_tpu_compile_metadata_proto_rawDescGZIP() []byte {
	file_tensorflow_core_protobuf_tpu_compile_metadata_proto_rawDescOnce.Do(func() {
		file_tensorflow_core_protobuf_tpu_compile_metadata_proto_rawDescData = protoimpl.X.CompressGZIP(file_tensorflow_core_protobuf_tpu_compile_metadata_proto_rawDescData)
	})
	return file_tensorflow_core_protobuf_tpu_compile_metadata_proto_rawDescData
}

var file_tensorflow_core_protobuf_tpu_compile_metadata_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_tensorflow_core_protobuf_tpu_compile_metadata_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_tensorflow_core_protobuf_tpu_compile_metadata_proto_goTypes = []interface{}{
	(TPUCompileMetadataProto_Arg_Kind)(0),              // 0: tensorflow.tpu.TPUCompileMetadataProto.Arg.Kind
	(TPUCompileMetadataProto_Arg_EnableXlaSharding)(0), // 1: tensorflow.tpu.TPUCompileMetadataProto.Arg.EnableXlaSharding
	(TPUCompileOptions_Precision)(0),                   // 2: tensorflow.tpu.TPUCompileOptions.Precision
	(*TPUCompileMetadataProto)(nil),                    // 3: tensorflow.tpu.TPUCompileMetadataProto
	(*TPUCompileOptions)(nil),                          // 4: tensorflow.tpu.TPUCompileOptions
	(*TPUCompileMetadataProto_Arg)(nil),                // 5: tensorflow.tpu.TPUCompileMetadataProto.Arg
	(*TPUCompileMetadataProto_Retval)(nil),             // 6: tensorflow.tpu.TPUCompileMetadataProto.Retval
	(*xla.DeviceAssignmentProto)(nil),                  // 7: xla.DeviceAssignmentProto
	(*PaddingMap)(nil),                                 // 8: tensorflow.tpu.PaddingMap
	(xla.DebugOptions_StepMarkerLocation)(0),           // 9: xla.DebugOptions.StepMarkerLocation
	(framework.DataType)(0),                            // 10: tensorflow.DataType
	(*framework.TensorShapeProto)(nil),                 // 11: tensorflow.TensorShapeProto
	(*xla.OpSharding)(nil),                             // 12: xla.OpSharding
}
var file_tensorflow_core_protobuf_tpu_compile_metadata_proto_depIdxs = []int32{
	5,  // 0: tensorflow.tpu.TPUCompileMetadataProto.args:type_name -> tensorflow.tpu.TPUCompileMetadataProto.Arg
	6,  // 1: tensorflow.tpu.TPUCompileMetadataProto.retvals:type_name -> tensorflow.tpu.TPUCompileMetadataProto.Retval
	7,  // 2: tensorflow.tpu.TPUCompileMetadataProto.device_assignment:type_name -> xla.DeviceAssignmentProto
	8,  // 3: tensorflow.tpu.TPUCompileMetadataProto.padding_maps:type_name -> tensorflow.tpu.PaddingMap
	9,  // 4: tensorflow.tpu.TPUCompileMetadataProto.step_marker_location:type_name -> xla.DebugOptions.StepMarkerLocation
	4,  // 5: tensorflow.tpu.TPUCompileMetadataProto.compile_options:type_name -> tensorflow.tpu.TPUCompileOptions
	2,  // 6: tensorflow.tpu.TPUCompileOptions.matrix_unit_operand_precision:type_name -> tensorflow.tpu.TPUCompileOptions.Precision
	10, // 7: tensorflow.tpu.TPUCompileMetadataProto.Arg.dtype:type_name -> tensorflow.DataType
	11, // 8: tensorflow.tpu.TPUCompileMetadataProto.Arg.shape:type_name -> tensorflow.TensorShapeProto
	0,  // 9: tensorflow.tpu.TPUCompileMetadataProto.Arg.kind:type_name -> tensorflow.tpu.TPUCompileMetadataProto.Arg.Kind
	12, // 10: tensorflow.tpu.TPUCompileMetadataProto.Arg.sharding:type_name -> xla.OpSharding
	1,  // 11: tensorflow.tpu.TPUCompileMetadataProto.Arg.enable_xla_sharding:type_name -> tensorflow.tpu.TPUCompileMetadataProto.Arg.EnableXlaSharding
	12, // 12: tensorflow.tpu.TPUCompileMetadataProto.Retval.sharding:type_name -> xla.OpSharding
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_tensorflow_core_protobuf_tpu_compile_metadata_proto_init() }
func file_tensorflow_core_protobuf_tpu_compile_metadata_proto_init() {
	if File_tensorflow_core_protobuf_tpu_compile_metadata_proto != nil {
		return
	}
	file_tensorflow_core_protobuf_tpu_dynamic_padding_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_tensorflow_core_protobuf_tpu_compile_metadata_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TPUCompileMetadataProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_protobuf_tpu_compile_metadata_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TPUCompileOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_protobuf_tpu_compile_metadata_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TPUCompileMetadataProto_Arg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_core_protobuf_tpu_compile_metadata_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TPUCompileMetadataProto_Retval); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tensorflow_core_protobuf_tpu_compile_metadata_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tensorflow_core_protobuf_tpu_compile_metadata_proto_goTypes,
		DependencyIndexes: file_tensorflow_core_protobuf_tpu_compile_metadata_proto_depIdxs,
		EnumInfos:         file_tensorflow_core_protobuf_tpu_compile_metadata_proto_enumTypes,
		MessageInfos:      file_tensorflow_core_protobuf_tpu_compile_metadata_proto_msgTypes,
	}.Build()
	File_tensorflow_core_protobuf_tpu_compile_metadata_proto = out.File
	file_tensorflow_core_protobuf_tpu_compile_metadata_proto_rawDesc = nil
	file_tensorflow_core_protobuf_tpu_compile_metadata_proto_goTypes = nil
	file_tensorflow_core_protobuf_tpu_compile_metadata_proto_depIdxs = nil
}
