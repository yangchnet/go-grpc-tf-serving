// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: tensorflow/compiler/xla/python/tpu_driver/tpu_service.proto

package tpu_driver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CloudTpuDriverClient is the client API for CloudTpuDriver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CloudTpuDriverClient interface {
	// Open the driver. If the driver is already open, return an error.
	Open(ctx context.Context, in *OpenRequest, opts ...grpc.CallOption) (*OpenResponse, error)
	// Close the driver. Any outstanding requests will be terminated.
	Close(ctx context.Context, in *CloseRequest, opts ...grpc.CallOption) (*CloseResponse, error)
	// Reset the driver. All connected clients will be disconnected.
	Reset(ctx context.Context, in *ResetRequest, opts ...grpc.CallOption) (*ResetResponse, error)
	// Query the driver for current system performance information.
	QuerySystemInfo(ctx context.Context, in *QuerySystemInfoRequest, opts ...grpc.CallOption) (*QuerySystemInfoResponse, error)
	// Enqueue an operation to be executed when its dependencies are satisfied.
	StreamExecute(ctx context.Context, opts ...grpc.CallOption) (CloudTpuDriver_StreamExecuteClient, error)
}

type cloudTpuDriverClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudTpuDriverClient(cc grpc.ClientConnInterface) CloudTpuDriverClient {
	return &cloudTpuDriverClient{cc}
}

func (c *cloudTpuDriverClient) Open(ctx context.Context, in *OpenRequest, opts ...grpc.CallOption) (*OpenResponse, error) {
	out := new(OpenResponse)
	err := c.cc.Invoke(ctx, "/tpu_driver.CloudTpuDriver/Open", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudTpuDriverClient) Close(ctx context.Context, in *CloseRequest, opts ...grpc.CallOption) (*CloseResponse, error) {
	out := new(CloseResponse)
	err := c.cc.Invoke(ctx, "/tpu_driver.CloudTpuDriver/Close", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudTpuDriverClient) Reset(ctx context.Context, in *ResetRequest, opts ...grpc.CallOption) (*ResetResponse, error) {
	out := new(ResetResponse)
	err := c.cc.Invoke(ctx, "/tpu_driver.CloudTpuDriver/Reset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudTpuDriverClient) QuerySystemInfo(ctx context.Context, in *QuerySystemInfoRequest, opts ...grpc.CallOption) (*QuerySystemInfoResponse, error) {
	out := new(QuerySystemInfoResponse)
	err := c.cc.Invoke(ctx, "/tpu_driver.CloudTpuDriver/QuerySystemInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudTpuDriverClient) StreamExecute(ctx context.Context, opts ...grpc.CallOption) (CloudTpuDriver_StreamExecuteClient, error) {
	stream, err := c.cc.NewStream(ctx, &CloudTpuDriver_ServiceDesc.Streams[0], "/tpu_driver.CloudTpuDriver/StreamExecute", opts...)
	if err != nil {
		return nil, err
	}
	x := &cloudTpuDriverStreamExecuteClient{stream}
	return x, nil
}

type CloudTpuDriver_StreamExecuteClient interface {
	Send(*StreamRequest) error
	Recv() (*StreamResponse, error)
	grpc.ClientStream
}

type cloudTpuDriverStreamExecuteClient struct {
	grpc.ClientStream
}

func (x *cloudTpuDriverStreamExecuteClient) Send(m *StreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cloudTpuDriverStreamExecuteClient) Recv() (*StreamResponse, error) {
	m := new(StreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CloudTpuDriverServer is the server API for CloudTpuDriver service.
// All implementations must embed UnimplementedCloudTpuDriverServer
// for forward compatibility
type CloudTpuDriverServer interface {
	// Open the driver. If the driver is already open, return an error.
	Open(context.Context, *OpenRequest) (*OpenResponse, error)
	// Close the driver. Any outstanding requests will be terminated.
	Close(context.Context, *CloseRequest) (*CloseResponse, error)
	// Reset the driver. All connected clients will be disconnected.
	Reset(context.Context, *ResetRequest) (*ResetResponse, error)
	// Query the driver for current system performance information.
	QuerySystemInfo(context.Context, *QuerySystemInfoRequest) (*QuerySystemInfoResponse, error)
	// Enqueue an operation to be executed when its dependencies are satisfied.
	StreamExecute(CloudTpuDriver_StreamExecuteServer) error
	mustEmbedUnimplementedCloudTpuDriverServer()
}

// UnimplementedCloudTpuDriverServer must be embedded to have forward compatible implementations.
type UnimplementedCloudTpuDriverServer struct {
}

func (UnimplementedCloudTpuDriverServer) Open(context.Context, *OpenRequest) (*OpenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Open not implemented")
}
func (UnimplementedCloudTpuDriverServer) Close(context.Context, *CloseRequest) (*CloseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}
func (UnimplementedCloudTpuDriverServer) Reset(context.Context, *ResetRequest) (*ResetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reset not implemented")
}
func (UnimplementedCloudTpuDriverServer) QuerySystemInfo(context.Context, *QuerySystemInfoRequest) (*QuerySystemInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySystemInfo not implemented")
}
func (UnimplementedCloudTpuDriverServer) StreamExecute(CloudTpuDriver_StreamExecuteServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamExecute not implemented")
}
func (UnimplementedCloudTpuDriverServer) mustEmbedUnimplementedCloudTpuDriverServer() {}

// UnsafeCloudTpuDriverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CloudTpuDriverServer will
// result in compilation errors.
type UnsafeCloudTpuDriverServer interface {
	mustEmbedUnimplementedCloudTpuDriverServer()
}

func RegisterCloudTpuDriverServer(s grpc.ServiceRegistrar, srv CloudTpuDriverServer) {
	s.RegisterService(&CloudTpuDriver_ServiceDesc, srv)
}

func _CloudTpuDriver_Open_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudTpuDriverServer).Open(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tpu_driver.CloudTpuDriver/Open",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudTpuDriverServer).Open(ctx, req.(*OpenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudTpuDriver_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudTpuDriverServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tpu_driver.CloudTpuDriver/Close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudTpuDriverServer).Close(ctx, req.(*CloseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudTpuDriver_Reset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudTpuDriverServer).Reset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tpu_driver.CloudTpuDriver/Reset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudTpuDriverServer).Reset(ctx, req.(*ResetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudTpuDriver_QuerySystemInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySystemInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudTpuDriverServer).QuerySystemInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tpu_driver.CloudTpuDriver/QuerySystemInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudTpuDriverServer).QuerySystemInfo(ctx, req.(*QuerySystemInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudTpuDriver_StreamExecute_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CloudTpuDriverServer).StreamExecute(&cloudTpuDriverStreamExecuteServer{stream})
}

type CloudTpuDriver_StreamExecuteServer interface {
	Send(*StreamResponse) error
	Recv() (*StreamRequest, error)
	grpc.ServerStream
}

type cloudTpuDriverStreamExecuteServer struct {
	grpc.ServerStream
}

func (x *cloudTpuDriverStreamExecuteServer) Send(m *StreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cloudTpuDriverStreamExecuteServer) Recv() (*StreamRequest, error) {
	m := new(StreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CloudTpuDriver_ServiceDesc is the grpc.ServiceDesc for CloudTpuDriver service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CloudTpuDriver_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tpu_driver.CloudTpuDriver",
	HandlerType: (*CloudTpuDriverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Open",
			Handler:    _CloudTpuDriver_Open_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _CloudTpuDriver_Close_Handler,
		},
		{
			MethodName: "Reset",
			Handler:    _CloudTpuDriver_Reset_Handler,
		},
		{
			MethodName: "QuerySystemInfo",
			Handler:    _CloudTpuDriver_QuerySystemInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamExecute",
			Handler:       _CloudTpuDriver_StreamExecute_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "tensorflow/compiler/xla/python/tpu_driver/tpu_service.proto",
}
