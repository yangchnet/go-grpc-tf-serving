// Copyright 2018 The TensorFlow Authors. All Rights Reserved.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//==============================================================================

// XLA service API.
//
// Users 1) build up computations and 2) create allocations via this API.
// Computations are composed of data flowing between arbitrarily-sized
// vector-oriented operations.
//
// Users build up computations using a ComputationHandle, and talk about
// allocations using GlobalDataHandles.
//
// There are currently no checkpointing capabilities or distribution/replication
// guarantees. The service runs on a single machine (e.g. one task) and that is
// its failure domain.
//
// Canonical example of "alpha * X + Y":
// * Make a computation.
// * Add alpha and X and Y as parameters.
// * Request the multiplication of alpha and X.
// * Request the addition of that result and Y.
//
// Then, pass the computation and appropriately shaped inputs to the XLA
// service's Execute method, which provides a result as a GlobalDataHandle.
//
// All data in XLA computations are conceptually immutable.
//
// Note: this API is subject to change / refinement over time -- use the
// provided client libraries to insulate code from changes to this service API.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: tensorflow/compiler/xla/rpc/xla_service.proto

package rpc

import (
	xla "gitee.com/qciip-icp/tf-serving/tensorflow/compiler/xla"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_tensorflow_compiler_xla_rpc_xla_service_proto protoreflect.FileDescriptor

var file_tensorflow_compiler_xla_rpc_xla_service_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x6d,
	0x70, 0x69, 0x6c, 0x65, 0x72, 0x2f, 0x78, 0x6c, 0x61, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x78, 0x6c,
	0x61, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x03, 0x78, 0x6c, 0x61, 0x1a, 0x21, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77,
	0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x2f, 0x78, 0x6c, 0x61, 0x2f, 0x78, 0x6c,
	0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0xea, 0x0a, 0x0a, 0x0a, 0x58, 0x6c, 0x61, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x0a, 0x55, 0x6e, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x16, 0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x55, 0x6e, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x78,
	0x6c, 0x61, 0x2e, 0x55, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x10, 0x44, 0x65, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x12, 0x1c, 0x2e, 0x78, 0x6c,
	0x61, 0x2e, 0x44, 0x65, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x54, 0x75, 0x70,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x78, 0x6c, 0x61, 0x2e,
	0x44, 0x65, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x54, 0x75, 0x70, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x06, 0x55, 0x6e,
	0x70, 0x61, 0x63, 0x6b, 0x12, 0x12, 0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x55, 0x6e, 0x70, 0x61, 0x63,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x55,
	0x6e, 0x70, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x39, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x70, 0x65, 0x12, 0x14, 0x2e, 0x78, 0x6c,
	0x61, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x15, 0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61, 0x70, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x18, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x61, 0x70,
	0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x21, 0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x78, 0x6c, 0x61, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x08, 0x4c, 0x6f,
	0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x4c, 0x6f, 0x61,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x78,
	0x6c, 0x61, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x2e, 0x78, 0x6c, 0x61, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x1c, 0x2e, 0x78,
	0x6c, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x6f, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x78, 0x6c, 0x61,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x10, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x6f, 0x49, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x12,
	0x1c, 0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x6f,
	0x49, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e,
	0x78, 0x6c, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x6f, 0x49, 0x6e,
	0x66, 0x65, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5a,
	0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x4f, 0x75,
	0x74, 0x66, 0x65, 0x65, 0x64, 0x12, 0x1f, 0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x4f, 0x75, 0x74, 0x66, 0x65, 0x65, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x4f, 0x75, 0x74, 0x66, 0x65, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0b, 0x52, 0x65,
	0x73, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x17, 0x2e, 0x78, 0x6c, 0x61, 0x2e,
	0x52, 0x65, 0x73, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x18, 0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x58,
	0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x47, 0x72, 0x61, 0x70, 0x68, 0x12, 0x20, 0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x47, 0x72, 0x61, 0x70,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x12, 0x1c, 0x2e, 0x78,
	0x6c, 0x61, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x78, 0x6c, 0x61,
	0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x13, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x48, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x12, 0x1f, 0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x70, 0x69,
	0x6c, 0x65, 0x12, 0x13, 0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x36, 0x0a, 0x07, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x12, 0x13, 0x2e, 0x78, 0x6c, 0x61,
	0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x14, 0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x14, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x12,
	0x20, 0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x47, 0x72, 0x61,
	0x70, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1c, 0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x50,
	0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x51, 0x0a, 0x10, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x57, 0x61, 0x69, 0x74,
	0x46, 0x6f, 0x72, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x57, 0x61, 0x69, 0x74, 0x46, 0x6f,
	0x72, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x42, 0x84, 0x01, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x2e, 0x78, 0x6c, 0x61,
	0x42, 0x0f, 0x58, 0x6c, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x48, 0x02, 0x50, 0x01, 0x5a, 0x3a, 0x67, 0x69, 0x74, 0x65, 0x65, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x71, 0x63, 0x69, 0x69, 0x70, 0x2d, 0x69, 0x63, 0x70, 0x2f, 0x74, 0x66, 0x2d, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x6e, 0x67, 0x2f, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77,
	0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x2f, 0x78, 0x6c, 0x61, 0x2f, 0x72, 0x70,
	0x63, 0xa2, 0x02, 0x03, 0x58, 0x58, 0x58, 0xaa, 0x02, 0x03, 0x58, 0x6c, 0x61, 0xca, 0x02, 0x03,
	0x58, 0x6c, 0x61, 0xe2, 0x02, 0x0f, 0x58, 0x6c, 0x61, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x03, 0x58, 0x6c, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var file_tensorflow_compiler_xla_rpc_xla_service_proto_goTypes = []interface{}{
	(*xla.UnregisterRequest)(nil),            // 0: xla.UnregisterRequest
	(*xla.DeconstructTupleRequest)(nil),      // 1: xla.DeconstructTupleRequest
	(*xla.UnpackRequest)(nil),                // 2: xla.UnpackRequest
	(*xla.GetShapeRequest)(nil),              // 3: xla.GetShapeRequest
	(*xla.ComputationGraphStatsRequest)(nil), // 4: xla.ComputationGraphStatsRequest
	(*xla.LoadDataRequest)(nil),              // 5: xla.LoadDataRequest
	(*xla.TransferToClientRequest)(nil),      // 6: xla.TransferToClientRequest
	(*xla.TransferToServerRequest)(nil),      // 7: xla.TransferToServerRequest
	(*xla.TransferToInfeedRequest)(nil),      // 8: xla.TransferToInfeedRequest
	(*xla.TransferFromOutfeedRequest)(nil),   // 9: xla.TransferFromOutfeedRequest
	(*xla.ResetDeviceRequest)(nil),           // 10: xla.ResetDeviceRequest
	(*xla.ComputeConstantGraphRequest)(nil),  // 11: xla.ComputeConstantGraphRequest
	(*xla.GetDeviceHandlesRequest)(nil),      // 12: xla.GetDeviceHandlesRequest
	(*xla.CreateChannelHandleRequest)(nil),   // 13: xla.CreateChannelHandleRequest
	(*xla.CompileRequest)(nil),               // 14: xla.CompileRequest
	(*xla.ExecuteRequest)(nil),               // 15: xla.ExecuteRequest
	(*xla.ExecuteGraphParallelRequest)(nil),  // 16: xla.ExecuteGraphParallelRequest
	(*xla.WaitForExecutionRequest)(nil),      // 17: xla.WaitForExecutionRequest
	(*xla.UnregisterResponse)(nil),           // 18: xla.UnregisterResponse
	(*xla.DeconstructTupleResponse)(nil),     // 19: xla.DeconstructTupleResponse
	(*xla.UnpackResponse)(nil),               // 20: xla.UnpackResponse
	(*xla.GetShapeResponse)(nil),             // 21: xla.GetShapeResponse
	(*xla.ComputationStatsResponse)(nil),     // 22: xla.ComputationStatsResponse
	(*xla.LoadDataResponse)(nil),             // 23: xla.LoadDataResponse
	(*xla.TransferToClientResponse)(nil),     // 24: xla.TransferToClientResponse
	(*xla.TransferToServerResponse)(nil),     // 25: xla.TransferToServerResponse
	(*xla.TransferToInfeedResponse)(nil),     // 26: xla.TransferToInfeedResponse
	(*xla.TransferFromOutfeedResponse)(nil),  // 27: xla.TransferFromOutfeedResponse
	(*xla.ResetDeviceResponse)(nil),          // 28: xla.ResetDeviceResponse
	(*xla.ComputeConstantResponse)(nil),      // 29: xla.ComputeConstantResponse
	(*xla.GetDeviceHandlesResponse)(nil),     // 30: xla.GetDeviceHandlesResponse
	(*xla.CreateChannelHandleResponse)(nil),  // 31: xla.CreateChannelHandleResponse
	(*xla.CompileResponse)(nil),              // 32: xla.CompileResponse
	(*xla.ExecuteResponse)(nil),              // 33: xla.ExecuteResponse
	(*xla.ExecuteParallelResponse)(nil),      // 34: xla.ExecuteParallelResponse
	(*xla.WaitForExecutionResponse)(nil),     // 35: xla.WaitForExecutionResponse
}
var file_tensorflow_compiler_xla_rpc_xla_service_proto_depIdxs = []int32{
	0,  // 0: xla.XlaService.Unregister:input_type -> xla.UnregisterRequest
	1,  // 1: xla.XlaService.DeconstructTuple:input_type -> xla.DeconstructTupleRequest
	2,  // 2: xla.XlaService.Unpack:input_type -> xla.UnpackRequest
	3,  // 3: xla.XlaService.GetShape:input_type -> xla.GetShapeRequest
	4,  // 4: xla.XlaService.GetComputationGraphStats:input_type -> xla.ComputationGraphStatsRequest
	5,  // 5: xla.XlaService.LoadData:input_type -> xla.LoadDataRequest
	6,  // 6: xla.XlaService.TransferToClient:input_type -> xla.TransferToClientRequest
	7,  // 7: xla.XlaService.TransferToServer:input_type -> xla.TransferToServerRequest
	8,  // 8: xla.XlaService.TransferToInfeed:input_type -> xla.TransferToInfeedRequest
	9,  // 9: xla.XlaService.TransferFromOutfeed:input_type -> xla.TransferFromOutfeedRequest
	10, // 10: xla.XlaService.ResetDevice:input_type -> xla.ResetDeviceRequest
	11, // 11: xla.XlaService.ComputeConstantGraph:input_type -> xla.ComputeConstantGraphRequest
	12, // 12: xla.XlaService.GetDeviceHandles:input_type -> xla.GetDeviceHandlesRequest
	13, // 13: xla.XlaService.CreateChannelHandle:input_type -> xla.CreateChannelHandleRequest
	14, // 14: xla.XlaService.Compile:input_type -> xla.CompileRequest
	15, // 15: xla.XlaService.Execute:input_type -> xla.ExecuteRequest
	16, // 16: xla.XlaService.ExecuteGraphParallel:input_type -> xla.ExecuteGraphParallelRequest
	17, // 17: xla.XlaService.WaitForExecution:input_type -> xla.WaitForExecutionRequest
	18, // 18: xla.XlaService.Unregister:output_type -> xla.UnregisterResponse
	19, // 19: xla.XlaService.DeconstructTuple:output_type -> xla.DeconstructTupleResponse
	20, // 20: xla.XlaService.Unpack:output_type -> xla.UnpackResponse
	21, // 21: xla.XlaService.GetShape:output_type -> xla.GetShapeResponse
	22, // 22: xla.XlaService.GetComputationGraphStats:output_type -> xla.ComputationStatsResponse
	23, // 23: xla.XlaService.LoadData:output_type -> xla.LoadDataResponse
	24, // 24: xla.XlaService.TransferToClient:output_type -> xla.TransferToClientResponse
	25, // 25: xla.XlaService.TransferToServer:output_type -> xla.TransferToServerResponse
	26, // 26: xla.XlaService.TransferToInfeed:output_type -> xla.TransferToInfeedResponse
	27, // 27: xla.XlaService.TransferFromOutfeed:output_type -> xla.TransferFromOutfeedResponse
	28, // 28: xla.XlaService.ResetDevice:output_type -> xla.ResetDeviceResponse
	29, // 29: xla.XlaService.ComputeConstantGraph:output_type -> xla.ComputeConstantResponse
	30, // 30: xla.XlaService.GetDeviceHandles:output_type -> xla.GetDeviceHandlesResponse
	31, // 31: xla.XlaService.CreateChannelHandle:output_type -> xla.CreateChannelHandleResponse
	32, // 32: xla.XlaService.Compile:output_type -> xla.CompileResponse
	33, // 33: xla.XlaService.Execute:output_type -> xla.ExecuteResponse
	34, // 34: xla.XlaService.ExecuteGraphParallel:output_type -> xla.ExecuteParallelResponse
	35, // 35: xla.XlaService.WaitForExecution:output_type -> xla.WaitForExecutionResponse
	18, // [18:36] is the sub-list for method output_type
	0,  // [0:18] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_tensorflow_compiler_xla_rpc_xla_service_proto_init() }
func file_tensorflow_compiler_xla_rpc_xla_service_proto_init() {
	if File_tensorflow_compiler_xla_rpc_xla_service_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tensorflow_compiler_xla_rpc_xla_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tensorflow_compiler_xla_rpc_xla_service_proto_goTypes,
		DependencyIndexes: file_tensorflow_compiler_xla_rpc_xla_service_proto_depIdxs,
	}.Build()
	File_tensorflow_compiler_xla_rpc_xla_service_proto = out.File
	file_tensorflow_compiler_xla_rpc_xla_service_proto_rawDesc = nil
	file_tensorflow_compiler_xla_rpc_xla_service_proto_goTypes = nil
	file_tensorflow_compiler_xla_rpc_xla_service_proto_depIdxs = nil
}
