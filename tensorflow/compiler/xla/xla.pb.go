// Copyright 2017 The TensorFlow Authors. All Rights Reserved.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//==============================================================================

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: tensorflow/compiler/xla/xla.proto

package xla

import (
	service "github.com/yangchnet/tf-serving/tensorflow/compiler/xla/service"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DebugOptions_ShapeChecks int32

const (
	// Do not insert any shape checks for dynamically shaped operations; output
	// buffers might contain garbage data if shapes don't match.
	DebugOptions_IGNORE DebugOptions_ShapeChecks = 0
	// Check shapes at runtime, will insert an extra synchronization if shapes
	// cannot be proven correct at compile time.
	DebugOptions_RUNTIME DebugOptions_ShapeChecks = 1
	// Will refuse to compile any program where shape correctness can not be
	// established at compile time.
	DebugOptions_COMPILE_TIME DebugOptions_ShapeChecks = 2
)

// Enum value maps for DebugOptions_ShapeChecks.
var (
	DebugOptions_ShapeChecks_name = map[int32]string{
		0: "IGNORE",
		1: "RUNTIME",
		2: "COMPILE_TIME",
	}
	DebugOptions_ShapeChecks_value = map[string]int32{
		"IGNORE":       0,
		"RUNTIME":      1,
		"COMPILE_TIME": 2,
	}
)

func (x DebugOptions_ShapeChecks) Enum() *DebugOptions_ShapeChecks {
	p := new(DebugOptions_ShapeChecks)
	*p = x
	return p
}

func (x DebugOptions_ShapeChecks) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DebugOptions_ShapeChecks) Descriptor() protoreflect.EnumDescriptor {
	return file_tensorflow_compiler_xla_xla_proto_enumTypes[0].Descriptor()
}

func (DebugOptions_ShapeChecks) Type() protoreflect.EnumType {
	return &file_tensorflow_compiler_xla_xla_proto_enumTypes[0]
}

func (x DebugOptions_ShapeChecks) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DebugOptions_ShapeChecks.Descriptor instead.
func (DebugOptions_ShapeChecks) EnumDescriptor() ([]byte, []int) {
	return file_tensorflow_compiler_xla_xla_proto_rawDescGZIP(), []int{0, 0}
}

type DebugOptions_StepMarkerLocation int32

const (
	// Generate a step marker at the program entry. This handles the case where
	// each step is done by one or multiple program execution(s). Only the first
	// program will be tagged for generating a step marker at the program entry.
	// This is the default.
	DebugOptions_STEP_MARK_AT_ENTRY DebugOptions_StepMarkerLocation = 0
	// Generate a step marker at each iteration of the top level while loop,
	// which is assumed to be a training loop.
	DebugOptions_STEP_MARK_AT_TOP_LEVEL_WHILE_LOOP DebugOptions_StepMarkerLocation = 1
	// Generate a step marker at each iteration of the second level while loops,
	// which is assumed to be a training or eval loop.
	DebugOptions_STEP_MARK_AT_SECOND_LEVEL_WHILE_LOOP DebugOptions_StepMarkerLocation = 3
	// No step marker generated.
	DebugOptions_STEP_MARK_NONE DebugOptions_StepMarkerLocation = 2
)

// Enum value maps for DebugOptions_StepMarkerLocation.
var (
	DebugOptions_StepMarkerLocation_name = map[int32]string{
		0: "STEP_MARK_AT_ENTRY",
		1: "STEP_MARK_AT_TOP_LEVEL_WHILE_LOOP",
		3: "STEP_MARK_AT_SECOND_LEVEL_WHILE_LOOP",
		2: "STEP_MARK_NONE",
	}
	DebugOptions_StepMarkerLocation_value = map[string]int32{
		"STEP_MARK_AT_ENTRY":                   0,
		"STEP_MARK_AT_TOP_LEVEL_WHILE_LOOP":    1,
		"STEP_MARK_AT_SECOND_LEVEL_WHILE_LOOP": 3,
		"STEP_MARK_NONE":                       2,
	}
)

func (x DebugOptions_StepMarkerLocation) Enum() *DebugOptions_StepMarkerLocation {
	p := new(DebugOptions_StepMarkerLocation)
	*p = x
	return p
}

func (x DebugOptions_StepMarkerLocation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DebugOptions_StepMarkerLocation) Descriptor() protoreflect.EnumDescriptor {
	return file_tensorflow_compiler_xla_xla_proto_enumTypes[1].Descriptor()
}

func (DebugOptions_StepMarkerLocation) Type() protoreflect.EnumType {
	return &file_tensorflow_compiler_xla_xla_proto_enumTypes[1]
}

func (x DebugOptions_StepMarkerLocation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DebugOptions_StepMarkerLocation.Descriptor instead.
func (DebugOptions_StepMarkerLocation) EnumDescriptor() ([]byte, []int) {
	return file_tensorflow_compiler_xla_xla_proto_rawDescGZIP(), []int{0, 1}
}

type HloModuleConfigProto_FusionConfigCollection int32

const (
	HloModuleConfigProto_OFF      HloModuleConfigProto_FusionConfigCollection = 0 // Do not collect configuration.
	HloModuleConfigProto_PER_EDGE HloModuleConfigProto_FusionConfigCollection = 1 // Collect per-edge configuration.
	HloModuleConfigProto_PER_NODE HloModuleConfigProto_FusionConfigCollection = 2 // Collect per-node configuration.
)

// Enum value maps for HloModuleConfigProto_FusionConfigCollection.
var (
	HloModuleConfigProto_FusionConfigCollection_name = map[int32]string{
		0: "OFF",
		1: "PER_EDGE",
		2: "PER_NODE",
	}
	HloModuleConfigProto_FusionConfigCollection_value = map[string]int32{
		"OFF":      0,
		"PER_EDGE": 1,
		"PER_NODE": 2,
	}
)

func (x HloModuleConfigProto_FusionConfigCollection) Enum() *HloModuleConfigProto_FusionConfigCollection {
	p := new(HloModuleConfigProto_FusionConfigCollection)
	*p = x
	return p
}

func (x HloModuleConfigProto_FusionConfigCollection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HloModuleConfigProto_FusionConfigCollection) Descriptor() protoreflect.EnumDescriptor {
	return file_tensorflow_compiler_xla_xla_proto_enumTypes[2].Descriptor()
}

func (HloModuleConfigProto_FusionConfigCollection) Type() protoreflect.EnumType {
	return &file_tensorflow_compiler_xla_xla_proto_enumTypes[2]
}

func (x HloModuleConfigProto_FusionConfigCollection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HloModuleConfigProto_FusionConfigCollection.Descriptor instead.
func (HloModuleConfigProto_FusionConfigCollection) EnumDescriptor() ([]byte, []int) {
	return file_tensorflow_compiler_xla_xla_proto_rawDescGZIP(), []int{3, 0}
}

// Debugging options for XLA. These options may change at any time - there are
// no guarantees about backward or forward compatibility for these fields.
type DebugOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Show addresses of HLO ops in graph dump.
	XlaHloGraphAddresses bool `protobuf:"varint,2,opt,name=xla_hlo_graph_addresses,json=xlaHloGraphAddresses,proto3" json:"xla_hlo_graph_addresses,omitempty"`
	// Instrument the computation to collect per-HLO cycle counts.
	XlaHloProfile bool `protobuf:"varint,9,opt,name=xla_hlo_profile,json=xlaHloProfile,proto3" json:"xla_hlo_profile,omitempty"`
	// List of HLO passes to disable/enable. These names must exactly match the
	// pass names as specified by the HloPassInterface::name() method.
	//
	// At least one of xla_disable_hlo_passes and xla_enable_hlo_passes_only must
	// be empty.
	XlaDisableHloPasses    []string `protobuf:"bytes,30,rep,name=xla_disable_hlo_passes,json=xlaDisableHloPasses,proto3" json:"xla_disable_hlo_passes,omitempty"`
	XlaEnableHloPassesOnly []string `protobuf:"bytes,124,rep,name=xla_enable_hlo_passes_only,json=xlaEnableHloPassesOnly,proto3" json:"xla_enable_hlo_passes_only,omitempty"`
	// Disables all HLO passes.  Notes that some passes are necessary for
	// correctness and the invariants that must be satisfied by "fully optimized"
	// HLO are different for different devices and may change over time.  The only
	// "guarantee", such as it is, is that if you compile XLA and dump the
	// optimized HLO for some graph, you should be able to run it again on the
	// same device with the same build of XLA.
	XlaDisableAllHloPasses bool `protobuf:"varint,104,opt,name=xla_disable_all_hlo_passes,json=xlaDisableAllHloPasses,proto3" json:"xla_disable_all_hlo_passes,omitempty"`
	// Numerical optimization level for the XLA compiler backend; the specific
	// interpretation of this value is left to the backends.
	XlaBackendOptimizationLevel int32 `protobuf:"varint,31,opt,name=xla_backend_optimization_level,json=xlaBackendOptimizationLevel,proto3" json:"xla_backend_optimization_level,omitempty"`
	// Embed the compiler IR as a string in the executable.
	XlaEmbedIrInExecutable bool `protobuf:"varint,33,opt,name=xla_embed_ir_in_executable,json=xlaEmbedIrInExecutable,proto3" json:"xla_embed_ir_in_executable,omitempty"`
	// Eliminate implicit broadcasts when lowering user computations to HLO
	// instructions; use explicit broadcast instead.
	XlaEliminateHloImplicitBroadcast bool `protobuf:"varint,35,opt,name=xla_eliminate_hlo_implicit_broadcast,json=xlaEliminateHloImplicitBroadcast,proto3" json:"xla_eliminate_hlo_implicit_broadcast,omitempty"`
	// When generating calls to Eigen in the CPU backend, use multi-threaded Eigen
	// mode.
	XlaCpuMultiThreadEigen bool `protobuf:"varint,60,opt,name=xla_cpu_multi_thread_eigen,json=xlaCpuMultiThreadEigen,proto3" json:"xla_cpu_multi_thread_eigen,omitempty"`
	// Path to directory with cuda/ptx tools and libraries.
	XlaGpuCudaDataDir string `protobuf:"bytes,61,opt,name=xla_gpu_cuda_data_dir,json=xlaGpuCudaDataDir,proto3" json:"xla_gpu_cuda_data_dir,omitempty"`
	// Enable flush-to-zero semantics in the GPU backend.
	XlaGpuFtz bool `protobuf:"varint,62,opt,name=xla_gpu_ftz,json=xlaGpuFtz,proto3" json:"xla_gpu_ftz,omitempty"`
	// If true, in LLVM-based backends, emit !alias.scope metadata in
	// generated IR.
	XlaLlvmEnableAliasScopeMetadata bool `protobuf:"varint,70,opt,name=xla_llvm_enable_alias_scope_metadata,json=xlaLlvmEnableAliasScopeMetadata,proto3" json:"xla_llvm_enable_alias_scope_metadata,omitempty"`
	// If true, in LLVM-based backends, emit !noalias metadata in the
	// generated IR.
	XlaLlvmEnableNoaliasMetadata bool `protobuf:"varint,71,opt,name=xla_llvm_enable_noalias_metadata,json=xlaLlvmEnableNoaliasMetadata,proto3" json:"xla_llvm_enable_noalias_metadata,omitempty"`
	// If true, in LLVM-based backends, emit !invariant.load metadata in
	// the generated IR.
	XlaLlvmEnableInvariantLoadMetadata bool `protobuf:"varint,72,opt,name=xla_llvm_enable_invariant_load_metadata,json=xlaLlvmEnableInvariantLoadMetadata,proto3" json:"xla_llvm_enable_invariant_load_metadata,omitempty"`
	// If true, a set of expensive LLVM optimization passes will not be run.
	XlaLlvmDisableExpensivePasses bool `protobuf:"varint,73,opt,name=xla_llvm_disable_expensive_passes,json=xlaLlvmDisableExpensivePasses,proto3" json:"xla_llvm_disable_expensive_passes,omitempty"`
	// This is used by ClientLibraryTestBase::ComputeAndCompare*. If true, the
	// computation will run n! times with all permunations of layouts for the
	// output shape in rank n. For example, with a 3D shape, all permutations of
	// the set {0, 1, 2} are tried.
	XlaTestAllOutputLayouts bool `protobuf:"varint,90,opt,name=xla_test_all_output_layouts,json=xlaTestAllOutputLayouts,proto3" json:"xla_test_all_output_layouts,omitempty"`
	// This is used by ClientLibraryTestBase::ComputeAndCompare*. If true, the
	// computation will run for all permunations of layouts of all input
	// arguments. For example, with 2 input arguments in 2D and 4D shapes, the
	// computation will run 2! * 4! times.
	XlaTestAllInputLayouts bool `protobuf:"varint,91,opt,name=xla_test_all_input_layouts,json=xlaTestAllInputLayouts,proto3" json:"xla_test_all_input_layouts,omitempty"`
	// Assign colors based on sharding information when generating the Graphviz
	// HLO graph.
	XlaHloGraphShardingColor bool `protobuf:"varint,92,opt,name=xla_hlo_graph_sharding_color,json=xlaHloGraphShardingColor,proto3" json:"xla_hlo_graph_sharding_color,omitempty"`
	// Generate calls to MKL-DNN in the CPU backend.
	XlaCpuUseMklDnn bool `protobuf:"varint,97,opt,name=xla_cpu_use_mkl_dnn,json=xlaCpuUseMklDnn,proto3" json:"xla_cpu_use_mkl_dnn,omitempty"`
	// Enable XLA Runtime in the CPU backend.
	XlaCpuUseXlaRuntime bool `protobuf:"varint,177,opt,name=xla_cpu_use_xla_runtime,json=xlaCpuUseXlaRuntime,proto3" json:"xla_cpu_use_xla_runtime,omitempty"`
	// When true, "unsafe" mathematical optimizations are enabled. These
	// transformations include but are not limited to:
	//
	//   - Reducing the precision of operations (e.g. using an approximate sin
	//     function, or transforming x/y into x * (1/y)).
	//   - Assuming that operations never produce or consume NaN or +/- Inf (this
	//     behavior can be adjusted using xla_cpu_fast_math_allow_{nans|infs}).
	//   - Assuming that +0 and -0 are indistinguishable.
	XlaCpuEnableFastMath bool `protobuf:"varint,99,opt,name=xla_cpu_enable_fast_math,json=xlaCpuEnableFastMath,proto3" json:"xla_cpu_enable_fast_math,omitempty"`
	// When xla_cpu_enable_fast_math is true then this controls whether we allow
	// operations to produce NaNs.  Ignored when xla_cpu_enable_fast_math is
	// false.
	XlaCpuFastMathHonorNans bool `protobuf:"varint,120,opt,name=xla_cpu_fast_math_honor_nans,json=xlaCpuFastMathHonorNans,proto3" json:"xla_cpu_fast_math_honor_nans,omitempty"`
	// When xla_cpu_enable_fast_math is true then this controls whether we allow
	// operations to produce infinites. Ignored when xla_cpu_enable_fast_math is
	// false.
	XlaCpuFastMathHonorInfs bool `protobuf:"varint,121,opt,name=xla_cpu_fast_math_honor_infs,json=xlaCpuFastMathHonorInfs,proto3" json:"xla_cpu_fast_math_honor_infs,omitempty"`
	// When xla_cpu_enable_fast_math is true then this controls whether we forbid
	// to use the reciprocal of an argument instead of division. Ignored when
	// xla_cpu_enable_fast_math is false.
	XlaCpuFastMathHonorDivision bool `protobuf:"varint,126,opt,name=xla_cpu_fast_math_honor_division,json=xlaCpuFastMathHonorDivision,proto3" json:"xla_cpu_fast_math_honor_division,omitempty"`
	// When xla_cpu_enable_fast_math is true then this controls whether we forbid
	// to approximate calculations for functions. Ignored when
	// xla_cpu_enable_fast_math is false.
	XlaCpuFastMathHonorFunctions bool `protobuf:"varint,129,opt,name=xla_cpu_fast_math_honor_functions,json=xlaCpuFastMathHonorFunctions,proto3" json:"xla_cpu_fast_math_honor_functions,omitempty"`
	// When false we lower the Minimum and Maximum hlos in the CPU backend such
	// that Min(NotNaN, NaN) = Min(NaN, NotNaN) = NaN.  In other words, if flag
	// this is false we always propagate NaNs through Min and Max.
	//
	// Note, this does not correspond to the exact same behavior as the gpu flag
	// below!
	XlaCpuEnableFastMinMax bool `protobuf:"varint,140,opt,name=xla_cpu_enable_fast_min_max,json=xlaCpuEnableFastMinMax,proto3" json:"xla_cpu_enable_fast_min_max,omitempty"`
	// When true we lower the Minimum and Maximum hlos in the GPU backend such
	// that Min(NotNaN, NaN) = Min(NaN, NotNaN) = NotNaN.  In other words, if flag
	// this is true we don't propagate NaNs through Min and Max.
	//
	// Note, this does not correspond to the exact same behavior as the cpu flag
	// above!
	XlaGpuEnableFastMinMax bool `protobuf:"varint,100,opt,name=xla_gpu_enable_fast_min_max,json=xlaGpuEnableFastMinMax,proto3" json:"xla_gpu_enable_fast_min_max,omitempty"`
	// Allows xla to increase the output precision of floating point operations.
	XlaAllowExcessPrecision bool `protobuf:"varint,122,opt,name=xla_allow_excess_precision,json=xlaAllowExcessPrecision,proto3" json:"xla_allow_excess_precision,omitempty"`
	// Crashes the program when any kind of verification fails, instead of just
	// logging the failures. One example is cross checking of convolution results
	// among different algorithms.
	XlaGpuCrashOnVerificationFailures bool `protobuf:"varint,101,opt,name=xla_gpu_crash_on_verification_failures,json=xlaGpuCrashOnVerificationFailures,proto3" json:"xla_gpu_crash_on_verification_failures,omitempty"`
	// 0:   Disable gemm and convolution autotuning.
	// 1:   Enable autotuning, but disable correctness checking.
	// 2:   Also set output buffers to random numbers during autotuning.
	// 3:   Also reset output buffers to random numbers after autotuning each
	//
	//	algorithm.
	//
	// 4+:  Also check for correct outputs and for out-of-bounds reads/writes.
	//
	// Default: 4.
	XlaGpuAutotuneLevel int32 `protobuf:"varint,123,opt,name=xla_gpu_autotune_level,json=xlaGpuAutotuneLevel,proto3" json:"xla_gpu_autotune_level,omitempty"`
	// Force the host platform to pretend that there are these many host
	// "devices".  All these devices are backed by the same threadpool.  Defaults
	// to 1.
	//
	// Setting this to anything other than 1 can increase overhead from context
	// switching but we let the user override this behavior to help run tests on
	// the host that run models in parallel across multiple devices.
	XlaForceHostPlatformDeviceCount int32 `protobuf:"varint,102,opt,name=xla_force_host_platform_device_count,json=xlaForceHostPlatformDeviceCount,proto3" json:"xla_force_host_platform_device_count,omitempty"`
	// If set to true XLA:GPU invokes `ptxas` with -O0 (default is -O3).
	XlaGpuDisableGpuasmOptimizations bool                     `protobuf:"varint,103,opt,name=xla_gpu_disable_gpuasm_optimizations,json=xlaGpuDisableGpuasmOptimizations,proto3" json:"xla_gpu_disable_gpuasm_optimizations,omitempty"`
	XlaGpuShapeChecks                DebugOptions_ShapeChecks `protobuf:"varint,170,opt,name=xla_gpu_shape_checks,json=xlaGpuShapeChecks,proto3,enum=xla.DebugOptions_ShapeChecks" json:"xla_gpu_shape_checks,omitempty"`
	// Enable MLIR-based lowering in XLA:CPU instead of LLVM emitters.
	XlaCpuEnableMlirLowering bool `protobuf:"varint,171,opt,name=xla_cpu_enable_mlir_lowering,json=xlaCpuEnableMlirLowering,proto3" json:"xla_cpu_enable_mlir_lowering,omitempty"`
	// If true, use MLIR instead of IR emitter to generate device code for
	// supported lmhlo.fusion ops. See xla::gpu::RewriteFusionOps() for details.
	XlaGpuEnableMlirLowering bool `protobuf:"varint,173,opt,name=xla_gpu_enable_mlir_lowering,json=xlaGpuEnableMlirLowering,proto3" json:"xla_gpu_enable_mlir_lowering,omitempty"`
	// If true, generate softmax fusion nodes which are used in the MLIR lowering
	// to generate device code for softmax.
	XlaGpuEnableSoftmaxFusion bool `protobuf:"varint,179,opt,name=xla_gpu_enable_softmax_fusion,json=xlaGpuEnableSoftmaxFusion,proto3" json:"xla_gpu_enable_softmax_fusion,omitempty"`
	// Enable fast math with eigen in the HLO evaluator.
	XlaHloEvaluatorUseFastPath bool `protobuf:"varint,106,opt,name=xla_hlo_evaluator_use_fast_path,json=xlaHloEvaluatorUseFastPath,proto3" json:"xla_hlo_evaluator_use_fast_path,omitempty"`
	// Temporary option to allow support for both the R1 and the scalar index
	// versions of DynamicSlice and DynamicUpdateSlice. Only used for testing.
	XlaAllowScalarIndexDynamicOps bool `protobuf:"varint,107,opt,name=xla_allow_scalar_index_dynamic_ops,json=xlaAllowScalarIndexDynamicOps,proto3" json:"xla_allow_scalar_index_dynamic_ops,omitempty"`
	// Option to emit a target-specific marker to indicate the start of a training
	// step. The location of the marker (if any) is determined by the option
	// value.
	XlaStepMarkerLocation DebugOptions_StepMarkerLocation `protobuf:"varint,108,opt,name=xla_step_marker_location,json=xlaStepMarkerLocation,proto3,enum=xla.DebugOptions_StepMarkerLocation" json:"xla_step_marker_location,omitempty"`
	// Directory to dump into.
	XlaDumpTo string `protobuf:"bytes,109,opt,name=xla_dump_to,json=xlaDumpTo,proto3" json:"xla_dump_to,omitempty"`
	// If specified, will only dump modules which match this regexp.
	XlaDumpHloModuleRe string `protobuf:"bytes,110,opt,name=xla_dump_hlo_module_re,json=xlaDumpHloModuleRe,proto3" json:"xla_dump_hlo_module_re,omitempty"`
	// If this flag is specified, will also dump HLO before and after passes that
	// match this regular expression.  Set to .* to dump before/after all passes.
	XlaDumpHloPassRe string `protobuf:"bytes,111,opt,name=xla_dump_hlo_pass_re,json=xlaDumpHloPassRe,proto3" json:"xla_dump_hlo_pass_re,omitempty"`
	// Specifies the format that HLO is dumped in.  Multiple of these may be
	// specified.
	XlaDumpHloAsText  bool `protobuf:"varint,112,opt,name=xla_dump_hlo_as_text,json=xlaDumpHloAsText,proto3" json:"xla_dump_hlo_as_text,omitempty"`
	XlaDumpHloAsProto bool `protobuf:"varint,113,opt,name=xla_dump_hlo_as_proto,json=xlaDumpHloAsProto,proto3" json:"xla_dump_hlo_as_proto,omitempty"`
	XlaDumpHloAsDot   bool `protobuf:"varint,114,opt,name=xla_dump_hlo_as_dot,json=xlaDumpHloAsDot,proto3" json:"xla_dump_hlo_as_dot,omitempty"`
	XlaDumpHloAsUrl   bool `protobuf:"varint,115,opt,name=xla_dump_hlo_as_url,json=xlaDumpHloAsUrl,proto3" json:"xla_dump_hlo_as_url,omitempty"`
	// Dump HLO graphs as an HTML (DOT -> SVG inlined in HTML)
	XlaDumpHloAsHtml bool `protobuf:"varint,116,opt,name=xla_dump_hlo_as_html,json=xlaDumpHloAsHtml,proto3" json:"xla_dump_hlo_as_html,omitempty"`
	// Dump the visualization of the fusion progress.
	XlaDumpFusionVisualization bool `protobuf:"varint,149,opt,name=xla_dump_fusion_visualization,json=xlaDumpFusionVisualization,proto3" json:"xla_dump_fusion_visualization,omitempty"`
	// If true, every time an HLO module is run, we will dump an HloSnapshot
	// (essentially, a serialized module plus its inputs) to the --xla_dump_to
	// directory.
	XlaDumpHloSnapshots bool `protobuf:"varint,118,opt,name=xla_dump_hlo_snapshots,json=xlaDumpHloSnapshots,proto3" json:"xla_dump_hlo_snapshots,omitempty"`
	// Include a timestamp in the dumped filenames.
	XlaDumpIncludeTimestamp bool `protobuf:"varint,131,opt,name=xla_dump_include_timestamp,json=xlaDumpIncludeTimestamp,proto3" json:"xla_dump_include_timestamp,omitempty"`
	// Max number of hlo module dumps in a directory. Set to < 0 for unbounded.
	XlaDumpMaxHloModules int32 `protobuf:"varint,132,opt,name=xla_dump_max_hlo_modules,json=xlaDumpMaxHloModules,proto3" json:"xla_dump_max_hlo_modules,omitempty"`
	// Dump HloModuleMetadata as a text proto for each HLO module.
	XlaDumpModuleMetadata bool `protobuf:"varint,144,opt,name=xla_dump_module_metadata,json=xlaDumpModuleMetadata,proto3" json:"xla_dump_module_metadata,omitempty"`
	// GZip-compress protos dumped via --xla_dump_hlo_as_proto.
	XlaDumpCompressProtos bool `protobuf:"varint,151,opt,name=xla_dump_compress_protos,json=xlaDumpCompressProtos,proto3" json:"xla_dump_compress_protos,omitempty"`
	// Dump HLO in long text format. Ignored unless xla_dump_hlo_as_text is true.
	XlaDumpHloAsLongText bool `protobuf:"varint,164,opt,name=xla_dump_hlo_as_long_text,json=xlaDumpHloAsLongText,proto3" json:"xla_dump_hlo_as_long_text,omitempty"`
	// Overrides for XLA GPU's convolution layout heuristic.
	XlaGpuForceConvNchw bool `protobuf:"varint,125,opt,name=xla_gpu_force_conv_nchw,json=xlaGpuForceConvNchw,proto3" json:"xla_gpu_force_conv_nchw,omitempty"`
	XlaGpuForceConvNhwc bool `protobuf:"varint,146,opt,name=xla_gpu_force_conv_nhwc,json=xlaGpuForceConvNhwc,proto3" json:"xla_gpu_force_conv_nhwc,omitempty"`
	// Paths to files with ptx code.
	XlaGpuPtxFile []string `protobuf:"bytes,127,rep,name=xla_gpu_ptx_file,json=xlaGpuPtxFile,proto3" json:"xla_gpu_ptx_file,omitempty"`
	// Whether to dump llvm ir when compiling to ptx.
	XlaGpuDumpLlvmir bool `protobuf:"varint,155,opt,name=xla_gpu_dump_llvmir,json=xlaGpuDumpLlvmir,proto3" json:"xla_gpu_dump_llvmir,omitempty"`
	// Denylist for cuDNN convolutions.
	XlaGpuAlgorithmDenylistPath string `protobuf:"bytes,128,opt,name=xla_gpu_algorithm_denylist_path,json=xlaGpuAlgorithmDenylistPath,proto3" json:"xla_gpu_algorithm_denylist_path,omitempty"`
	// Debug options that trigger execution errors when NaN or Inf are detected.
	XlaTpuDetectNan bool `protobuf:"varint,135,opt,name=xla_tpu_detect_nan,json=xlaTpuDetectNan,proto3" json:"xla_tpu_detect_nan,omitempty"`
	XlaTpuDetectInf bool `protobuf:"varint,136,opt,name=xla_tpu_detect_inf,json=xlaTpuDetectInf,proto3" json:"xla_tpu_detect_inf,omitempty"`
	// True if TraceMe annotations are enabled for XLA:CPU.
	XlaCpuEnableXprofTraceme bool `protobuf:"varint,137,opt,name=xla_cpu_enable_xprof_traceme,json=xlaCpuEnableXprofTraceme,proto3" json:"xla_cpu_enable_xprof_traceme,omitempty"`
	// It is usually preferable to not fallback to the driver; it can consume more
	// memory, or have bugs.
	XlaGpuUnsafeFallbackToDriverOnPtxasNotFound bool `protobuf:"varint,138,opt,name=xla_gpu_unsafe_fallback_to_driver_on_ptxas_not_found,json=xlaGpuUnsafeFallbackToDriverOnPtxasNotFound,proto3" json:"xla_gpu_unsafe_fallback_to_driver_on_ptxas_not_found,omitempty"`
	// Extra parameters to pass the GPU assembler.
	XlaGpuAsmExtraFlags string `protobuf:"bytes,141,opt,name=xla_gpu_asm_extra_flags,json=xlaGpuAsmExtraFlags,proto3" json:"xla_gpu_asm_extra_flags,omitempty"`
	// Per-heap size constraint. New heaps will be created if per-heap max size is
	// reached.
	XlaMultiheapSizeConstraintPerHeap int32 `protobuf:"varint,142,opt,name=xla_multiheap_size_constraint_per_heap,json=xlaMultiheapSizeConstraintPerHeap,proto3" json:"xla_multiheap_size_constraint_per_heap,omitempty"`
	// Enable detailed logging into vlog and xla dumping. If this is disabled, no
	// compilation summary will be printed in the end of computation and no hlo
	// modules will be dumped.
	XlaDetailedLoggingAndDumping bool `protobuf:"varint,143,opt,name=xla_detailed_logging_and_dumping,json=xlaDetailedLoggingAndDumping,proto3" json:"xla_detailed_logging_and_dumping,omitempty"`
	// Overrides normal multi-threaded compilation settting to use this many
	// threads. Setting to 0 (the default value) means no enforcement.
	XlaGpuForceCompilationParallelism int32 `protobuf:"varint,147,opt,name=xla_gpu_force_compilation_parallelism,json=xlaGpuForceCompilationParallelism,proto3" json:"xla_gpu_force_compilation_parallelism,omitempty"`
	// Guarantees run-to-run determinism. At present, the HLO ops Scatter and
	// SelectAndScatter do not have deterministic XLA:GPU implementations.
	// Compilation errors out if these ops are encountered.
	XlaGpuDeterministicOps bool `protobuf:"varint,148,opt,name=xla_gpu_deterministic_ops,json=xlaGpuDeterministicOps,proto3" json:"xla_gpu_deterministic_ops,omitempty"`
	// Paths to files with LLVM code.
	XlaGpuLlvmIrFile []string `protobuf:"bytes,150,rep,name=xla_gpu_llvm_ir_file,json=xlaGpuLlvmIrFile,proto3" json:"xla_gpu_llvm_ir_file,omitempty"`
	// Convert synchronous all-reduces ops into asynchronous.
	XlaGpuEnableAsyncAllReduce bool `protobuf:"varint,152,opt,name=xla_gpu_enable_async_all_reduce,json=xlaGpuEnableAsyncAllReduce,proto3" json:"xla_gpu_enable_async_all_reduce,omitempty"`
	// Convert synchronous collective-permute ops into asynchronous.
	XlaGpuEnableAsyncCollectivePermute bool `protobuf:"varint,183,opt,name=xla_gpu_enable_async_collective_permute,json=xlaGpuEnableAsyncCollectivePermute,proto3" json:"xla_gpu_enable_async_collective_permute,omitempty"`
	// Size threshold (in bytes) for the GPU all-reduce combiner.
	XlaGpuAllReduceCombineThresholdBytes int64 `protobuf:"varint,157,opt,name=xla_gpu_all_reduce_combine_threshold_bytes,json=xlaGpuAllReduceCombineThresholdBytes,proto3" json:"xla_gpu_all_reduce_combine_threshold_bytes,omitempty"`
	// Combine GPU all-reduces into a single operation over a contiguous buffer.
	XlaGpuAllReduceContiguous bool `protobuf:"varint,158,opt,name=xla_gpu_all_reduce_contiguous,json=xlaGpuAllReduceContiguous,proto3" json:"xla_gpu_all_reduce_contiguous,omitempty"`
	// Number of devices per host for first stage of BlueConnect decomposition
	// pass. The pass will attempt to decompose all-reduces ops into a
	// ReduceScatter-AllReduce-AllGather sequence, with the initial ReduceScatter
	// being performed over all of the devices in the same host. Set to < 1 to
	// disable all-reduce decomposition.
	XlaGpuAllReduceBlueconnectNumDevicesPerHost int32 `protobuf:"varint,159,opt,name=xla_gpu_all_reduce_blueconnect_num_devices_per_host,json=xlaGpuAllReduceBlueconnectNumDevicesPerHost,proto3" json:"xla_gpu_all_reduce_blueconnect_num_devices_per_host,omitempty"`
	// Whether to use the cuDNN frontend API for convolutions when possible.
	XlaGpuEnableCudnnFrontend bool `protobuf:"varint,160,opt,name=xla_gpu_enable_cudnn_frontend,json=xlaGpuEnableCudnnFrontend,proto3" json:"xla_gpu_enable_cudnn_frontend,omitempty"`
	// Disable dumping metadata in HLO dumps.
	XlaDumpDisableMetadata bool `protobuf:"varint,153,opt,name=xla_dump_disable_metadata,json=xlaDumpDisableMetadata,proto3" json:"xla_dump_disable_metadata,omitempty"`
	// If this flag is specified, will only dump HLO before and after passes in
	// the pass pipeline that matches this regular expression. Default empty value
	// enables dumping in all pipelines.
	XlaDumpHloPipelineRe string `protobuf:"bytes,154,opt,name=xla_dump_hlo_pipeline_re,json=xlaDumpHloPipelineRe,proto3" json:"xla_dump_hlo_pipeline_re,omitempty"`
	// If true, abort immediately when conv algorithm picker fails, rather than
	// logging a warning and proceeding with fallback.
	XlaGpuStrictConvAlgorithmPicker bool `protobuf:"varint,156,opt,name=xla_gpu_strict_conv_algorithm_picker,json=xlaGpuStrictConvAlgorithmPicker,proto3" json:"xla_gpu_strict_conv_algorithm_picker,omitempty"`
	// If true, use XLA runtime for XLA:GPU backend.
	XlaGpuEnableXlaRuntimeExecutable bool `protobuf:"varint,169,opt,name=xla_gpu_enable_xla_runtime_executable,json=xlaGpuEnableXlaRuntimeExecutable,proto3" json:"xla_gpu_enable_xla_runtime_executable,omitempty"`
	// Timeout in seconds before terminating jobs that are stuck in a NCCL
	// Rendezvous. Negative value disables the timeout and will not terminate.
	XlaGpuNcclTerminationTimeoutSeconds int64 `protobuf:"varint,163,opt,name=xla_gpu_nccl_termination_timeout_seconds,json=xlaGpuNcclTerminationTimeoutSeconds,proto3" json:"xla_gpu_nccl_termination_timeout_seconds,omitempty"`
	// Enables shared constants for XLA/GPU. This allows large constants to be
	// shared among multiple GPU executables.
	XlaGpuEnableSharedConstants bool `protobuf:"varint,165,opt,name=xla_gpu_enable_shared_constants,json=xlaGpuEnableSharedConstants,proto3" json:"xla_gpu_enable_shared_constants,omitempty"`
	// Whether to use cuBLASLt for GEMMs on GPUs.
	XlaGpuEnableCublaslt bool `protobuf:"varint,166,opt,name=xla_gpu_enable_cublaslt,json=xlaGpuEnableCublaslt,proto3" json:"xla_gpu_enable_cublaslt,omitempty"`
	// Whether XLA is allowed to use CUDA Graphs.
	XlaGpuEnableCudaGraphs bool `protobuf:"varint,180,opt,name=xla_gpu_enable_cuda_graphs,json=xlaGpuEnableCudaGraphs,proto3" json:"xla_gpu_enable_cuda_graphs,omitempty"`
	// Size threshold (in megabytes) for the GPU redzone scratch allocator.
	XlaGpuRedzoneScratchMaxMegabytes int64 `protobuf:"varint,167,opt,name=xla_gpu_redzone_scratch_max_megabytes,json=xlaGpuRedzoneScratchMaxMegabytes,proto3" json:"xla_gpu_redzone_scratch_max_megabytes,omitempty"`
	// Allows all floating-point conversions to be simplified, including those
	// that affect the numerics. The `BFloat16Normalization` pass inserts many
	// `f32 -> bf16 -> f32` conversion pairs. These are not removed by the
	// `AlgebraicSimplifier`, as that will only simplify conversions that are
	// no-ops, e.g. `bf16 -> f32 -> bf16`. Removing these improves accuracy.
	XlaGpuSimplifyAllFpConversions bool `protobuf:"varint,168,opt,name=xla_gpu_simplify_all_fp_conversions,json=xlaGpuSimplifyAllFpConversions,proto3" json:"xla_gpu_simplify_all_fp_conversions,omitempty"`
	// An experimental option to force all layouts present in the
	// after-optimizations HLO to be descending, e.g.
	// ShapeUtil::MakeShapeWithDescendingLayout is an identity on all
	// instructions.
	XlaGpuNormalizeLayouts bool `protobuf:"varint,172,opt,name=xla_gpu_normalize_layouts,json=xlaGpuNormalizeLayouts,proto3" json:"xla_gpu_normalize_layouts,omitempty"`
	// Generate calls to Arm Compute Library in the CPU backend.
	XlaCpuUseAcl bool `protobuf:"varint,174,opt,name=xla_cpu_use_acl,json=xlaCpuUseAcl,proto3" json:"xla_cpu_use_acl,omitempty"`
	// By default, XLA:CPU will run fp16 dot/conv as fp32, as this is generally
	// (much) faster on our hardware.  Set this flag to disable this behavior.
	XlaCpuStrictDotConvMath bool `protobuf:"varint,175,opt,name=xla_cpu_strict_dot_conv_math,json=xlaCpuStrictDotConvMath,proto3" json:"xla_cpu_strict_dot_conv_math,omitempty"`
	// An option to enable using cuDNN runtime compiled fusion kernels which is
	// available and recommended for Ampere+ GPUs.
	XlaGpuUseRuntimeFusion       bool `protobuf:"varint,181,opt,name=xla_gpu_use_runtime_fusion,json=xlaGpuUseRuntimeFusion,proto3" json:"xla_gpu_use_runtime_fusion,omitempty"`
	XlaDumpLatencyHidingSchedule bool `protobuf:"varint,182,opt,name=xla_dump_latency_hiding_schedule,json=xlaDumpLatencyHidingSchedule,proto3" json:"xla_dump_latency_hiding_schedule,omitempty"`
	// Extra options to pass to the compilation backend (e.g. LLVM); specific
	// interpretation of these values is left to the backend.
	XlaBackendExtraOptions map[string]string `protobuf:"bytes,500,rep,name=xla_backend_extra_options,json=xlaBackendExtraOptions,proto3" json:"xla_backend_extra_options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DebugOptions) Reset() {
	*x = DebugOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DebugOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugOptions) ProtoMessage() {}

func (x *DebugOptions) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugOptions.ProtoReflect.Descriptor instead.
func (*DebugOptions) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_xla_xla_proto_rawDescGZIP(), []int{0}
}

func (x *DebugOptions) GetXlaHloGraphAddresses() bool {
	if x != nil {
		return x.XlaHloGraphAddresses
	}
	return false
}

func (x *DebugOptions) GetXlaHloProfile() bool {
	if x != nil {
		return x.XlaHloProfile
	}
	return false
}

func (x *DebugOptions) GetXlaDisableHloPasses() []string {
	if x != nil {
		return x.XlaDisableHloPasses
	}
	return nil
}

func (x *DebugOptions) GetXlaEnableHloPassesOnly() []string {
	if x != nil {
		return x.XlaEnableHloPassesOnly
	}
	return nil
}

func (x *DebugOptions) GetXlaDisableAllHloPasses() bool {
	if x != nil {
		return x.XlaDisableAllHloPasses
	}
	return false
}

func (x *DebugOptions) GetXlaBackendOptimizationLevel() int32 {
	if x != nil {
		return x.XlaBackendOptimizationLevel
	}
	return 0
}

func (x *DebugOptions) GetXlaEmbedIrInExecutable() bool {
	if x != nil {
		return x.XlaEmbedIrInExecutable
	}
	return false
}

func (x *DebugOptions) GetXlaEliminateHloImplicitBroadcast() bool {
	if x != nil {
		return x.XlaEliminateHloImplicitBroadcast
	}
	return false
}

func (x *DebugOptions) GetXlaCpuMultiThreadEigen() bool {
	if x != nil {
		return x.XlaCpuMultiThreadEigen
	}
	return false
}

func (x *DebugOptions) GetXlaGpuCudaDataDir() string {
	if x != nil {
		return x.XlaGpuCudaDataDir
	}
	return ""
}

func (x *DebugOptions) GetXlaGpuFtz() bool {
	if x != nil {
		return x.XlaGpuFtz
	}
	return false
}

func (x *DebugOptions) GetXlaLlvmEnableAliasScopeMetadata() bool {
	if x != nil {
		return x.XlaLlvmEnableAliasScopeMetadata
	}
	return false
}

func (x *DebugOptions) GetXlaLlvmEnableNoaliasMetadata() bool {
	if x != nil {
		return x.XlaLlvmEnableNoaliasMetadata
	}
	return false
}

func (x *DebugOptions) GetXlaLlvmEnableInvariantLoadMetadata() bool {
	if x != nil {
		return x.XlaLlvmEnableInvariantLoadMetadata
	}
	return false
}

func (x *DebugOptions) GetXlaLlvmDisableExpensivePasses() bool {
	if x != nil {
		return x.XlaLlvmDisableExpensivePasses
	}
	return false
}

func (x *DebugOptions) GetXlaTestAllOutputLayouts() bool {
	if x != nil {
		return x.XlaTestAllOutputLayouts
	}
	return false
}

func (x *DebugOptions) GetXlaTestAllInputLayouts() bool {
	if x != nil {
		return x.XlaTestAllInputLayouts
	}
	return false
}

func (x *DebugOptions) GetXlaHloGraphShardingColor() bool {
	if x != nil {
		return x.XlaHloGraphShardingColor
	}
	return false
}

func (x *DebugOptions) GetXlaCpuUseMklDnn() bool {
	if x != nil {
		return x.XlaCpuUseMklDnn
	}
	return false
}

func (x *DebugOptions) GetXlaCpuUseXlaRuntime() bool {
	if x != nil {
		return x.XlaCpuUseXlaRuntime
	}
	return false
}

func (x *DebugOptions) GetXlaCpuEnableFastMath() bool {
	if x != nil {
		return x.XlaCpuEnableFastMath
	}
	return false
}

func (x *DebugOptions) GetXlaCpuFastMathHonorNans() bool {
	if x != nil {
		return x.XlaCpuFastMathHonorNans
	}
	return false
}

func (x *DebugOptions) GetXlaCpuFastMathHonorInfs() bool {
	if x != nil {
		return x.XlaCpuFastMathHonorInfs
	}
	return false
}

func (x *DebugOptions) GetXlaCpuFastMathHonorDivision() bool {
	if x != nil {
		return x.XlaCpuFastMathHonorDivision
	}
	return false
}

func (x *DebugOptions) GetXlaCpuFastMathHonorFunctions() bool {
	if x != nil {
		return x.XlaCpuFastMathHonorFunctions
	}
	return false
}

func (x *DebugOptions) GetXlaCpuEnableFastMinMax() bool {
	if x != nil {
		return x.XlaCpuEnableFastMinMax
	}
	return false
}

func (x *DebugOptions) GetXlaGpuEnableFastMinMax() bool {
	if x != nil {
		return x.XlaGpuEnableFastMinMax
	}
	return false
}

func (x *DebugOptions) GetXlaAllowExcessPrecision() bool {
	if x != nil {
		return x.XlaAllowExcessPrecision
	}
	return false
}

func (x *DebugOptions) GetXlaGpuCrashOnVerificationFailures() bool {
	if x != nil {
		return x.XlaGpuCrashOnVerificationFailures
	}
	return false
}

func (x *DebugOptions) GetXlaGpuAutotuneLevel() int32 {
	if x != nil {
		return x.XlaGpuAutotuneLevel
	}
	return 0
}

func (x *DebugOptions) GetXlaForceHostPlatformDeviceCount() int32 {
	if x != nil {
		return x.XlaForceHostPlatformDeviceCount
	}
	return 0
}

func (x *DebugOptions) GetXlaGpuDisableGpuasmOptimizations() bool {
	if x != nil {
		return x.XlaGpuDisableGpuasmOptimizations
	}
	return false
}

func (x *DebugOptions) GetXlaGpuShapeChecks() DebugOptions_ShapeChecks {
	if x != nil {
		return x.XlaGpuShapeChecks
	}
	return DebugOptions_IGNORE
}

func (x *DebugOptions) GetXlaCpuEnableMlirLowering() bool {
	if x != nil {
		return x.XlaCpuEnableMlirLowering
	}
	return false
}

func (x *DebugOptions) GetXlaGpuEnableMlirLowering() bool {
	if x != nil {
		return x.XlaGpuEnableMlirLowering
	}
	return false
}

func (x *DebugOptions) GetXlaGpuEnableSoftmaxFusion() bool {
	if x != nil {
		return x.XlaGpuEnableSoftmaxFusion
	}
	return false
}

func (x *DebugOptions) GetXlaHloEvaluatorUseFastPath() bool {
	if x != nil {
		return x.XlaHloEvaluatorUseFastPath
	}
	return false
}

func (x *DebugOptions) GetXlaAllowScalarIndexDynamicOps() bool {
	if x != nil {
		return x.XlaAllowScalarIndexDynamicOps
	}
	return false
}

func (x *DebugOptions) GetXlaStepMarkerLocation() DebugOptions_StepMarkerLocation {
	if x != nil {
		return x.XlaStepMarkerLocation
	}
	return DebugOptions_STEP_MARK_AT_ENTRY
}

func (x *DebugOptions) GetXlaDumpTo() string {
	if x != nil {
		return x.XlaDumpTo
	}
	return ""
}

func (x *DebugOptions) GetXlaDumpHloModuleRe() string {
	if x != nil {
		return x.XlaDumpHloModuleRe
	}
	return ""
}

func (x *DebugOptions) GetXlaDumpHloPassRe() string {
	if x != nil {
		return x.XlaDumpHloPassRe
	}
	return ""
}

func (x *DebugOptions) GetXlaDumpHloAsText() bool {
	if x != nil {
		return x.XlaDumpHloAsText
	}
	return false
}

func (x *DebugOptions) GetXlaDumpHloAsProto() bool {
	if x != nil {
		return x.XlaDumpHloAsProto
	}
	return false
}

func (x *DebugOptions) GetXlaDumpHloAsDot() bool {
	if x != nil {
		return x.XlaDumpHloAsDot
	}
	return false
}

func (x *DebugOptions) GetXlaDumpHloAsUrl() bool {
	if x != nil {
		return x.XlaDumpHloAsUrl
	}
	return false
}

func (x *DebugOptions) GetXlaDumpHloAsHtml() bool {
	if x != nil {
		return x.XlaDumpHloAsHtml
	}
	return false
}

func (x *DebugOptions) GetXlaDumpFusionVisualization() bool {
	if x != nil {
		return x.XlaDumpFusionVisualization
	}
	return false
}

func (x *DebugOptions) GetXlaDumpHloSnapshots() bool {
	if x != nil {
		return x.XlaDumpHloSnapshots
	}
	return false
}

func (x *DebugOptions) GetXlaDumpIncludeTimestamp() bool {
	if x != nil {
		return x.XlaDumpIncludeTimestamp
	}
	return false
}

func (x *DebugOptions) GetXlaDumpMaxHloModules() int32 {
	if x != nil {
		return x.XlaDumpMaxHloModules
	}
	return 0
}

func (x *DebugOptions) GetXlaDumpModuleMetadata() bool {
	if x != nil {
		return x.XlaDumpModuleMetadata
	}
	return false
}

func (x *DebugOptions) GetXlaDumpCompressProtos() bool {
	if x != nil {
		return x.XlaDumpCompressProtos
	}
	return false
}

func (x *DebugOptions) GetXlaDumpHloAsLongText() bool {
	if x != nil {
		return x.XlaDumpHloAsLongText
	}
	return false
}

func (x *DebugOptions) GetXlaGpuForceConvNchw() bool {
	if x != nil {
		return x.XlaGpuForceConvNchw
	}
	return false
}

func (x *DebugOptions) GetXlaGpuForceConvNhwc() bool {
	if x != nil {
		return x.XlaGpuForceConvNhwc
	}
	return false
}

func (x *DebugOptions) GetXlaGpuPtxFile() []string {
	if x != nil {
		return x.XlaGpuPtxFile
	}
	return nil
}

func (x *DebugOptions) GetXlaGpuDumpLlvmir() bool {
	if x != nil {
		return x.XlaGpuDumpLlvmir
	}
	return false
}

func (x *DebugOptions) GetXlaGpuAlgorithmDenylistPath() string {
	if x != nil {
		return x.XlaGpuAlgorithmDenylistPath
	}
	return ""
}

func (x *DebugOptions) GetXlaTpuDetectNan() bool {
	if x != nil {
		return x.XlaTpuDetectNan
	}
	return false
}

func (x *DebugOptions) GetXlaTpuDetectInf() bool {
	if x != nil {
		return x.XlaTpuDetectInf
	}
	return false
}

func (x *DebugOptions) GetXlaCpuEnableXprofTraceme() bool {
	if x != nil {
		return x.XlaCpuEnableXprofTraceme
	}
	return false
}

func (x *DebugOptions) GetXlaGpuUnsafeFallbackToDriverOnPtxasNotFound() bool {
	if x != nil {
		return x.XlaGpuUnsafeFallbackToDriverOnPtxasNotFound
	}
	return false
}

func (x *DebugOptions) GetXlaGpuAsmExtraFlags() string {
	if x != nil {
		return x.XlaGpuAsmExtraFlags
	}
	return ""
}

func (x *DebugOptions) GetXlaMultiheapSizeConstraintPerHeap() int32 {
	if x != nil {
		return x.XlaMultiheapSizeConstraintPerHeap
	}
	return 0
}

func (x *DebugOptions) GetXlaDetailedLoggingAndDumping() bool {
	if x != nil {
		return x.XlaDetailedLoggingAndDumping
	}
	return false
}

func (x *DebugOptions) GetXlaGpuForceCompilationParallelism() int32 {
	if x != nil {
		return x.XlaGpuForceCompilationParallelism
	}
	return 0
}

func (x *DebugOptions) GetXlaGpuDeterministicOps() bool {
	if x != nil {
		return x.XlaGpuDeterministicOps
	}
	return false
}

func (x *DebugOptions) GetXlaGpuLlvmIrFile() []string {
	if x != nil {
		return x.XlaGpuLlvmIrFile
	}
	return nil
}

func (x *DebugOptions) GetXlaGpuEnableAsyncAllReduce() bool {
	if x != nil {
		return x.XlaGpuEnableAsyncAllReduce
	}
	return false
}

func (x *DebugOptions) GetXlaGpuEnableAsyncCollectivePermute() bool {
	if x != nil {
		return x.XlaGpuEnableAsyncCollectivePermute
	}
	return false
}

func (x *DebugOptions) GetXlaGpuAllReduceCombineThresholdBytes() int64 {
	if x != nil {
		return x.XlaGpuAllReduceCombineThresholdBytes
	}
	return 0
}

func (x *DebugOptions) GetXlaGpuAllReduceContiguous() bool {
	if x != nil {
		return x.XlaGpuAllReduceContiguous
	}
	return false
}

func (x *DebugOptions) GetXlaGpuAllReduceBlueconnectNumDevicesPerHost() int32 {
	if x != nil {
		return x.XlaGpuAllReduceBlueconnectNumDevicesPerHost
	}
	return 0
}

func (x *DebugOptions) GetXlaGpuEnableCudnnFrontend() bool {
	if x != nil {
		return x.XlaGpuEnableCudnnFrontend
	}
	return false
}

func (x *DebugOptions) GetXlaDumpDisableMetadata() bool {
	if x != nil {
		return x.XlaDumpDisableMetadata
	}
	return false
}

func (x *DebugOptions) GetXlaDumpHloPipelineRe() string {
	if x != nil {
		return x.XlaDumpHloPipelineRe
	}
	return ""
}

func (x *DebugOptions) GetXlaGpuStrictConvAlgorithmPicker() bool {
	if x != nil {
		return x.XlaGpuStrictConvAlgorithmPicker
	}
	return false
}

func (x *DebugOptions) GetXlaGpuEnableXlaRuntimeExecutable() bool {
	if x != nil {
		return x.XlaGpuEnableXlaRuntimeExecutable
	}
	return false
}

func (x *DebugOptions) GetXlaGpuNcclTerminationTimeoutSeconds() int64 {
	if x != nil {
		return x.XlaGpuNcclTerminationTimeoutSeconds
	}
	return 0
}

func (x *DebugOptions) GetXlaGpuEnableSharedConstants() bool {
	if x != nil {
		return x.XlaGpuEnableSharedConstants
	}
	return false
}

func (x *DebugOptions) GetXlaGpuEnableCublaslt() bool {
	if x != nil {
		return x.XlaGpuEnableCublaslt
	}
	return false
}

func (x *DebugOptions) GetXlaGpuEnableCudaGraphs() bool {
	if x != nil {
		return x.XlaGpuEnableCudaGraphs
	}
	return false
}

func (x *DebugOptions) GetXlaGpuRedzoneScratchMaxMegabytes() int64 {
	if x != nil {
		return x.XlaGpuRedzoneScratchMaxMegabytes
	}
	return 0
}

func (x *DebugOptions) GetXlaGpuSimplifyAllFpConversions() bool {
	if x != nil {
		return x.XlaGpuSimplifyAllFpConversions
	}
	return false
}

func (x *DebugOptions) GetXlaGpuNormalizeLayouts() bool {
	if x != nil {
		return x.XlaGpuNormalizeLayouts
	}
	return false
}

func (x *DebugOptions) GetXlaCpuUseAcl() bool {
	if x != nil {
		return x.XlaCpuUseAcl
	}
	return false
}

func (x *DebugOptions) GetXlaCpuStrictDotConvMath() bool {
	if x != nil {
		return x.XlaCpuStrictDotConvMath
	}
	return false
}

func (x *DebugOptions) GetXlaGpuUseRuntimeFusion() bool {
	if x != nil {
		return x.XlaGpuUseRuntimeFusion
	}
	return false
}

func (x *DebugOptions) GetXlaDumpLatencyHidingSchedule() bool {
	if x != nil {
		return x.XlaDumpLatencyHidingSchedule
	}
	return false
}

func (x *DebugOptions) GetXlaBackendExtraOptions() map[string]string {
	if x != nil {
		return x.XlaBackendExtraOptions
	}
	return nil
}

type ShardableValueUpdatePairProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InputParameterNumber int64   `protobuf:"varint,1,opt,name=input_parameter_number,json=inputParameterNumber,proto3" json:"input_parameter_number,omitempty"`
	ParameterShapeIndex  []int64 `protobuf:"varint,2,rep,packed,name=parameter_shape_index,json=parameterShapeIndex,proto3" json:"parameter_shape_index,omitempty"`
	OutputShapeIndex     []int64 `protobuf:"varint,3,rep,packed,name=output_shape_index,json=outputShapeIndex,proto3" json:"output_shape_index,omitempty"`
}

func (x *ShardableValueUpdatePairProto) Reset() {
	*x = ShardableValueUpdatePairProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShardableValueUpdatePairProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShardableValueUpdatePairProto) ProtoMessage() {}

func (x *ShardableValueUpdatePairProto) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShardableValueUpdatePairProto.ProtoReflect.Descriptor instead.
func (*ShardableValueUpdatePairProto) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_xla_xla_proto_rawDescGZIP(), []int{1}
}

func (x *ShardableValueUpdatePairProto) GetInputParameterNumber() int64 {
	if x != nil {
		return x.InputParameterNumber
	}
	return 0
}

func (x *ShardableValueUpdatePairProto) GetParameterShapeIndex() []int64 {
	if x != nil {
		return x.ParameterShapeIndex
	}
	return nil
}

func (x *ShardableValueUpdatePairProto) GetOutputShapeIndex() []int64 {
	if x != nil {
		return x.OutputShapeIndex
	}
	return nil
}

// These settings control how XLA compiles and/or runs code.  Not all settings
// will have an effect on every platform.
//
// When adding new fields, keep in mind that boolean fields default to false.
type ExecutionOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This optional field's layout is used as a hint when storing the output of
	// this computation.  Subsequent transfers of this output array to the client
	// may be faster when using this layout.
	//
	// We use a Shape here to accommodate computations that return a tuple.
	ShapeWithOutputLayout *ShapeProto `protobuf:"bytes,2,opt,name=shape_with_output_layout,json=shapeWithOutputLayout,proto3" json:"shape_with_output_layout,omitempty"`
	// Used to seed random-number generators used in this computation.  If this is
	// 0, we generate a seed ourselves.
	//
	// TODO(b/32083678): Changing the seed unnecessarily forces a recompilation.
	Seed         uint64        `protobuf:"varint,3,opt,name=seed,proto3" json:"seed,omitempty"`
	DebugOptions *DebugOptions `protobuf:"bytes,4,opt,name=debug_options,json=debugOptions,proto3" json:"debug_options,omitempty"`
	// This optional field specifies a particular set of devices to run the
	// computation on. The computation will be partitioned across these devices.
	// If not provided, the default device will be chosen.
	DeviceHandles []*DeviceHandle `protobuf:"bytes,5,rep,name=device_handles,json=deviceHandles,proto3" json:"device_handles,omitempty"`
	// Number of replicas of the computation to run. If zero, uses the default
	// number of replicas for the XLA service.
	NumReplicas int32 `protobuf:"varint,6,opt,name=num_replicas,json=numReplicas,proto3" json:"num_replicas,omitempty"`
	// This optional field specifies the device assignment if known at compile
	// time.
	DeviceAssignment *DeviceAssignmentProto `protobuf:"bytes,7,opt,name=device_assignment,json=deviceAssignment,proto3" json:"device_assignment,omitempty"`
	// Alias input and output buffers for parameters that are passed-through XLA
	// modules without being changed.
	AliasPassthroughParams bool `protobuf:"varint,8,opt,name=alias_passthrough_params,json=aliasPassthroughParams,proto3" json:"alias_passthrough_params,omitempty"`
	// Number of partitions of the computation to run (model parallelism).
	// If zero, uses the default number of partitions for the XLA service.
	NumPartitions int32 `protobuf:"varint,9,opt,name=num_partitions,json=numPartitions,proto3" json:"num_partitions,omitempty"`
	// Used to identify a set of programs that should be launch together.
	LaunchId int32 `protobuf:"varint,10,opt,name=launch_id,json=launchId,proto3" json:"launch_id,omitempty"`
	// Indicates whether to use SPMD (true) or MPMD (false) partitioning when
	// num_partitions > 1 and XLA is requested to partition the input program.
	UseSpmdPartitioning bool `protobuf:"varint,11,opt,name=use_spmd_partitioning,json=useSpmdPartitioning,proto3" json:"use_spmd_partitioning,omitempty"`
	// Whether to automatically generate XLA shardings for SPMD partitioner.
	UseAutoSpmdPartitioning bool `protobuf:"varint,15,opt,name=use_auto_spmd_partitioning,json=useAutoSpmdPartitioning,proto3" json:"use_auto_spmd_partitioning,omitempty"`
	// Device mesh shape used to create the sharding search space when
	// use_auto_spmd_partitioning=true.
	AutoSpmdPartitioningMeshShape []int64 `protobuf:"varint,16,rep,packed,name=auto_spmd_partitioning_mesh_shape,json=autoSpmdPartitioningMeshShape,proto3" json:"auto_spmd_partitioning_mesh_shape,omitempty"`
	// Device mesh ids compatible with the above mesh_shape used when
	// use_auto_spmd_partitioning=true.
	AutoSpmdPartitioningMeshIds []int64 `protobuf:"varint,17,rep,packed,name=auto_spmd_partitioning_mesh_ids,json=autoSpmdPartitioningMeshIds,proto3" json:"auto_spmd_partitioning_mesh_ids,omitempty"`
	// If set, deduplicate hlo into function calls to reduce binary size. Only
	// works on TPU.
	DeduplicateHlo bool `protobuf:"varint,12,opt,name=deduplicate_hlo,json=deduplicateHlo,proto3" json:"deduplicate_hlo,omitempty"`
	// Allows sharding propagation to propagate to the outputs. This changes the
	// output shape of the computation (which is undesirable), but it can be used
	// to allow to run partial compilation to determine what would be the output
	// sharding of a computation if XLA would be allowed to propagate the sharding
	// which can be used by higher level framework as a way to query intermediate
	// sharding of operations when multiple computation would be chained and
	// merged together.
	AllowSpmdShardingPropagationToOutput bool `protobuf:"varint,14,opt,name=allow_spmd_sharding_propagation_to_output,json=allowSpmdShardingPropagationToOutput,proto3" json:"allow_spmd_sharding_propagation_to_output,omitempty"`
	// Whether to broadcast args across all replicas. One entry per arg.
	ParamRequiresBroadcastViaCollectives []bool `protobuf:"varint,18,rep,packed,name=param_requires_broadcast_via_collectives,json=paramRequiresBroadcastViaCollectives,proto3" json:"param_requires_broadcast_via_collectives,omitempty"`
	// If enabled, the compiler may generate sharding and unsharding programs as
	// separate HLO modules, and modify the main program's input and output to
	// be sharded.
	AllowSeparateShardingPrograms bool `protobuf:"varint,19,opt,name=allow_separate_sharding_programs,json=allowSeparateShardingPrograms,proto3" json:"allow_separate_sharding_programs,omitempty"`
	// The list of input/output pairs in the main program that could be sharded.
	ShardableValueUpdatePairs []*ShardableValueUpdatePairProto `protobuf:"bytes,20,rep,name=shardable_value_update_pairs,json=shardableValueUpdatePairs,proto3" json:"shardable_value_update_pairs,omitempty"`
}

func (x *ExecutionOptions) Reset() {
	*x = ExecutionOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionOptions) ProtoMessage() {}

func (x *ExecutionOptions) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionOptions.ProtoReflect.Descriptor instead.
func (*ExecutionOptions) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_xla_xla_proto_rawDescGZIP(), []int{2}
}

func (x *ExecutionOptions) GetShapeWithOutputLayout() *ShapeProto {
	if x != nil {
		return x.ShapeWithOutputLayout
	}
	return nil
}

func (x *ExecutionOptions) GetSeed() uint64 {
	if x != nil {
		return x.Seed
	}
	return 0
}

func (x *ExecutionOptions) GetDebugOptions() *DebugOptions {
	if x != nil {
		return x.DebugOptions
	}
	return nil
}

func (x *ExecutionOptions) GetDeviceHandles() []*DeviceHandle {
	if x != nil {
		return x.DeviceHandles
	}
	return nil
}

func (x *ExecutionOptions) GetNumReplicas() int32 {
	if x != nil {
		return x.NumReplicas
	}
	return 0
}

func (x *ExecutionOptions) GetDeviceAssignment() *DeviceAssignmentProto {
	if x != nil {
		return x.DeviceAssignment
	}
	return nil
}

func (x *ExecutionOptions) GetAliasPassthroughParams() bool {
	if x != nil {
		return x.AliasPassthroughParams
	}
	return false
}

func (x *ExecutionOptions) GetNumPartitions() int32 {
	if x != nil {
		return x.NumPartitions
	}
	return 0
}

func (x *ExecutionOptions) GetLaunchId() int32 {
	if x != nil {
		return x.LaunchId
	}
	return 0
}

func (x *ExecutionOptions) GetUseSpmdPartitioning() bool {
	if x != nil {
		return x.UseSpmdPartitioning
	}
	return false
}

func (x *ExecutionOptions) GetUseAutoSpmdPartitioning() bool {
	if x != nil {
		return x.UseAutoSpmdPartitioning
	}
	return false
}

func (x *ExecutionOptions) GetAutoSpmdPartitioningMeshShape() []int64 {
	if x != nil {
		return x.AutoSpmdPartitioningMeshShape
	}
	return nil
}

func (x *ExecutionOptions) GetAutoSpmdPartitioningMeshIds() []int64 {
	if x != nil {
		return x.AutoSpmdPartitioningMeshIds
	}
	return nil
}

func (x *ExecutionOptions) GetDeduplicateHlo() bool {
	if x != nil {
		return x.DeduplicateHlo
	}
	return false
}

func (x *ExecutionOptions) GetAllowSpmdShardingPropagationToOutput() bool {
	if x != nil {
		return x.AllowSpmdShardingPropagationToOutput
	}
	return false
}

func (x *ExecutionOptions) GetParamRequiresBroadcastViaCollectives() []bool {
	if x != nil {
		return x.ParamRequiresBroadcastViaCollectives
	}
	return nil
}

func (x *ExecutionOptions) GetAllowSeparateShardingPrograms() bool {
	if x != nil {
		return x.AllowSeparateShardingPrograms
	}
	return false
}

func (x *ExecutionOptions) GetShardableValueUpdatePairs() []*ShardableValueUpdatePairProto {
	if x != nil {
		return x.ShardableValueUpdatePairs
	}
	return nil
}

// Serialization of HloModuleConfig. See the C++ class definition for
// descriptions of each field.
// There are no guarantees of backwards or forwards compatibility.
type HloModuleConfigProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntryComputationLayout               *ProgramShapeProto                          `protobuf:"bytes,1,opt,name=entry_computation_layout,json=entryComputationLayout,proto3" json:"entry_computation_layout,omitempty"`
	Seed                                 uint64                                      `protobuf:"varint,2,opt,name=seed,proto3" json:"seed,omitempty"`
	LaunchId                             int32                                       `protobuf:"varint,3,opt,name=launch_id,json=launchId,proto3" json:"launch_id,omitempty"`
	ReplicaCount                         int64                                       `protobuf:"varint,4,opt,name=replica_count,json=replicaCount,proto3" json:"replica_count,omitempty"`
	NumPartitions                        int64                                       `protobuf:"varint,5,opt,name=num_partitions,json=numPartitions,proto3" json:"num_partitions,omitempty"`
	ParamRequiresBroadcastViaCollectives []bool                                      `protobuf:"varint,6,rep,packed,name=param_requires_broadcast_via_collectives,json=paramRequiresBroadcastViaCollectives,proto3" json:"param_requires_broadcast_via_collectives,omitempty"`
	UseSpmdPartitioning                  bool                                        `protobuf:"varint,7,opt,name=use_spmd_partitioning,json=useSpmdPartitioning,proto3" json:"use_spmd_partitioning,omitempty"`
	UseAutoSpmdPartitioning              bool                                        `protobuf:"varint,8,opt,name=use_auto_spmd_partitioning,json=useAutoSpmdPartitioning,proto3" json:"use_auto_spmd_partitioning,omitempty"`
	AutoSpmdPartitioningMeshShape        []int64                                     `protobuf:"varint,9,rep,packed,name=auto_spmd_partitioning_mesh_shape,json=autoSpmdPartitioningMeshShape,proto3" json:"auto_spmd_partitioning_mesh_shape,omitempty"`
	AutoSpmdPartitioningMeshIds          []int64                                     `protobuf:"varint,10,rep,packed,name=auto_spmd_partitioning_mesh_ids,json=autoSpmdPartitioningMeshIds,proto3" json:"auto_spmd_partitioning_mesh_ids,omitempty"`
	DeduplicateHlo                       bool                                        `protobuf:"varint,11,opt,name=deduplicate_hlo,json=deduplicateHlo,proto3" json:"deduplicate_hlo,omitempty"`
	IntraOpParallelismThreads            int64                                       `protobuf:"varint,12,opt,name=intra_op_parallelism_threads,json=intraOpParallelismThreads,proto3" json:"intra_op_parallelism_threads,omitempty"`
	DeviceType                           string                                      `protobuf:"bytes,13,opt,name=device_type,json=deviceType,proto3" json:"device_type,omitempty"`
	DebugOptions                         *DebugOptions                               `protobuf:"bytes,14,opt,name=debug_options,json=debugOptions,proto3" json:"debug_options,omitempty"`
	StaticDeviceAssignment               *DeviceAssignmentProto                      `protobuf:"bytes,15,opt,name=static_device_assignment,json=staticDeviceAssignment,proto3" json:"static_device_assignment,omitempty"`
	AllowSeparateShardingPrograms        bool                                        `protobuf:"varint,30,opt,name=allow_separate_sharding_programs,json=allowSeparateShardingPrograms,proto3" json:"allow_separate_sharding_programs,omitempty"`
	ShardableValueUpdatePairs            []*ShardableValueUpdatePairProto            `protobuf:"bytes,16,rep,name=shardable_value_update_pairs,json=shardableValueUpdatePairs,proto3" json:"shardable_value_update_pairs,omitempty"`
	AliasPassthroughParams               bool                                        `protobuf:"varint,17,opt,name=alias_passthrough_params,json=aliasPassthroughParams,proto3" json:"alias_passthrough_params,omitempty"`
	ContentAwareComputationSorting       bool                                        `protobuf:"varint,18,opt,name=content_aware_computation_sorting,json=contentAwareComputationSorting,proto3" json:"content_aware_computation_sorting,omitempty"`
	FusionConfigCollection               HloModuleConfigProto_FusionConfigCollection `protobuf:"varint,19,opt,name=fusion_config_collection,json=fusionConfigCollection,proto3,enum=xla.HloModuleConfigProto_FusionConfigCollection" json:"fusion_config_collection,omitempty"`
	FusionConfig                         []*HloModuleConfigProto_BoolList            `protobuf:"bytes,20,rep,name=fusion_config,json=fusionConfig,proto3" json:"fusion_config,omitempty"`
	DotConfig                            map[string]*HloModuleConfigProto_Int64List  `protobuf:"bytes,21,rep,name=dot_config,json=dotConfig,proto3" json:"dot_config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	LayoutConfig                         []*HloModuleConfigProto_Int64ListList       `protobuf:"bytes,22,rep,name=layout_config,json=layoutConfig,proto3" json:"layout_config,omitempty"`
	MemorySpaceAssignmentConfig          []uint64                                    `protobuf:"varint,23,rep,packed,name=memory_space_assignment_config,json=memorySpaceAssignmentConfig,proto3" json:"memory_space_assignment_config,omitempty"`
	PhaseOrderingConfig                  []*HloModuleConfigProto_BoolList            `protobuf:"bytes,24,rep,name=phase_ordering_config,json=phaseOrderingConfig,proto3" json:"phase_ordering_config,omitempty"`
	PhaseIndex                           int32                                       `protobuf:"varint,25,opt,name=phase_index,json=phaseIndex,proto3" json:"phase_index,omitempty"`
	FlagConfig                           map[string]string                           `protobuf:"bytes,26,rep,name=flag_config,json=flagConfig,proto3" json:"flag_config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AllowSpmdShardingPropagationToOutput bool                                        `protobuf:"varint,27,opt,name=allow_spmd_sharding_propagation_to_output,json=allowSpmdShardingPropagationToOutput,proto3" json:"allow_spmd_sharding_propagation_to_output,omitempty"`
	AnalysisAllowanceMap                 map[string]int64                            `protobuf:"bytes,28,rep,name=analysis_allowance_map,json=analysisAllowanceMap,proto3" json:"analysis_allowance_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MatrixUnitOperandPrecision           PrecisionConfig_Precision                   `protobuf:"varint,29,opt,name=matrix_unit_operand_precision,json=matrixUnitOperandPrecision,proto3,enum=xla.PrecisionConfig_Precision" json:"matrix_unit_operand_precision,omitempty"`
}

func (x *HloModuleConfigProto) Reset() {
	*x = HloModuleConfigProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HloModuleConfigProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HloModuleConfigProto) ProtoMessage() {}

func (x *HloModuleConfigProto) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HloModuleConfigProto.ProtoReflect.Descriptor instead.
func (*HloModuleConfigProto) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_xla_xla_proto_rawDescGZIP(), []int{3}
}

func (x *HloModuleConfigProto) GetEntryComputationLayout() *ProgramShapeProto {
	if x != nil {
		return x.EntryComputationLayout
	}
	return nil
}

func (x *HloModuleConfigProto) GetSeed() uint64 {
	if x != nil {
		return x.Seed
	}
	return 0
}

func (x *HloModuleConfigProto) GetLaunchId() int32 {
	if x != nil {
		return x.LaunchId
	}
	return 0
}

func (x *HloModuleConfigProto) GetReplicaCount() int64 {
	if x != nil {
		return x.ReplicaCount
	}
	return 0
}

func (x *HloModuleConfigProto) GetNumPartitions() int64 {
	if x != nil {
		return x.NumPartitions
	}
	return 0
}

func (x *HloModuleConfigProto) GetParamRequiresBroadcastViaCollectives() []bool {
	if x != nil {
		return x.ParamRequiresBroadcastViaCollectives
	}
	return nil
}

func (x *HloModuleConfigProto) GetUseSpmdPartitioning() bool {
	if x != nil {
		return x.UseSpmdPartitioning
	}
	return false
}

func (x *HloModuleConfigProto) GetUseAutoSpmdPartitioning() bool {
	if x != nil {
		return x.UseAutoSpmdPartitioning
	}
	return false
}

func (x *HloModuleConfigProto) GetAutoSpmdPartitioningMeshShape() []int64 {
	if x != nil {
		return x.AutoSpmdPartitioningMeshShape
	}
	return nil
}

func (x *HloModuleConfigProto) GetAutoSpmdPartitioningMeshIds() []int64 {
	if x != nil {
		return x.AutoSpmdPartitioningMeshIds
	}
	return nil
}

func (x *HloModuleConfigProto) GetDeduplicateHlo() bool {
	if x != nil {
		return x.DeduplicateHlo
	}
	return false
}

func (x *HloModuleConfigProto) GetIntraOpParallelismThreads() int64 {
	if x != nil {
		return x.IntraOpParallelismThreads
	}
	return 0
}

func (x *HloModuleConfigProto) GetDeviceType() string {
	if x != nil {
		return x.DeviceType
	}
	return ""
}

func (x *HloModuleConfigProto) GetDebugOptions() *DebugOptions {
	if x != nil {
		return x.DebugOptions
	}
	return nil
}

func (x *HloModuleConfigProto) GetStaticDeviceAssignment() *DeviceAssignmentProto {
	if x != nil {
		return x.StaticDeviceAssignment
	}
	return nil
}

func (x *HloModuleConfigProto) GetAllowSeparateShardingPrograms() bool {
	if x != nil {
		return x.AllowSeparateShardingPrograms
	}
	return false
}

func (x *HloModuleConfigProto) GetShardableValueUpdatePairs() []*ShardableValueUpdatePairProto {
	if x != nil {
		return x.ShardableValueUpdatePairs
	}
	return nil
}

func (x *HloModuleConfigProto) GetAliasPassthroughParams() bool {
	if x != nil {
		return x.AliasPassthroughParams
	}
	return false
}

func (x *HloModuleConfigProto) GetContentAwareComputationSorting() bool {
	if x != nil {
		return x.ContentAwareComputationSorting
	}
	return false
}

func (x *HloModuleConfigProto) GetFusionConfigCollection() HloModuleConfigProto_FusionConfigCollection {
	if x != nil {
		return x.FusionConfigCollection
	}
	return HloModuleConfigProto_OFF
}

func (x *HloModuleConfigProto) GetFusionConfig() []*HloModuleConfigProto_BoolList {
	if x != nil {
		return x.FusionConfig
	}
	return nil
}

func (x *HloModuleConfigProto) GetDotConfig() map[string]*HloModuleConfigProto_Int64List {
	if x != nil {
		return x.DotConfig
	}
	return nil
}

func (x *HloModuleConfigProto) GetLayoutConfig() []*HloModuleConfigProto_Int64ListList {
	if x != nil {
		return x.LayoutConfig
	}
	return nil
}

func (x *HloModuleConfigProto) GetMemorySpaceAssignmentConfig() []uint64 {
	if x != nil {
		return x.MemorySpaceAssignmentConfig
	}
	return nil
}

func (x *HloModuleConfigProto) GetPhaseOrderingConfig() []*HloModuleConfigProto_BoolList {
	if x != nil {
		return x.PhaseOrderingConfig
	}
	return nil
}

func (x *HloModuleConfigProto) GetPhaseIndex() int32 {
	if x != nil {
		return x.PhaseIndex
	}
	return 0
}

func (x *HloModuleConfigProto) GetFlagConfig() map[string]string {
	if x != nil {
		return x.FlagConfig
	}
	return nil
}

func (x *HloModuleConfigProto) GetAllowSpmdShardingPropagationToOutput() bool {
	if x != nil {
		return x.AllowSpmdShardingPropagationToOutput
	}
	return false
}

func (x *HloModuleConfigProto) GetAnalysisAllowanceMap() map[string]int64 {
	if x != nil {
		return x.AnalysisAllowanceMap
	}
	return nil
}

func (x *HloModuleConfigProto) GetMatrixUnitOperandPrecision() PrecisionConfig_Precision {
	if x != nil {
		return x.MatrixUnitOperandPrecision
	}
	return PrecisionConfig_DEFAULT
}

type HloModuleProtoWithConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HloModule *service.HloModuleProto `protobuf:"bytes,1,opt,name=hlo_module,json=hloModule,proto3" json:"hlo_module,omitempty"`
	Config    *HloModuleConfigProto   `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *HloModuleProtoWithConfig) Reset() {
	*x = HloModuleProtoWithConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HloModuleProtoWithConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HloModuleProtoWithConfig) ProtoMessage() {}

func (x *HloModuleProtoWithConfig) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HloModuleProtoWithConfig.ProtoReflect.Descriptor instead.
func (*HloModuleProtoWithConfig) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_xla_xla_proto_rawDescGZIP(), []int{4}
}

func (x *HloModuleProtoWithConfig) GetHloModule() *service.HloModuleProto {
	if x != nil {
		return x.HloModule
	}
	return nil
}

func (x *HloModuleProtoWithConfig) GetConfig() *HloModuleConfigProto {
	if x != nil {
		return x.Config
	}
	return nil
}

type GetDeviceHandlesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceCount int64 `protobuf:"varint,1,opt,name=device_count,json=deviceCount,proto3" json:"device_count,omitempty"`
}

func (x *GetDeviceHandlesRequest) Reset() {
	*x = GetDeviceHandlesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceHandlesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceHandlesRequest) ProtoMessage() {}

func (x *GetDeviceHandlesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceHandlesRequest.ProtoReflect.Descriptor instead.
func (*GetDeviceHandlesRequest) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_xla_xla_proto_rawDescGZIP(), []int{5}
}

func (x *GetDeviceHandlesRequest) GetDeviceCount() int64 {
	if x != nil {
		return x.DeviceCount
	}
	return 0
}

type GetDeviceHandlesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceHandles []*DeviceHandle `protobuf:"bytes,1,rep,name=device_handles,json=deviceHandles,proto3" json:"device_handles,omitempty"`
}

func (x *GetDeviceHandlesResponse) Reset() {
	*x = GetDeviceHandlesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceHandlesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceHandlesResponse) ProtoMessage() {}

func (x *GetDeviceHandlesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceHandlesResponse.ProtoReflect.Descriptor instead.
func (*GetDeviceHandlesResponse) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_xla_xla_proto_rawDescGZIP(), []int{6}
}

func (x *GetDeviceHandlesResponse) GetDeviceHandles() []*DeviceHandle {
	if x != nil {
		return x.DeviceHandles
	}
	return nil
}

type TransferToClientRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *GlobalDataHandle `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	// This optional field directs the service to return the literal in this
	// layout. A shape is used to hold the layout to accommodate tuples.
	ShapeWithLayout *ShapeProto `protobuf:"bytes,2,opt,name=shape_with_layout,json=shapeWithLayout,proto3" json:"shape_with_layout,omitempty"`
}

func (x *TransferToClientRequest) Reset() {
	*x = TransferToClientRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferToClientRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferToClientRequest) ProtoMessage() {}

func (x *TransferToClientRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferToClientRequest.ProtoReflect.Descriptor instead.
func (*TransferToClientRequest) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_xla_xla_proto_rawDescGZIP(), []int{7}
}

func (x *TransferToClientRequest) GetData() *GlobalDataHandle {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *TransferToClientRequest) GetShapeWithLayout() *ShapeProto {
	if x != nil {
		return x.ShapeWithLayout
	}
	return nil
}

type TransferToClientResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Literal *LiteralProto `protobuf:"bytes,1,opt,name=literal,proto3" json:"literal,omitempty"`
}

func (x *TransferToClientResponse) Reset() {
	*x = TransferToClientResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferToClientResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferToClientResponse) ProtoMessage() {}

func (x *TransferToClientResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferToClientResponse.ProtoReflect.Descriptor instead.
func (*TransferToClientResponse) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_xla_xla_proto_rawDescGZIP(), []int{8}
}

func (x *TransferToClientResponse) GetLiteral() *LiteralProto {
	if x != nil {
		return x.Literal
	}
	return nil
}

type TransferToServerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Literal      *LiteralProto `protobuf:"bytes,1,opt,name=literal,proto3" json:"literal,omitempty"`
	DeviceHandle *DeviceHandle `protobuf:"bytes,2,opt,name=device_handle,json=deviceHandle,proto3" json:"device_handle,omitempty"`
}

func (x *TransferToServerRequest) Reset() {
	*x = TransferToServerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferToServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferToServerRequest) ProtoMessage() {}

func (x *TransferToServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferToServerRequest.ProtoReflect.Descriptor instead.
func (*TransferToServerRequest) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_xla_xla_proto_rawDescGZIP(), []int{9}
}

func (x *TransferToServerRequest) GetLiteral() *LiteralProto {
	if x != nil {
		return x.Literal
	}
	return nil
}

func (x *TransferToServerRequest) GetDeviceHandle() *DeviceHandle {
	if x != nil {
		return x.DeviceHandle
	}
	return nil
}

type TransferToServerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *GlobalDataHandle `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *TransferToServerResponse) Reset() {
	*x = TransferToServerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferToServerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferToServerResponse) ProtoMessage() {}

func (x *TransferToServerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferToServerResponse.ProtoReflect.Descriptor instead.
func (*TransferToServerResponse) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_xla_xla_proto_rawDescGZIP(), []int{10}
}

func (x *TransferToServerResponse) GetData() *GlobalDataHandle {
	if x != nil {
		return x.Data
	}
	return nil
}

type TransferToInfeedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Literal      *LiteralProto `protobuf:"bytes,1,opt,name=literal,proto3" json:"literal,omitempty"`
	ReplicaId    int64         `protobuf:"varint,2,opt,name=replica_id,json=replicaId,proto3" json:"replica_id,omitempty"`
	DeviceHandle *DeviceHandle `protobuf:"bytes,3,opt,name=device_handle,json=deviceHandle,proto3" json:"device_handle,omitempty"`
}

func (x *TransferToInfeedRequest) Reset() {
	*x = TransferToInfeedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferToInfeedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferToInfeedRequest) ProtoMessage() {}

func (x *TransferToInfeedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferToInfeedRequest.ProtoReflect.Descriptor instead.
func (*TransferToInfeedRequest) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_xla_xla_proto_rawDescGZIP(), []int{11}
}

func (x *TransferToInfeedRequest) GetLiteral() *LiteralProto {
	if x != nil {
		return x.Literal
	}
	return nil
}

func (x *TransferToInfeedRequest) GetReplicaId() int64 {
	if x != nil {
		return x.ReplicaId
	}
	return 0
}

func (x *TransferToInfeedRequest) GetDeviceHandle() *DeviceHandle {
	if x != nil {
		return x.DeviceHandle
	}
	return nil
}

type TransferToInfeedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TransferToInfeedResponse) Reset() {
	*x = TransferToInfeedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferToInfeedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferToInfeedResponse) ProtoMessage() {}

func (x *TransferToInfeedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferToInfeedResponse.ProtoReflect.Descriptor instead.
func (*TransferToInfeedResponse) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_xla_xla_proto_rawDescGZIP(), []int{12}
}

type TransferFromOutfeedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This optional field directs the service to return the literal in this
	// layout. A shape is used to hold the layout to accommodate tuples.
	ShapeWithLayout *ShapeProto   `protobuf:"bytes,1,opt,name=shape_with_layout,json=shapeWithLayout,proto3" json:"shape_with_layout,omitempty"`
	ReplicaId       int64         `protobuf:"varint,2,opt,name=replica_id,json=replicaId,proto3" json:"replica_id,omitempty"`
	DeviceHandle    *DeviceHandle `protobuf:"bytes,3,opt,name=device_handle,json=deviceHandle,proto3" json:"device_handle,omitempty"`
}

func (x *TransferFromOutfeedRequest) Reset() {
	*x = TransferFromOutfeedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferFromOutfeedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferFromOutfeedRequest) ProtoMessage() {}

func (x *TransferFromOutfeedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferFromOutfeedRequest.ProtoReflect.Descriptor instead.
func (*TransferFromOutfeedRequest) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_xla_xla_proto_rawDescGZIP(), []int{13}
}

func (x *TransferFromOutfeedRequest) GetShapeWithLayout() *ShapeProto {
	if x != nil {
		return x.ShapeWithLayout
	}
	return nil
}

func (x *TransferFromOutfeedRequest) GetReplicaId() int64 {
	if x != nil {
		return x.ReplicaId
	}
	return 0
}

func (x *TransferFromOutfeedRequest) GetDeviceHandle() *DeviceHandle {
	if x != nil {
		return x.DeviceHandle
	}
	return nil
}

type TransferFromOutfeedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Literal *LiteralProto `protobuf:"bytes,1,opt,name=literal,proto3" json:"literal,omitempty"`
}

func (x *TransferFromOutfeedResponse) Reset() {
	*x = TransferFromOutfeedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferFromOutfeedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferFromOutfeedResponse) ProtoMessage() {}

func (x *TransferFromOutfeedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferFromOutfeedResponse.ProtoReflect.Descriptor instead.
func (*TransferFromOutfeedResponse) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_xla_xla_proto_rawDescGZIP(), []int{14}
}

func (x *TransferFromOutfeedResponse) GetLiteral() *LiteralProto {
	if x != nil {
		return x.Literal
	}
	return nil
}

type ResetDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceHandle *DeviceHandle `protobuf:"bytes,1,opt,name=device_handle,json=deviceHandle,proto3" json:"device_handle,omitempty"`
}

func (x *ResetDeviceRequest) Reset() {
	*x = ResetDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetDeviceRequest) ProtoMessage() {}

func (x *ResetDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetDeviceRequest.ProtoReflect.Descriptor instead.
func (*ResetDeviceRequest) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_xla_xla_proto_rawDescGZIP(), []int{15}
}

func (x *ResetDeviceRequest) GetDeviceHandle() *DeviceHandle {
	if x != nil {
		return x.DeviceHandle
	}
	return nil
}

type ResetDeviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResetDeviceResponse) Reset() {
	*x = ResetDeviceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetDeviceResponse) ProtoMessage() {}

func (x *ResetDeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetDeviceResponse.ProtoReflect.Descriptor instead.
func (*ResetDeviceResponse) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_xla_xla_proto_rawDescGZIP(), []int{16}
}

type ComputationGraphStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Computation  *service.HloModuleProto `protobuf:"bytes,1,opt,name=computation,proto3" json:"computation,omitempty"`
	DebugOptions *DebugOptions           `protobuf:"bytes,2,opt,name=debug_options,json=debugOptions,proto3" json:"debug_options,omitempty"`
}

func (x *ComputationGraphStatsRequest) Reset() {
	*x = ComputationGraphStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComputationGraphStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComputationGraphStatsRequest) ProtoMessage() {}

func (x *ComputationGraphStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComputationGraphStatsRequest.ProtoReflect.Descriptor instead.
func (*ComputationGraphStatsRequest) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_xla_xla_proto_rawDescGZIP(), []int{17}
}

func (x *ComputationGraphStatsRequest) GetComputation() *service.HloModuleProto {
	if x != nil {
		return x.Computation
	}
	return nil
}

func (x *ComputationGraphStatsRequest) GetDebugOptions() *DebugOptions {
	if x != nil {
		return x.DebugOptions
	}
	return nil
}

type ComputationStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stats *ComputationStats `protobuf:"bytes,1,opt,name=stats,proto3" json:"stats,omitempty"`
}

func (x *ComputationStatsResponse) Reset() {
	*x = ComputationStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComputationStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComputationStatsResponse) ProtoMessage() {}

func (x *ComputationStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComputationStatsResponse.ProtoReflect.Descriptor instead.
func (*ComputationStatsResponse) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_xla_xla_proto_rawDescGZIP(), []int{18}
}

func (x *ComputationStatsResponse) GetStats() *ComputationStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

type CreateChannelHandleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelType ChannelHandle_ChannelType `protobuf:"varint,1,opt,name=channel_type,json=channelType,proto3,enum=xla.ChannelHandle_ChannelType" json:"channel_type,omitempty"`
}

func (x *CreateChannelHandleRequest) Reset() {
	*x = CreateChannelHandleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateChannelHandleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChannelHandleRequest) ProtoMessage() {}

func (x *CreateChannelHandleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChannelHandleRequest.ProtoReflect.Descriptor instead.
func (*CreateChannelHandleRequest) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_xla_xla_proto_rawDescGZIP(), []int{19}
}

func (x *CreateChannelHandleRequest) GetChannelType() ChannelHandle_ChannelType {
	if x != nil {
		return x.ChannelType
	}
	return ChannelHandle_CHANNEL_TYPE_INVALID
}

type CreateChannelHandleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channel *ChannelHandle `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
}

func (x *CreateChannelHandleResponse) Reset() {
	*x = CreateChannelHandleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateChannelHandleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChannelHandleResponse) ProtoMessage() {}

func (x *CreateChannelHandleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChannelHandleResponse.ProtoReflect.Descriptor instead.
func (*CreateChannelHandleResponse) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_xla_xla_proto_rawDescGZIP(), []int{20}
}

func (x *CreateChannelHandleResponse) GetChannel() *ChannelHandle {
	if x != nil {
		return x.Channel
	}
	return nil
}

type UnregisterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*GlobalDataHandle `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *UnregisterRequest) Reset() {
	*x = UnregisterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnregisterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnregisterRequest) ProtoMessage() {}

func (x *UnregisterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnregisterRequest.ProtoReflect.Descriptor instead.
func (*UnregisterRequest) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_xla_xla_proto_rawDescGZIP(), []int{21}
}

func (x *UnregisterRequest) GetData() []*GlobalDataHandle {
	if x != nil {
		return x.Data
	}
	return nil
}

type UnregisterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UnregisterResponse) Reset() {
	*x = UnregisterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnregisterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnregisterResponse) ProtoMessage() {}

func (x *UnregisterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnregisterResponse.ProtoReflect.Descriptor instead.
func (*UnregisterResponse) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_xla_xla_proto_rawDescGZIP(), []int{22}
}

type CompileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The graph to be compiled.
	Computation *service.HloModuleProto `protobuf:"bytes,1,opt,name=computation,proto3" json:"computation,omitempty"`
	// Options that affect how XLA compiles code to service this request.
	ExecutionOptions *ExecutionOptions `protobuf:"bytes,2,opt,name=execution_options,json=executionOptions,proto3" json:"execution_options,omitempty"`
	// The layouts of the input arguments. If not set, the default layout will be
	// used. Although the real arguments are not needed in compilation, the
	// layouts of the arguments can affect the compilation.
	InputShapeWithLayout []*ShapeProto `protobuf:"bytes,3,rep,name=input_shape_with_layout,json=inputShapeWithLayout,proto3" json:"input_shape_with_layout,omitempty"`
}

func (x *CompileRequest) Reset() {
	*x = CompileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompileRequest) ProtoMessage() {}

func (x *CompileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompileRequest.ProtoReflect.Descriptor instead.
func (*CompileRequest) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_xla_xla_proto_rawDescGZIP(), []int{23}
}

func (x *CompileRequest) GetComputation() *service.HloModuleProto {
	if x != nil {
		return x.Computation
	}
	return nil
}

func (x *CompileRequest) GetExecutionOptions() *ExecutionOptions {
	if x != nil {
		return x.ExecutionOptions
	}
	return nil
}

func (x *CompileRequest) GetInputShapeWithLayout() []*ShapeProto {
	if x != nil {
		return x.InputShapeWithLayout
	}
	return nil
}

type CompileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The handle to the executable.
	Handle *ExecutionHandle `protobuf:"bytes,1,opt,name=handle,proto3" json:"handle,omitempty"`
}

func (x *CompileResponse) Reset() {
	*x = CompileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompileResponse) ProtoMessage() {}

func (x *CompileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompileResponse.ProtoReflect.Descriptor instead.
func (*CompileResponse) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_xla_xla_proto_rawDescGZIP(), []int{24}
}

func (x *CompileResponse) GetHandle() *ExecutionHandle {
	if x != nil {
		return x.Handle
	}
	return nil
}

type ExecuteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Handle *ExecutionHandle `protobuf:"bytes,1,opt,name=handle,proto3" json:"handle,omitempty"`
	// The shape and layout of the arguments must be the same as the those of the
	// executable's parameters.
	Arguments []*GlobalDataHandle `protobuf:"bytes,2,rep,name=arguments,proto3" json:"arguments,omitempty"`
}

func (x *ExecuteRequest) Reset() {
	*x = ExecuteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteRequest) ProtoMessage() {}

func (x *ExecuteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteRequest.ProtoReflect.Descriptor instead.
func (*ExecuteRequest) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_xla_xla_proto_rawDescGZIP(), []int{25}
}

func (x *ExecuteRequest) GetHandle() *ExecutionHandle {
	if x != nil {
		return x.Handle
	}
	return nil
}

func (x *ExecuteRequest) GetArguments() []*GlobalDataHandle {
	if x != nil {
		return x.Arguments
	}
	return nil
}

// TODO(b/118493728): Remove this and ExecuteGraphParallelRequest and replace
// the uses with calls to Compile and Execute.
type ExecuteGraphRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Computation *service.HloModuleProto `protobuf:"bytes,1,opt,name=computation,proto3" json:"computation,omitempty"`
	Arguments   []*GlobalDataHandle     `protobuf:"bytes,2,rep,name=arguments,proto3" json:"arguments,omitempty"`
	// Options that affect how XLA compiles and runs code to service this request.
	ExecutionOptions *ExecutionOptions `protobuf:"bytes,3,opt,name=execution_options,json=executionOptions,proto3" json:"execution_options,omitempty"`
}

func (x *ExecuteGraphRequest) Reset() {
	*x = ExecuteGraphRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteGraphRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteGraphRequest) ProtoMessage() {}

func (x *ExecuteGraphRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteGraphRequest.ProtoReflect.Descriptor instead.
func (*ExecuteGraphRequest) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_xla_xla_proto_rawDescGZIP(), []int{26}
}

func (x *ExecuteGraphRequest) GetComputation() *service.HloModuleProto {
	if x != nil {
		return x.Computation
	}
	return nil
}

func (x *ExecuteGraphRequest) GetArguments() []*GlobalDataHandle {
	if x != nil {
		return x.Arguments
	}
	return nil
}

func (x *ExecuteGraphRequest) GetExecutionOptions() *ExecutionOptions {
	if x != nil {
		return x.ExecutionOptions
	}
	return nil
}

type ExecuteGraphParallelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Requests []*ExecuteGraphRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *ExecuteGraphParallelRequest) Reset() {
	*x = ExecuteGraphParallelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteGraphParallelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteGraphParallelRequest) ProtoMessage() {}

func (x *ExecuteGraphParallelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteGraphParallelRequest.ProtoReflect.Descriptor instead.
func (*ExecuteGraphParallelRequest) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_xla_xla_proto_rawDescGZIP(), []int{27}
}

func (x *ExecuteGraphParallelRequest) GetRequests() []*ExecuteGraphRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

type ExecuteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Output  *GlobalDataHandle `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
	Profile *ExecutionProfile `protobuf:"bytes,2,opt,name=profile,proto3" json:"profile,omitempty"`
}

func (x *ExecuteResponse) Reset() {
	*x = ExecuteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteResponse) ProtoMessage() {}

func (x *ExecuteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteResponse.ProtoReflect.Descriptor instead.
func (*ExecuteResponse) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_xla_xla_proto_rawDescGZIP(), []int{28}
}

func (x *ExecuteResponse) GetOutput() *GlobalDataHandle {
	if x != nil {
		return x.Output
	}
	return nil
}

func (x *ExecuteResponse) GetProfile() *ExecutionProfile {
	if x != nil {
		return x.Profile
	}
	return nil
}

type ExecuteParallelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Responses []*ExecuteResponse `protobuf:"bytes,1,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (x *ExecuteParallelResponse) Reset() {
	*x = ExecuteParallelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteParallelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteParallelResponse) ProtoMessage() {}

func (x *ExecuteParallelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteParallelResponse.ProtoReflect.Descriptor instead.
func (*ExecuteParallelResponse) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_xla_xla_proto_rawDescGZIP(), []int{29}
}

func (x *ExecuteParallelResponse) GetResponses() []*ExecuteResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

type WaitForExecutionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Execution *ExecutionHandle `protobuf:"bytes,1,opt,name=execution,proto3" json:"execution,omitempty"`
}

func (x *WaitForExecutionRequest) Reset() {
	*x = WaitForExecutionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaitForExecutionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitForExecutionRequest) ProtoMessage() {}

func (x *WaitForExecutionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitForExecutionRequest.ProtoReflect.Descriptor instead.
func (*WaitForExecutionRequest) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_xla_xla_proto_rawDescGZIP(), []int{30}
}

func (x *WaitForExecutionRequest) GetExecution() *ExecutionHandle {
	if x != nil {
		return x.Execution
	}
	return nil
}

type WaitForExecutionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Output  *GlobalDataHandle `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
	Profile *ExecutionProfile `protobuf:"bytes,2,opt,name=profile,proto3" json:"profile,omitempty"`
}

func (x *WaitForExecutionResponse) Reset() {
	*x = WaitForExecutionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaitForExecutionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaitForExecutionResponse) ProtoMessage() {}

func (x *WaitForExecutionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaitForExecutionResponse.ProtoReflect.Descriptor instead.
func (*WaitForExecutionResponse) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_xla_xla_proto_rawDescGZIP(), []int{31}
}

func (x *WaitForExecutionResponse) GetOutput() *GlobalDataHandle {
	if x != nil {
		return x.Output
	}
	return nil
}

func (x *WaitForExecutionResponse) GetProfile() *ExecutionProfile {
	if x != nil {
		return x.Profile
	}
	return nil
}

type ComputeConstantGraphRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Computation  *service.HloModuleProto `protobuf:"bytes,1,opt,name=computation,proto3" json:"computation,omitempty"`
	OutputLayout *LayoutProto            `protobuf:"bytes,2,opt,name=output_layout,json=outputLayout,proto3" json:"output_layout,omitempty"`
}

func (x *ComputeConstantGraphRequest) Reset() {
	*x = ComputeConstantGraphRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComputeConstantGraphRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComputeConstantGraphRequest) ProtoMessage() {}

func (x *ComputeConstantGraphRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComputeConstantGraphRequest.ProtoReflect.Descriptor instead.
func (*ComputeConstantGraphRequest) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_xla_xla_proto_rawDescGZIP(), []int{32}
}

func (x *ComputeConstantGraphRequest) GetComputation() *service.HloModuleProto {
	if x != nil {
		return x.Computation
	}
	return nil
}

func (x *ComputeConstantGraphRequest) GetOutputLayout() *LayoutProto {
	if x != nil {
		return x.OutputLayout
	}
	return nil
}

type ComputeConstantResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A LiteralProto is returned directly for this request.
	Literal *LiteralProto `protobuf:"bytes,1,opt,name=literal,proto3" json:"literal,omitempty"`
}

func (x *ComputeConstantResponse) Reset() {
	*x = ComputeConstantResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComputeConstantResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComputeConstantResponse) ProtoMessage() {}

func (x *ComputeConstantResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComputeConstantResponse.ProtoReflect.Descriptor instead.
func (*ComputeConstantResponse) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_xla_xla_proto_rawDescGZIP(), []int{33}
}

func (x *ComputeConstantResponse) GetLiteral() *LiteralProto {
	if x != nil {
		return x.Literal
	}
	return nil
}

type DeconstructTupleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TupleHandle *GlobalDataHandle `protobuf:"bytes,2,opt,name=tuple_handle,json=tupleHandle,proto3" json:"tuple_handle,omitempty"`
}

func (x *DeconstructTupleRequest) Reset() {
	*x = DeconstructTupleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeconstructTupleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeconstructTupleRequest) ProtoMessage() {}

func (x *DeconstructTupleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeconstructTupleRequest.ProtoReflect.Descriptor instead.
func (*DeconstructTupleRequest) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_xla_xla_proto_rawDescGZIP(), []int{34}
}

func (x *DeconstructTupleRequest) GetTupleHandle() *GlobalDataHandle {
	if x != nil {
		return x.TupleHandle
	}
	return nil
}

type DeconstructTupleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ElementHandles []*GlobalDataHandle `protobuf:"bytes,1,rep,name=element_handles,json=elementHandles,proto3" json:"element_handles,omitempty"`
}

func (x *DeconstructTupleResponse) Reset() {
	*x = DeconstructTupleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeconstructTupleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeconstructTupleResponse) ProtoMessage() {}

func (x *DeconstructTupleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeconstructTupleResponse.ProtoReflect.Descriptor instead.
func (*DeconstructTupleResponse) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_xla_xla_proto_rawDescGZIP(), []int{35}
}

func (x *DeconstructTupleResponse) GetElementHandles() []*GlobalDataHandle {
	if x != nil {
		return x.ElementHandles
	}
	return nil
}

type LoadDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Describes the path of the ColumnIO tablet to load.
	ColumnioTabletPath string `protobuf:"bytes,1,opt,name=columnio_tablet_path,json=columnioTabletPath,proto3" json:"columnio_tablet_path,omitempty"`
	// Describes the field to load within the ColumnIO tablet.
	ColumnioField string `protobuf:"bytes,2,opt,name=columnio_field,json=columnioField,proto3" json:"columnio_field,omitempty"`
	// Individual element shape, excluding rows.
	ElementShape *ShapeProto `protobuf:"bytes,3,opt,name=element_shape,json=elementShape,proto3" json:"element_shape,omitempty"`
	// Warning: ColumnIO does not support random-access, so use offset with
	// caution in performance-critical scenarios.
	Offset int64 `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
	// Maximum number of elements (with shape element_shape) to load.
	Limit int64 `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	// If more than one item is requested (via limit > 1), then this request
	// attribute zips together the produced vectors.
	Zip bool `protobuf:"varint,6,opt,name=zip,proto3" json:"zip,omitempty"`
}

func (x *LoadDataRequest) Reset() {
	*x = LoadDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadDataRequest) ProtoMessage() {}

func (x *LoadDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadDataRequest.ProtoReflect.Descriptor instead.
func (*LoadDataRequest) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_xla_xla_proto_rawDescGZIP(), []int{36}
}

func (x *LoadDataRequest) GetColumnioTabletPath() string {
	if x != nil {
		return x.ColumnioTabletPath
	}
	return ""
}

func (x *LoadDataRequest) GetColumnioField() string {
	if x != nil {
		return x.ColumnioField
	}
	return ""
}

func (x *LoadDataRequest) GetElementShape() *ShapeProto {
	if x != nil {
		return x.ElementShape
	}
	return nil
}

func (x *LoadDataRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *LoadDataRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *LoadDataRequest) GetZip() bool {
	if x != nil {
		return x.Zip
	}
	return false
}

type LoadDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data          *GlobalDataHandle `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	DataShape     *ShapeProto       `protobuf:"bytes,2,opt,name=data_shape,json=dataShape,proto3" json:"data_shape,omitempty"`
	AvailableRows int64             `protobuf:"varint,3,opt,name=available_rows,json=availableRows,proto3" json:"available_rows,omitempty"`
	RowsLoaded    int64             `protobuf:"varint,4,opt,name=rows_loaded,json=rowsLoaded,proto3" json:"rows_loaded,omitempty"`
	Nanoseconds   int64             `protobuf:"varint,5,opt,name=nanoseconds,proto3" json:"nanoseconds,omitempty"`
}

func (x *LoadDataResponse) Reset() {
	*x = LoadDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadDataResponse) ProtoMessage() {}

func (x *LoadDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadDataResponse.ProtoReflect.Descriptor instead.
func (*LoadDataResponse) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_xla_xla_proto_rawDescGZIP(), []int{37}
}

func (x *LoadDataResponse) GetData() *GlobalDataHandle {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *LoadDataResponse) GetDataShape() *ShapeProto {
	if x != nil {
		return x.DataShape
	}
	return nil
}

func (x *LoadDataResponse) GetAvailableRows() int64 {
	if x != nil {
		return x.AvailableRows
	}
	return 0
}

func (x *LoadDataResponse) GetRowsLoaded() int64 {
	if x != nil {
		return x.RowsLoaded
	}
	return 0
}

func (x *LoadDataResponse) GetNanoseconds() int64 {
	if x != nil {
		return x.Nanoseconds
	}
	return 0
}

type GetShapeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *GlobalDataHandle `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetShapeRequest) Reset() {
	*x = GetShapeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShapeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShapeRequest) ProtoMessage() {}

func (x *GetShapeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShapeRequest.ProtoReflect.Descriptor instead.
func (*GetShapeRequest) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_xla_xla_proto_rawDescGZIP(), []int{38}
}

func (x *GetShapeRequest) GetData() *GlobalDataHandle {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetShapeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Shape *ShapeProto `protobuf:"bytes,1,opt,name=shape,proto3" json:"shape,omitempty"`
}

func (x *GetShapeResponse) Reset() {
	*x = GetShapeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShapeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShapeResponse) ProtoMessage() {}

func (x *GetShapeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShapeResponse.ProtoReflect.Descriptor instead.
func (*GetShapeResponse) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_xla_xla_proto_rawDescGZIP(), []int{39}
}

func (x *GetShapeResponse) GetShape() *ShapeProto {
	if x != nil {
		return x.Shape
	}
	return nil
}

type UnpackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *GlobalDataHandle `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UnpackRequest) Reset() {
	*x = UnpackRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnpackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnpackRequest) ProtoMessage() {}

func (x *UnpackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnpackRequest.ProtoReflect.Descriptor instead.
func (*UnpackRequest) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_xla_xla_proto_rawDescGZIP(), []int{40}
}

func (x *UnpackRequest) GetData() *GlobalDataHandle {
	if x != nil {
		return x.Data
	}
	return nil
}

type UnpackResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TiedData []*GlobalDataHandle `protobuf:"bytes,1,rep,name=tied_data,json=tiedData,proto3" json:"tied_data,omitempty"`
}

func (x *UnpackResponse) Reset() {
	*x = UnpackResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnpackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnpackResponse) ProtoMessage() {}

func (x *UnpackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnpackResponse.ProtoReflect.Descriptor instead.
func (*UnpackResponse) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_xla_xla_proto_rawDescGZIP(), []int{41}
}

func (x *UnpackResponse) GetTiedData() []*GlobalDataHandle {
	if x != nil {
		return x.TiedData
	}
	return nil
}

// A trace estimated by the Latency Hiding Scheduler.
type ScheduleProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instructions []*ScheduleProto_Instruction `protobuf:"bytes,1,rep,name=instructions,proto3" json:"instructions,omitempty"`
	// Computation id (matches the id in HloComputationProto).
	ComputationId int64 `protobuf:"varint,2,opt,name=computation_id,json=computationId,proto3" json:"computation_id,omitempty"`
}

func (x *ScheduleProto) Reset() {
	*x = ScheduleProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleProto) ProtoMessage() {}

func (x *ScheduleProto) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleProto.ProtoReflect.Descriptor instead.
func (*ScheduleProto) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_xla_xla_proto_rawDescGZIP(), []int{42}
}

func (x *ScheduleProto) GetInstructions() []*ScheduleProto_Instruction {
	if x != nil {
		return x.Instructions
	}
	return nil
}

func (x *ScheduleProto) GetComputationId() int64 {
	if x != nil {
		return x.ComputationId
	}
	return 0
}

type HloModuleConfigProto_BoolList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vals []bool `protobuf:"varint,1,rep,packed,name=vals,proto3" json:"vals,omitempty"`
}

func (x *HloModuleConfigProto_BoolList) Reset() {
	*x = HloModuleConfigProto_BoolList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HloModuleConfigProto_BoolList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HloModuleConfigProto_BoolList) ProtoMessage() {}

func (x *HloModuleConfigProto_BoolList) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HloModuleConfigProto_BoolList.ProtoReflect.Descriptor instead.
func (*HloModuleConfigProto_BoolList) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_xla_xla_proto_rawDescGZIP(), []int{3, 0}
}

func (x *HloModuleConfigProto_BoolList) GetVals() []bool {
	if x != nil {
		return x.Vals
	}
	return nil
}

type HloModuleConfigProto_Int64List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vals []int64 `protobuf:"varint,1,rep,packed,name=vals,proto3" json:"vals,omitempty"`
}

func (x *HloModuleConfigProto_Int64List) Reset() {
	*x = HloModuleConfigProto_Int64List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HloModuleConfigProto_Int64List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HloModuleConfigProto_Int64List) ProtoMessage() {}

func (x *HloModuleConfigProto_Int64List) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HloModuleConfigProto_Int64List.ProtoReflect.Descriptor instead.
func (*HloModuleConfigProto_Int64List) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_xla_xla_proto_rawDescGZIP(), []int{3, 1}
}

func (x *HloModuleConfigProto_Int64List) GetVals() []int64 {
	if x != nil {
		return x.Vals
	}
	return nil
}

type HloModuleConfigProto_Int64ListList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lists []*HloModuleConfigProto_Int64List `protobuf:"bytes,1,rep,name=lists,proto3" json:"lists,omitempty"`
}

func (x *HloModuleConfigProto_Int64ListList) Reset() {
	*x = HloModuleConfigProto_Int64ListList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HloModuleConfigProto_Int64ListList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HloModuleConfigProto_Int64ListList) ProtoMessage() {}

func (x *HloModuleConfigProto_Int64ListList) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HloModuleConfigProto_Int64ListList.ProtoReflect.Descriptor instead.
func (*HloModuleConfigProto_Int64ListList) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_xla_xla_proto_rawDescGZIP(), []int{3, 2}
}

func (x *HloModuleConfigProto_Int64ListList) GetLists() []*HloModuleConfigProto_Int64List {
	if x != nil {
		return x.Lists
	}
	return nil
}

type ScheduleProto_Instruction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Instruction id (matches the id in HloInstructionProto).
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Start and end timestamps in cycles.
	StartTimestampCycles float64 `protobuf:"fixed64,2,opt,name=start_timestamp_cycles,json=startTimestampCycles,proto3" json:"start_timestamp_cycles,omitempty"`
	EndTimestampCycles   float64 `protobuf:"fixed64,3,opt,name=end_timestamp_cycles,json=endTimestampCycles,proto3" json:"end_timestamp_cycles,omitempty"`
}

func (x *ScheduleProto_Instruction) Reset() {
	*x = ScheduleProto_Instruction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleProto_Instruction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleProto_Instruction) ProtoMessage() {}

func (x *ScheduleProto_Instruction) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_xla_xla_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleProto_Instruction.ProtoReflect.Descriptor instead.
func (*ScheduleProto_Instruction) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_xla_xla_proto_rawDescGZIP(), []int{42, 0}
}

func (x *ScheduleProto_Instruction) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ScheduleProto_Instruction) GetStartTimestampCycles() float64 {
	if x != nil {
		return x.StartTimestampCycles
	}
	return 0
}

func (x *ScheduleProto_Instruction) GetEndTimestampCycles() float64 {
	if x != nil {
		return x.EndTimestampCycles
	}
	return 0
}

var File_tensorflow_compiler_xla_xla_proto protoreflect.FileDescriptor

var file_tensorflow_compiler_xla_xla_proto_rawDesc = []byte{
	0x0a, 0x21, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x6d,
	0x70, 0x69, 0x6c, 0x65, 0x72, 0x2f, 0x78, 0x6c, 0x61, 0x2f, 0x78, 0x6c, 0x61, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x03, 0x78, 0x6c, 0x61, 0x1a, 0x29, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x2f, 0x78, 0x6c,
	0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x68, 0x6c, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f,
	0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x2f, 0x78, 0x6c, 0x61, 0x2f, 0x78, 0x6c, 0x61,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfe, 0x30, 0x0a, 0x0c,
	0x44, 0x65, 0x62, 0x75, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x35, 0x0a, 0x17,
	0x78, 0x6c, 0x61, 0x5f, 0x68, 0x6c, 0x6f, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x78,
	0x6c, 0x61, 0x48, 0x6c, 0x6f, 0x47, 0x72, 0x61, 0x70, 0x68, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x78, 0x6c, 0x61, 0x5f, 0x68, 0x6c, 0x6f, 0x5f, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x78, 0x6c,
	0x61, 0x48, 0x6c, 0x6f, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x78,
	0x6c, 0x61, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x68, 0x6c, 0x6f, 0x5f, 0x70,
	0x61, 0x73, 0x73, 0x65, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x78, 0x6c, 0x61,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x48, 0x6c, 0x6f, 0x50, 0x61, 0x73, 0x73, 0x65, 0x73,
	0x12, 0x3a, 0x0a, 0x1a, 0x78, 0x6c, 0x61, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x68,
	0x6c, 0x6f, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x65, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x7c,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x78, 0x6c, 0x61, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x48,
	0x6c, 0x6f, 0x50, 0x61, 0x73, 0x73, 0x65, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x3a, 0x0a, 0x1a,
	0x78, 0x6c, 0x61, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x5f,
	0x68, 0x6c, 0x6f, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x65, 0x73, 0x18, 0x68, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x16, 0x78, 0x6c, 0x61, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x6c, 0x6c, 0x48,
	0x6c, 0x6f, 0x50, 0x61, 0x73, 0x73, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x1e, 0x78, 0x6c, 0x61, 0x5f,
	0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x1b, 0x78, 0x6c, 0x61, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x4f, 0x70, 0x74, 0x69,
	0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x3a, 0x0a,
	0x1a, 0x78, 0x6c, 0x61, 0x5f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x5f, 0x69, 0x72, 0x5f, 0x69, 0x6e,
	0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x16, 0x78, 0x6c, 0x61, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x49, 0x72, 0x49, 0x6e, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x4e, 0x0a, 0x24, 0x78, 0x6c, 0x61,
	0x5f, 0x65, 0x6c, 0x69, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x5f, 0x68, 0x6c, 0x6f, 0x5f, 0x69,
	0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73,
	0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x08, 0x52, 0x20, 0x78, 0x6c, 0x61, 0x45, 0x6c, 0x69, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x48, 0x6c, 0x6f, 0x49, 0x6d, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74,
	0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x1a, 0x78, 0x6c, 0x61,
	0x5f, 0x63, 0x70, 0x75, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x5f, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x78,
	0x6c, 0x61, 0x43, 0x70, 0x75, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x45, 0x69, 0x67, 0x65, 0x6e, 0x12, 0x30, 0x0a, 0x15, 0x78, 0x6c, 0x61, 0x5f, 0x67, 0x70, 0x75,
	0x5f, 0x63, 0x75, 0x64, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x3d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x78, 0x6c, 0x61, 0x47, 0x70, 0x75, 0x43, 0x75, 0x64, 0x61,
	0x44, 0x61, 0x74, 0x61, 0x44, 0x69, 0x72, 0x12, 0x1e, 0x0a, 0x0b, 0x78, 0x6c, 0x61, 0x5f, 0x67,
	0x70, 0x75, 0x5f, 0x66, 0x74, 0x7a, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x78, 0x6c,
	0x61, 0x47, 0x70, 0x75, 0x46, 0x74, 0x7a, 0x12, 0x4d, 0x0a, 0x24, 0x78, 0x6c, 0x61, 0x5f, 0x6c,
	0x6c, 0x76, 0x6d, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x46, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1f, 0x78, 0x6c, 0x61, 0x4c, 0x6c, 0x76, 0x6d, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x46, 0x0a, 0x20, 0x78, 0x6c, 0x61, 0x5f, 0x6c, 0x6c,
	0x76, 0x6d, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x6f, 0x61, 0x6c, 0x69, 0x61,
	0x73, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x47, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x1c, 0x78, 0x6c, 0x61, 0x4c, 0x6c, 0x76, 0x6d, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4e,
	0x6f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x53,
	0x0a, 0x27, 0x78, 0x6c, 0x61, 0x5f, 0x6c, 0x6c, 0x76, 0x6d, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x69, 0x6e, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x48, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x22, 0x78, 0x6c, 0x61, 0x4c, 0x6c, 0x76, 0x6d, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x48, 0x0a, 0x21, 0x78, 0x6c, 0x61, 0x5f, 0x6c, 0x6c, 0x76, 0x6d, 0x5f,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x65, 0x6e, 0x73, 0x69, 0x76,
	0x65, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x65, 0x73, 0x18, 0x49, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d,
	0x78, 0x6c, 0x61, 0x4c, 0x6c, 0x76, 0x6d, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x78,
	0x70, 0x65, 0x6e, 0x73, 0x69, 0x76, 0x65, 0x50, 0x61, 0x73, 0x73, 0x65, 0x73, 0x12, 0x3c, 0x0a,
	0x1b, 0x78, 0x6c, 0x61, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x5f, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x18, 0x5a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x17, 0x78, 0x6c, 0x61, 0x54, 0x65, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x1a, 0x78,
	0x6c, 0x61, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x5f, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x16, 0x78, 0x6c, 0x61, 0x54, 0x65, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x1c, 0x78, 0x6c, 0x61, 0x5f, 0x68,
	0x6c, 0x6f, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x78,
	0x6c, 0x61, 0x48, 0x6c, 0x6f, 0x47, 0x72, 0x61, 0x70, 0x68, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x13, 0x78, 0x6c, 0x61, 0x5f, 0x63,
	0x70, 0x75, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x6d, 0x6b, 0x6c, 0x5f, 0x64, 0x6e, 0x6e, 0x18, 0x61,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x78, 0x6c, 0x61, 0x43, 0x70, 0x75, 0x55, 0x73, 0x65, 0x4d,
	0x6b, 0x6c, 0x44, 0x6e, 0x6e, 0x12, 0x35, 0x0a, 0x17, 0x78, 0x6c, 0x61, 0x5f, 0x63, 0x70, 0x75,
	0x5f, 0x75, 0x73, 0x65, 0x5f, 0x78, 0x6c, 0x61, 0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0xb1, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x78, 0x6c, 0x61, 0x43, 0x70, 0x75, 0x55,
	0x73, 0x65, 0x58, 0x6c, 0x61, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x18,
	0x78, 0x6c, 0x61, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66,
	0x61, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x68, 0x18, 0x63, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14,
	0x78, 0x6c, 0x61, 0x43, 0x70, 0x75, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x61, 0x73, 0x74,
	0x4d, 0x61, 0x74, 0x68, 0x12, 0x3d, 0x0a, 0x1c, 0x78, 0x6c, 0x61, 0x5f, 0x63, 0x70, 0x75, 0x5f,
	0x66, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x68, 0x5f, 0x68, 0x6f, 0x6e, 0x6f, 0x72, 0x5f,
	0x6e, 0x61, 0x6e, 0x73, 0x18, 0x78, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x78, 0x6c, 0x61, 0x43,
	0x70, 0x75, 0x46, 0x61, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x68, 0x48, 0x6f, 0x6e, 0x6f, 0x72, 0x4e,
	0x61, 0x6e, 0x73, 0x12, 0x3d, 0x0a, 0x1c, 0x78, 0x6c, 0x61, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x66,
	0x61, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x68, 0x5f, 0x68, 0x6f, 0x6e, 0x6f, 0x72, 0x5f, 0x69,
	0x6e, 0x66, 0x73, 0x18, 0x79, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x78, 0x6c, 0x61, 0x43, 0x70,
	0x75, 0x46, 0x61, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x68, 0x48, 0x6f, 0x6e, 0x6f, 0x72, 0x49, 0x6e,
	0x66, 0x73, 0x12, 0x45, 0x0a, 0x20, 0x78, 0x6c, 0x61, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x66, 0x61,
	0x73, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x68, 0x5f, 0x68, 0x6f, 0x6e, 0x6f, 0x72, 0x5f, 0x64, 0x69,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x7e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x78, 0x6c,
	0x61, 0x43, 0x70, 0x75, 0x46, 0x61, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x68, 0x48, 0x6f, 0x6e, 0x6f,
	0x72, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x21, 0x78, 0x6c, 0x61,
	0x5f, 0x63, 0x70, 0x75, 0x5f, 0x66, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x68, 0x5f, 0x68,
	0x6f, 0x6e, 0x6f, 0x72, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x81,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x78, 0x6c, 0x61, 0x43, 0x70, 0x75, 0x46, 0x61, 0x73,
	0x74, 0x4d, 0x61, 0x74, 0x68, 0x48, 0x6f, 0x6e, 0x6f, 0x72, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x3c, 0x0a, 0x1b, 0x78, 0x6c, 0x61, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x6d,
	0x61, 0x78, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x78, 0x6c, 0x61, 0x43, 0x70,
	0x75, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x61, 0x73, 0x74, 0x4d, 0x69, 0x6e, 0x4d, 0x61,
	0x78, 0x12, 0x3b, 0x0a, 0x1b, 0x78, 0x6c, 0x61, 0x5f, 0x67, 0x70, 0x75, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x66, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x6d, 0x61, 0x78,
	0x18, 0x64, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x78, 0x6c, 0x61, 0x47, 0x70, 0x75, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x46, 0x61, 0x73, 0x74, 0x4d, 0x69, 0x6e, 0x4d, 0x61, 0x78, 0x12, 0x3b,
	0x0a, 0x1a, 0x78, 0x6c, 0x61, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x65, 0x78, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x7a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x17, 0x78, 0x6c, 0x61, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x63, 0x65,
	0x73, 0x73, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x51, 0x0a, 0x26, 0x78,
	0x6c, 0x61, 0x5f, 0x67, 0x70, 0x75, 0x5f, 0x63, 0x72, 0x61, 0x73, 0x68, 0x5f, 0x6f, 0x6e, 0x5f,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x73, 0x18, 0x65, 0x20, 0x01, 0x28, 0x08, 0x52, 0x21, 0x78, 0x6c, 0x61,
	0x47, 0x70, 0x75, 0x43, 0x72, 0x61, 0x73, 0x68, 0x4f, 0x6e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x73, 0x12, 0x33,
	0x0a, 0x16, 0x78, 0x6c, 0x61, 0x5f, 0x67, 0x70, 0x75, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x74, 0x75,
	0x6e, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x7b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13,
	0x78, 0x6c, 0x61, 0x47, 0x70, 0x75, 0x41, 0x75, 0x74, 0x6f, 0x74, 0x75, 0x6e, 0x65, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x4d, 0x0a, 0x24, 0x78, 0x6c, 0x61, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x5f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x66, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x1f, 0x78, 0x6c, 0x61, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x4e, 0x0a, 0x24, 0x78, 0x6c, 0x61, 0x5f, 0x67, 0x70, 0x75, 0x5f, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x67, 0x70, 0x75, 0x61, 0x73, 0x6d, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x67, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x20, 0x78, 0x6c, 0x61, 0x47, 0x70, 0x75, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x47,
	0x70, 0x75, 0x61, 0x73, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x4f, 0x0a, 0x14, 0x78, 0x6c, 0x61, 0x5f, 0x67, 0x70, 0x75, 0x5f, 0x73, 0x68,
	0x61, 0x70, 0x65, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x18, 0xaa, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1d, 0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x68, 0x61, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73,
	0x52, 0x11, 0x78, 0x6c, 0x61, 0x47, 0x70, 0x75, 0x53, 0x68, 0x61, 0x70, 0x65, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x73, 0x12, 0x3f, 0x0a, 0x1c, 0x78, 0x6c, 0x61, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x6c, 0x69, 0x72, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72,
	0x69, 0x6e, 0x67, 0x18, 0xab, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x78, 0x6c, 0x61, 0x43,
	0x70, 0x75, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x6c, 0x69, 0x72, 0x4c, 0x6f, 0x77, 0x65,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x3f, 0x0a, 0x1c, 0x78, 0x6c, 0x61, 0x5f, 0x67, 0x70, 0x75, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x6c, 0x69, 0x72, 0x5f, 0x6c, 0x6f, 0x77, 0x65,
	0x72, 0x69, 0x6e, 0x67, 0x18, 0xad, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x78, 0x6c, 0x61,
	0x47, 0x70, 0x75, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x6c, 0x69, 0x72, 0x4c, 0x6f, 0x77,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x41, 0x0a, 0x1d, 0x78, 0x6c, 0x61, 0x5f, 0x67, 0x70, 0x75,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x6f, 0x66, 0x74, 0x6d, 0x61, 0x78, 0x5f,
	0x66, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0xb3, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x78,
	0x6c, 0x61, 0x47, 0x70, 0x75, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x6f, 0x66, 0x74, 0x6d,
	0x61, 0x78, 0x46, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x1f, 0x78, 0x6c, 0x61, 0x5f,
	0x68, 0x6c, 0x6f, 0x5f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x73,
	0x65, 0x5f, 0x66, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x6a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x1a, 0x78, 0x6c, 0x61, 0x48, 0x6c, 0x6f, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74,
	0x6f, 0x72, 0x55, 0x73, 0x65, 0x46, 0x61, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x49, 0x0a,
	0x22, 0x78, 0x6c, 0x61, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x61,
	0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f,
	0x6f, 0x70, 0x73, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x78, 0x6c, 0x61, 0x41, 0x6c,
	0x6c, 0x6f, 0x77, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x44, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4f, 0x70, 0x73, 0x12, 0x5d, 0x0a, 0x18, 0x78, 0x6c, 0x61, 0x5f,
	0x73, 0x74, 0x65, 0x70, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x78, 0x6c, 0x61,
	0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x74,
	0x65, 0x70, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x15, 0x78, 0x6c, 0x61, 0x53, 0x74, 0x65, 0x70, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0b, 0x78, 0x6c, 0x61, 0x5f, 0x64,
	0x75, 0x6d, 0x70, 0x5f, 0x74, 0x6f, 0x18, 0x6d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x78, 0x6c,
	0x61, 0x44, 0x75, 0x6d, 0x70, 0x54, 0x6f, 0x12, 0x32, 0x0a, 0x16, 0x78, 0x6c, 0x61, 0x5f, 0x64,
	0x75, 0x6d, 0x70, 0x5f, 0x68, 0x6c, 0x6f, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x72,
	0x65, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x78, 0x6c, 0x61, 0x44, 0x75, 0x6d, 0x70,
	0x48, 0x6c, 0x6f, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x12, 0x2e, 0x0a, 0x14, 0x78,
	0x6c, 0x61, 0x5f, 0x64, 0x75, 0x6d, 0x70, 0x5f, 0x68, 0x6c, 0x6f, 0x5f, 0x70, 0x61, 0x73, 0x73,
	0x5f, 0x72, 0x65, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x78, 0x6c, 0x61, 0x44, 0x75,
	0x6d, 0x70, 0x48, 0x6c, 0x6f, 0x50, 0x61, 0x73, 0x73, 0x52, 0x65, 0x12, 0x2e, 0x0a, 0x14, 0x78,
	0x6c, 0x61, 0x5f, 0x64, 0x75, 0x6d, 0x70, 0x5f, 0x68, 0x6c, 0x6f, 0x5f, 0x61, 0x73, 0x5f, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x70, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x78, 0x6c, 0x61, 0x44, 0x75,
	0x6d, 0x70, 0x48, 0x6c, 0x6f, 0x41, 0x73, 0x54, 0x65, 0x78, 0x74, 0x12, 0x30, 0x0a, 0x15, 0x78,
	0x6c, 0x61, 0x5f, 0x64, 0x75, 0x6d, 0x70, 0x5f, 0x68, 0x6c, 0x6f, 0x5f, 0x61, 0x73, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x18, 0x71, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x78, 0x6c, 0x61, 0x44,
	0x75, 0x6d, 0x70, 0x48, 0x6c, 0x6f, 0x41, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2c, 0x0a,
	0x13, 0x78, 0x6c, 0x61, 0x5f, 0x64, 0x75, 0x6d, 0x70, 0x5f, 0x68, 0x6c, 0x6f, 0x5f, 0x61, 0x73,
	0x5f, 0x64, 0x6f, 0x74, 0x18, 0x72, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x78, 0x6c, 0x61, 0x44,
	0x75, 0x6d, 0x70, 0x48, 0x6c, 0x6f, 0x41, 0x73, 0x44, 0x6f, 0x74, 0x12, 0x2c, 0x0a, 0x13, 0x78,
	0x6c, 0x61, 0x5f, 0x64, 0x75, 0x6d, 0x70, 0x5f, 0x68, 0x6c, 0x6f, 0x5f, 0x61, 0x73, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x73, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x78, 0x6c, 0x61, 0x44, 0x75, 0x6d,
	0x70, 0x48, 0x6c, 0x6f, 0x41, 0x73, 0x55, 0x72, 0x6c, 0x12, 0x2e, 0x0a, 0x14, 0x78, 0x6c, 0x61,
	0x5f, 0x64, 0x75, 0x6d, 0x70, 0x5f, 0x68, 0x6c, 0x6f, 0x5f, 0x61, 0x73, 0x5f, 0x68, 0x74, 0x6d,
	0x6c, 0x18, 0x74, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x78, 0x6c, 0x61, 0x44, 0x75, 0x6d, 0x70,
	0x48, 0x6c, 0x6f, 0x41, 0x73, 0x48, 0x74, 0x6d, 0x6c, 0x12, 0x42, 0x0a, 0x1d, 0x78, 0x6c, 0x61,
	0x5f, 0x64, 0x75, 0x6d, 0x70, 0x5f, 0x66, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x69, 0x73,
	0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x95, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x1a, 0x78, 0x6c, 0x61, 0x44, 0x75, 0x6d, 0x70, 0x46, 0x75, 0x73, 0x69, 0x6f, 0x6e,
	0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a,
	0x16, 0x78, 0x6c, 0x61, 0x5f, 0x64, 0x75, 0x6d, 0x70, 0x5f, 0x68, 0x6c, 0x6f, 0x5f, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x18, 0x76, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x78,
	0x6c, 0x61, 0x44, 0x75, 0x6d, 0x70, 0x48, 0x6c, 0x6f, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x73, 0x12, 0x3c, 0x0a, 0x1a, 0x78, 0x6c, 0x61, 0x5f, 0x64, 0x75, 0x6d, 0x70, 0x5f, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x83, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x78, 0x6c, 0x61, 0x44, 0x75, 0x6d, 0x70,
	0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x37, 0x0a, 0x18, 0x78, 0x6c, 0x61, 0x5f, 0x64, 0x75, 0x6d, 0x70, 0x5f, 0x6d, 0x61, 0x78,
	0x5f, 0x68, 0x6c, 0x6f, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x84, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x14, 0x78, 0x6c, 0x61, 0x44, 0x75, 0x6d, 0x70, 0x4d, 0x61, 0x78, 0x48,
	0x6c, 0x6f, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x78, 0x6c, 0x61,
	0x5f, 0x64, 0x75, 0x6d, 0x70, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x90, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x78, 0x6c,
	0x61, 0x44, 0x75, 0x6d, 0x70, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x18, 0x78, 0x6c, 0x61, 0x5f, 0x64, 0x75, 0x6d, 0x70, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x18,
	0x97, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x78, 0x6c, 0x61, 0x44, 0x75, 0x6d, 0x70, 0x43,
	0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x12, 0x38, 0x0a,
	0x19, 0x78, 0x6c, 0x61, 0x5f, 0x64, 0x75, 0x6d, 0x70, 0x5f, 0x68, 0x6c, 0x6f, 0x5f, 0x61, 0x73,
	0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0xa4, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x14, 0x78, 0x6c, 0x61, 0x44, 0x75, 0x6d, 0x70, 0x48, 0x6c, 0x6f, 0x41, 0x73, 0x4c,
	0x6f, 0x6e, 0x67, 0x54, 0x65, 0x78, 0x74, 0x12, 0x34, 0x0a, 0x17, 0x78, 0x6c, 0x61, 0x5f, 0x67,
	0x70, 0x75, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x5f, 0x6e, 0x63,
	0x68, 0x77, 0x18, 0x7d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x78, 0x6c, 0x61, 0x47, 0x70, 0x75,
	0x46, 0x6f, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x76, 0x4e, 0x63, 0x68, 0x77, 0x12, 0x35, 0x0a,
	0x17, 0x78, 0x6c, 0x61, 0x5f, 0x67, 0x70, 0x75, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x76, 0x5f, 0x6e, 0x68, 0x77, 0x63, 0x18, 0x92, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x13, 0x78, 0x6c, 0x61, 0x47, 0x70, 0x75, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x76,
	0x4e, 0x68, 0x77, 0x63, 0x12, 0x27, 0x0a, 0x10, 0x78, 0x6c, 0x61, 0x5f, 0x67, 0x70, 0x75, 0x5f,
	0x70, 0x74, 0x78, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x7f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d,
	0x78, 0x6c, 0x61, 0x47, 0x70, 0x75, 0x50, 0x74, 0x78, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x2e, 0x0a,
	0x13, 0x78, 0x6c, 0x61, 0x5f, 0x67, 0x70, 0x75, 0x5f, 0x64, 0x75, 0x6d, 0x70, 0x5f, 0x6c, 0x6c,
	0x76, 0x6d, 0x69, 0x72, 0x18, 0x9b, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x78, 0x6c, 0x61,
	0x47, 0x70, 0x75, 0x44, 0x75, 0x6d, 0x70, 0x4c, 0x6c, 0x76, 0x6d, 0x69, 0x72, 0x12, 0x45, 0x0a,
	0x1f, 0x78, 0x6c, 0x61, 0x5f, 0x67, 0x70, 0x75, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74,
	0x68, 0x6d, 0x5f, 0x64, 0x65, 0x6e, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x80, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x78, 0x6c, 0x61, 0x47, 0x70, 0x75, 0x41,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x44, 0x65, 0x6e, 0x79, 0x6c, 0x69, 0x73, 0x74,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x2c, 0x0a, 0x12, 0x78, 0x6c, 0x61, 0x5f, 0x74, 0x70, 0x75, 0x5f,
	0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6e, 0x18, 0x87, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x78, 0x6c, 0x61, 0x54, 0x70, 0x75, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x4e,
	0x61, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x78, 0x6c, 0x61, 0x5f, 0x74, 0x70, 0x75, 0x5f, 0x64, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x18, 0x88, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x78, 0x6c, 0x61, 0x54, 0x70, 0x75, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66,
	0x12, 0x3f, 0x0a, 0x1c, 0x78, 0x6c, 0x61, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x78, 0x70, 0x72, 0x6f, 0x66, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x6d, 0x65,
	0x18, 0x89, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x78, 0x6c, 0x61, 0x43, 0x70, 0x75, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x58, 0x70, 0x72, 0x6f, 0x66, 0x54, 0x72, 0x61, 0x63, 0x65, 0x6d,
	0x65, 0x12, 0x6a, 0x0a, 0x34, 0x78, 0x6c, 0x61, 0x5f, 0x67, 0x70, 0x75, 0x5f, 0x75, 0x6e, 0x73,
	0x61, 0x66, 0x65, 0x5f, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x74, 0x6f, 0x5f,
	0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6f, 0x6e, 0x5f, 0x70, 0x74, 0x78, 0x61, 0x73, 0x5f,
	0x6e, 0x6f, 0x74, 0x5f, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x8a, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x2b, 0x78, 0x6c, 0x61, 0x47, 0x70, 0x75, 0x55, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x46, 0x61,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x54, 0x6f, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x4f, 0x6e,
	0x50, 0x74, 0x78, 0x61, 0x73, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x35, 0x0a,
	0x17, 0x78, 0x6c, 0x61, 0x5f, 0x67, 0x70, 0x75, 0x5f, 0x61, 0x73, 0x6d, 0x5f, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x8d, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x78, 0x6c, 0x61, 0x47, 0x70, 0x75, 0x41, 0x73, 0x6d, 0x45, 0x78, 0x74, 0x72, 0x61, 0x46,
	0x6c, 0x61, 0x67, 0x73, 0x12, 0x52, 0x0a, 0x26, 0x78, 0x6c, 0x61, 0x5f, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x68, 0x65, 0x61, 0x70, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x68, 0x65, 0x61, 0x70, 0x18, 0x8e,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x21, 0x78, 0x6c, 0x61, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x68,
	0x65, 0x61, 0x70, 0x53, 0x69, 0x7a, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x50, 0x65, 0x72, 0x48, 0x65, 0x61, 0x70, 0x12, 0x47, 0x0a, 0x20, 0x78, 0x6c, 0x61, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67,
	0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x64, 0x75, 0x6d, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x8f, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x1c, 0x78, 0x6c, 0x61, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x41, 0x6e, 0x64, 0x44, 0x75, 0x6d, 0x70, 0x69, 0x6e,
	0x67, 0x12, 0x51, 0x0a, 0x25, 0x78, 0x6c, 0x61, 0x5f, 0x67, 0x70, 0x75, 0x5f, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x69, 0x73, 0x6d, 0x18, 0x93, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x21, 0x78, 0x6c, 0x61, 0x47, 0x70, 0x75, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x43, 0x6f,
	0x6d, 0x70, 0x69, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65,
	0x6c, 0x69, 0x73, 0x6d, 0x12, 0x3a, 0x0a, 0x19, 0x78, 0x6c, 0x61, 0x5f, 0x67, 0x70, 0x75, 0x5f,
	0x64, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x6f, 0x70,
	0x73, 0x18, 0x94, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x78, 0x6c, 0x61, 0x47, 0x70, 0x75,
	0x44, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x69, 0x63, 0x4f, 0x70, 0x73,
	0x12, 0x2f, 0x0a, 0x14, 0x78, 0x6c, 0x61, 0x5f, 0x67, 0x70, 0x75, 0x5f, 0x6c, 0x6c, 0x76, 0x6d,
	0x5f, 0x69, 0x72, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x96, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x10, 0x78, 0x6c, 0x61, 0x47, 0x70, 0x75, 0x4c, 0x6c, 0x76, 0x6d, 0x49, 0x72, 0x46, 0x69, 0x6c,
	0x65, 0x12, 0x44, 0x0a, 0x1f, 0x78, 0x6c, 0x61, 0x5f, 0x67, 0x70, 0x75, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x65,
	0x64, 0x75, 0x63, 0x65, 0x18, 0x98, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x78, 0x6c, 0x61,
	0x47, 0x70, 0x75, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x41, 0x6c,
	0x6c, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x12, 0x54, 0x0a, 0x27, 0x78, 0x6c, 0x61, 0x5f, 0x67,
	0x70, 0x75, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x5f,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x75,
	0x74, 0x65, 0x18, 0xb7, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x22, 0x78, 0x6c, 0x61, 0x47, 0x70,
	0x75, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x75, 0x74, 0x65, 0x12, 0x59, 0x0a,
	0x2a, 0x78, 0x6c, 0x61, 0x5f, 0x67, 0x70, 0x75, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x64,
	0x75, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x9d, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x24, 0x78, 0x6c, 0x61, 0x47, 0x70, 0x75, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x64,
	0x75, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x1d, 0x78, 0x6c, 0x61, 0x5f,
	0x67, 0x70, 0x75, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x69, 0x67, 0x75, 0x6f, 0x75, 0x73, 0x18, 0x9e, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x19, 0x78, 0x6c, 0x61, 0x47, 0x70, 0x75, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x64, 0x75, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x67, 0x75, 0x6f, 0x75, 0x73, 0x12, 0x69, 0x0a, 0x33, 0x78,
	0x6c, 0x61, 0x5f, 0x67, 0x70, 0x75, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x64, 0x75, 0x63,
	0x65, 0x5f, 0x62, 0x6c, 0x75, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x75,
	0x6d, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x68, 0x6f,
	0x73, 0x74, 0x18, 0x9f, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x2b, 0x78, 0x6c, 0x61, 0x47, 0x70,
	0x75, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x42, 0x6c, 0x75, 0x65, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4e, 0x75, 0x6d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x50,
	0x65, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x1d, 0x78, 0x6c, 0x61, 0x5f, 0x67, 0x70,
	0x75, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x75, 0x64, 0x6e, 0x6e, 0x5f, 0x66,
	0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x18, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19,
	0x78, 0x6c, 0x61, 0x47, 0x70, 0x75, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x75, 0x64, 0x6e,
	0x6e, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x12, 0x3a, 0x0a, 0x19, 0x78, 0x6c, 0x61,
	0x5f, 0x64, 0x75, 0x6d, 0x70, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x99, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x78,
	0x6c, 0x61, 0x44, 0x75, 0x6d, 0x70, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x37, 0x0a, 0x18, 0x78, 0x6c, 0x61, 0x5f, 0x64, 0x75, 0x6d,
	0x70, 0x5f, 0x68, 0x6c, 0x6f, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x72,
	0x65, 0x18, 0x9a, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x78, 0x6c, 0x61, 0x44, 0x75, 0x6d,
	0x70, 0x48, 0x6c, 0x6f, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x12, 0x4e,
	0x0a, 0x24, 0x78, 0x6c, 0x61, 0x5f, 0x67, 0x70, 0x75, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x5f,
	0x70, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x9c, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1f, 0x78,
	0x6c, 0x61, 0x47, 0x70, 0x75, 0x53, 0x74, 0x72, 0x69, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x76, 0x41,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x50, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x50,
	0x0a, 0x25, 0x78, 0x6c, 0x61, 0x5f, 0x67, 0x70, 0x75, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x78, 0x6c, 0x61, 0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0xa9, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x20,
	0x78, 0x6c, 0x61, 0x47, 0x70, 0x75, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x58, 0x6c, 0x61, 0x52,
	0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x56, 0x0a, 0x28, 0x78, 0x6c, 0x61, 0x5f, 0x67, 0x70, 0x75, 0x5f, 0x6e, 0x63, 0x63, 0x6c,
	0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0xa3, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x23, 0x78, 0x6c, 0x61, 0x47, 0x70, 0x75, 0x4e, 0x63, 0x63, 0x6c, 0x54,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x45, 0x0a, 0x1f, 0x78, 0x6c, 0x61, 0x5f,
	0x67, 0x70, 0x75, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x18, 0xa5, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x1b, 0x78, 0x6c, 0x61, 0x47, 0x70, 0x75, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x12,
	0x36, 0x0a, 0x17, 0x78, 0x6c, 0x61, 0x5f, 0x67, 0x70, 0x75, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x63, 0x75, 0x62, 0x6c, 0x61, 0x73, 0x6c, 0x74, 0x18, 0xa6, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x14, 0x78, 0x6c, 0x61, 0x47, 0x70, 0x75, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x75, 0x62, 0x6c, 0x61, 0x73, 0x6c, 0x74, 0x12, 0x3b, 0x0a, 0x1a, 0x78, 0x6c, 0x61, 0x5f, 0x67,
	0x70, 0x75, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x75, 0x64, 0x61, 0x5f, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x73, 0x18, 0xb4, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x78, 0x6c,
	0x61, 0x47, 0x70, 0x75, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x75, 0x64, 0x61, 0x47, 0x72,
	0x61, 0x70, 0x68, 0x73, 0x12, 0x50, 0x0a, 0x25, 0x78, 0x6c, 0x61, 0x5f, 0x67, 0x70, 0x75, 0x5f,
	0x72, 0x65, 0x64, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x73, 0x63, 0x72, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x65, 0x67, 0x61, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0xa7, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x20, 0x78, 0x6c, 0x61, 0x47, 0x70, 0x75, 0x52, 0x65, 0x64, 0x7a,
	0x6f, 0x6e, 0x65, 0x53, 0x63, 0x72, 0x61, 0x74, 0x63, 0x68, 0x4d, 0x61, 0x78, 0x4d, 0x65, 0x67,
	0x61, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x23, 0x78, 0x6c, 0x61, 0x5f, 0x67, 0x70,
	0x75, 0x5f, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x79, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x66,
	0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xa8, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x1e, 0x78, 0x6c, 0x61, 0x47, 0x70, 0x75, 0x53, 0x69, 0x6d, 0x70,
	0x6c, 0x69, 0x66, 0x79, 0x41, 0x6c, 0x6c, 0x46, 0x70, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3a, 0x0a, 0x19, 0x78, 0x6c, 0x61, 0x5f, 0x67, 0x70, 0x75, 0x5f,
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x5f, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x73, 0x18, 0xac, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x78, 0x6c, 0x61, 0x47, 0x70, 0x75,
	0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x73,
	0x12, 0x26, 0x0a, 0x0f, 0x78, 0x6c, 0x61, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x75, 0x73, 0x65, 0x5f,
	0x61, 0x63, 0x6c, 0x18, 0xae, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x78, 0x6c, 0x61, 0x43,
	0x70, 0x75, 0x55, 0x73, 0x65, 0x41, 0x63, 0x6c, 0x12, 0x3e, 0x0a, 0x1c, 0x78, 0x6c, 0x61, 0x5f,
	0x63, 0x70, 0x75, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x64, 0x6f, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x76, 0x5f, 0x6d, 0x61, 0x74, 0x68, 0x18, 0xaf, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x17, 0x78, 0x6c, 0x61, 0x43, 0x70, 0x75, 0x53, 0x74, 0x72, 0x69, 0x63, 0x74, 0x44, 0x6f, 0x74,
	0x43, 0x6f, 0x6e, 0x76, 0x4d, 0x61, 0x74, 0x68, 0x12, 0x3b, 0x0a, 0x1a, 0x78, 0x6c, 0x61, 0x5f,
	0x67, 0x70, 0x75, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x66, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0xb5, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x78,
	0x6c, 0x61, 0x47, 0x70, 0x75, 0x55, 0x73, 0x65, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x46,
	0x75, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x20, 0x78, 0x6c, 0x61, 0x5f, 0x64, 0x75, 0x6d,
	0x70, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x68, 0x69, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0xb6, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x1c, 0x78, 0x6c, 0x61, 0x44, 0x75, 0x6d, 0x70, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79,
	0x48, 0x69, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x69,
	0x0a, 0x19, 0x78, 0x6c, 0x61, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x5f, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xf4, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x58, 0x6c, 0x61, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x16, 0x78, 0x6c, 0x61, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x49, 0x0a, 0x1b, 0x58, 0x6c, 0x61,
	0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x45, 0x78, 0x74, 0x72, 0x61, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x38, 0x0a, 0x0b, 0x53, 0x68, 0x61, 0x70, 0x65, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x73, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x47, 0x4e, 0x4f, 0x52, 0x45, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c,
	0x43, 0x4f, 0x4d, 0x50, 0x49, 0x4c, 0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x02, 0x22, 0x91,
	0x01, 0x0a, 0x12, 0x53, 0x74, 0x65, 0x70, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x4d, 0x41,
	0x52, 0x4b, 0x5f, 0x41, 0x54, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x10, 0x00, 0x12, 0x25, 0x0a,
	0x21, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x5f, 0x41, 0x54, 0x5f, 0x54, 0x4f,
	0x50, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x57, 0x48, 0x49, 0x4c, 0x45, 0x5f, 0x4c, 0x4f,
	0x4f, 0x50, 0x10, 0x01, 0x12, 0x28, 0x0a, 0x24, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x4d, 0x41, 0x52,
	0x4b, 0x5f, 0x41, 0x54, 0x5f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x4c, 0x45, 0x56, 0x45,
	0x4c, 0x5f, 0x57, 0x48, 0x49, 0x4c, 0x45, 0x5f, 0x4c, 0x4f, 0x4f, 0x50, 0x10, 0x03, 0x12, 0x12,
	0x0a, 0x0e, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x5f, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x02, 0x4a, 0x04, 0x08, 0x3f, 0x10, 0x40, 0x4a, 0x06, 0x08, 0x86, 0x01, 0x10, 0x87, 0x01,
	0x4a, 0x04, 0x08, 0x50, 0x10, 0x51, 0x4a, 0x04, 0x08, 0x5d, 0x10, 0x5e, 0x4a, 0x04, 0x08, 0x5e,
	0x10, 0x5f, 0x4a, 0x04, 0x08, 0x62, 0x10, 0x63, 0x4a, 0x06, 0x08, 0x82, 0x01, 0x10, 0x83, 0x01,
	0x4a, 0x06, 0x08, 0xa1, 0x01, 0x10, 0xa2, 0x01, 0x4a, 0x06, 0x08, 0xa2, 0x01, 0x10, 0xa3, 0x01,
	0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x4a, 0x04, 0x08, 0x75, 0x10, 0x76, 0x4a, 0x06, 0x08, 0x85,
	0x01, 0x10, 0x86, 0x01, 0x4a, 0x06, 0x08, 0x8b, 0x01, 0x10, 0x8c, 0x01, 0x4a, 0x06, 0x08, 0xb0,
	0x01, 0x10, 0xb1, 0x01, 0x4a, 0x06, 0x08, 0xb2, 0x01, 0x10, 0xb3, 0x01, 0x22, 0xb7, 0x01, 0x0a,
	0x1d, 0x53, 0x68, 0x61, 0x72, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x69, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x34,
	0x0a, 0x16, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x5f, 0x73, 0x68, 0x61, 0x70, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x13, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x53, 0x68,
	0x61, 0x70, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2c, 0x0a, 0x12, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x70, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x10, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x53, 0x68, 0x61, 0x70,
	0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xdb, 0x08, 0x0a, 0x10, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x48, 0x0a, 0x18, 0x73,
	0x68, 0x61, 0x70, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x5f, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x78, 0x6c, 0x61, 0x2e, 0x53, 0x68, 0x61, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x15,
	0x73, 0x68, 0x61, 0x70, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4c,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x04, 0x73, 0x65, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x0d, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x0c, 0x64, 0x65, 0x62, 0x75, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x38, 0x0a, 0x0e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x78, 0x6c, 0x61, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x0d, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6e,
	0x75, 0x6d, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x47,
	0x0a, 0x11, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6c, 0x61, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x10, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x18, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x5f, 0x70, 0x61, 0x73, 0x73, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x50, 0x61, 0x73, 0x73, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x75, 0x6d, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x75, 0x6e,
	0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x61, 0x75,
	0x6e, 0x63, 0x68, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x75, 0x73, 0x65, 0x5f, 0x73, 0x70, 0x6d,
	0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x75, 0x73, 0x65, 0x53, 0x70, 0x6d, 0x64, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x3b, 0x0a, 0x1a, 0x75, 0x73, 0x65,
	0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x73, 0x70, 0x6d, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x75,
	0x73, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x70, 0x6d, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x48, 0x0a, 0x21, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x73,
	0x70, 0x6d, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67,
	0x5f, 0x6d, 0x65, 0x73, 0x68, 0x5f, 0x73, 0x68, 0x61, 0x70, 0x65, 0x18, 0x10, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x1d, 0x61, 0x75, 0x74, 0x6f, 0x53, 0x70, 0x6d, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x68, 0x53, 0x68, 0x61, 0x70, 0x65,
	0x12, 0x44, 0x0a, 0x1f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x73, 0x70, 0x6d, 0x64, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x73, 0x68, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x03, 0x52, 0x1b, 0x61, 0x75, 0x74, 0x6f, 0x53,
	0x70, 0x6d, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x4d,
	0x65, 0x73, 0x68, 0x49, 0x64, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x64, 0x75, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x68, 0x6c, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x64, 0x65, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x48, 0x6c, 0x6f, 0x12,
	0x57, 0x0a, 0x29, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x70, 0x6d, 0x64, 0x5f, 0x73, 0x68,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x24, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x70, 0x6d, 0x64, 0x53, 0x68, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x6f, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x56, 0x0a, 0x28, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x62, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x5f, 0x76, 0x69, 0x61, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x08, 0x52, 0x24, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x56, 0x69, 0x61, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73,
	0x12, 0x47, 0x0a, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x65, 0x70, 0x61, 0x72, 0x61,
	0x74, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x63, 0x0a, 0x1c, 0x73, 0x68, 0x61,
	0x72, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x69, 0x72, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x19, 0x73, 0x68, 0x61, 0x72, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x69, 0x72, 0x73, 0x4a, 0x04,
	0x08, 0x0d, 0x10, 0x0e, 0x22, 0xbe, 0x13, 0x0a, 0x14, 0x48, 0x6c, 0x6f, 0x4d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x50, 0x0a,
	0x18, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x53, 0x68, 0x61,
	0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x16, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x65, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x73,
	0x65, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x49, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x75, 0x6d, 0x5f, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6e,
	0x75, 0x6d, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x56, 0x0a, 0x28,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x62,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x76, 0x69, 0x61, 0x5f, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x08, 0x52, 0x24,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x42, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x56, 0x69, 0x61, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x75, 0x73, 0x65, 0x5f, 0x73, 0x70, 0x6d, 0x64,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x13, 0x75, 0x73, 0x65, 0x53, 0x70, 0x6d, 0x64, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x3b, 0x0a, 0x1a, 0x75, 0x73, 0x65, 0x5f,
	0x61, 0x75, 0x74, 0x6f, 0x5f, 0x73, 0x70, 0x6d, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x75, 0x73,
	0x65, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x70, 0x6d, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x48, 0x0a, 0x21, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x73, 0x70,
	0x6d, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5f,
	0x6d, 0x65, 0x73, 0x68, 0x5f, 0x73, 0x68, 0x61, 0x70, 0x65, 0x18, 0x09, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x1d, 0x61, 0x75, 0x74, 0x6f, 0x53, 0x70, 0x6d, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x68, 0x53, 0x68, 0x61, 0x70, 0x65, 0x12,
	0x44, 0x0a, 0x1f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x73, 0x70, 0x6d, 0x64, 0x5f, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x65, 0x73, 0x68, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x03, 0x52, 0x1b, 0x61, 0x75, 0x74, 0x6f, 0x53, 0x70,
	0x6d, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x65,
	0x73, 0x68, 0x49, 0x64, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x64, 0x75, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x5f, 0x68, 0x6c, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x64, 0x65, 0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x48, 0x6c, 0x6f, 0x12, 0x3f,
	0x0a, 0x1c, 0x69, 0x6e, 0x74, 0x72, 0x61, 0x5f, 0x6f, 0x70, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6c,
	0x6c, 0x65, 0x6c, 0x69, 0x73, 0x6d, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x19, 0x69, 0x6e, 0x74, 0x72, 0x61, 0x4f, 0x70, 0x50, 0x61, 0x72,
	0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x69, 0x73, 0x6d, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x36, 0x0a, 0x0d, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x44, 0x65,
	0x62, 0x75, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0c, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x54, 0x0a, 0x18, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x63, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x6c, 0x61,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x16, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x47,
	0x0a, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x65,
	0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x53,
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x65, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x63, 0x0a, 0x1c, 0x73, 0x68, 0x61, 0x72, 0x64,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x78, 0x6c, 0x61, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x69, 0x72, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x19, 0x73, 0x68, 0x61, 0x72, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x69, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x18,
	0x61, 0x6c, 0x69, 0x61, 0x73, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67,
	0x68, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16,
	0x61, 0x6c, 0x69, 0x61, 0x73, 0x50, 0x61, 0x73, 0x73, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x49, 0x0a, 0x21, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x5f, 0x61, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x1e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x41, 0x77, 0x61, 0x72, 0x65, 0x43,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x6a, 0x0a, 0x18, 0x66, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x48, 0x6c, 0x6f, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46,
	0x75, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x66, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a,
	0x0d, 0x66, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x14,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x48, 0x6c, 0x6f, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0c, 0x66, 0x75, 0x73, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x47, 0x0a, 0x0a, 0x64, 0x6f, 0x74, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x78, 0x6c, 0x61,
	0x2e, 0x48, 0x6c, 0x6f, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x64, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x4c, 0x0a, 0x0d, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x48, 0x6c, 0x6f,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x0c, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x43, 0x0a,
	0x1e, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x73,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x17, 0x20, 0x03, 0x28, 0x04, 0x52, 0x1b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x56, 0x0a, 0x15, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x18, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x48, 0x6c, 0x6f, 0x4d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x13, 0x70, 0x68, 0x61, 0x73, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x68,
	0x61, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x70, 0x68, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x4a, 0x0a, 0x0b, 0x66,
	0x6c, 0x61, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x48, 0x6c, 0x6f, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x6c, 0x61, 0x67,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x66, 0x6c, 0x61,
	0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x57, 0x0a, 0x29, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x5f, 0x73, 0x70, 0x6d, 0x64, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70,
	0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x5f, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x24, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x53, 0x70, 0x6d, 0x64, 0x53, 0x68, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f,
	0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x12, 0x69, 0x0a, 0x16, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x48, 0x6c, 0x6f, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x61, 0x0a, 0x1d, 0x6d,
	0x61, 0x74, 0x72, 0x69, 0x78, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x6e, 0x64, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x1a, 0x6d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x55, 0x6e, 0x69, 0x74, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x1e,
	0x0a, 0x08, 0x42, 0x6f, 0x6f, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x76, 0x61,
	0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x08, 0x52, 0x04, 0x76, 0x61, 0x6c, 0x73, 0x1a, 0x1f,
	0x0a, 0x09, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x76,
	0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x04, 0x76, 0x61, 0x6c, 0x73, 0x1a,
	0x4a, 0x0a, 0x0d, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x39, 0x0a, 0x05, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x48, 0x6c, 0x6f, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x1a, 0x61, 0x0a, 0x0e, 0x44,
	0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x39, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x48, 0x6c, 0x6f, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d,
	0x0a, 0x0f, 0x46, 0x6c, 0x61, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x47, 0x0a,
	0x19, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x6e,
	0x63, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3d, 0x0a, 0x16, 0x46, 0x75, 0x73, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x07, 0x0a, 0x03, 0x4f, 0x46, 0x46, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x45, 0x52,
	0x5f, 0x45, 0x44, 0x47, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x45, 0x52, 0x5f, 0x4e,
	0x4f, 0x44, 0x45, 0x10, 0x02, 0x22, 0x81, 0x01, 0x0a, 0x18, 0x48, 0x6c, 0x6f, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x32, 0x0a, 0x0a, 0x68, 0x6c, 0x6f, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x48, 0x6c, 0x6f,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x09, 0x68, 0x6c, 0x6f,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x48, 0x6c, 0x6f,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x3c, 0x0a, 0x17, 0x47, 0x65, 0x74,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x54, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x0e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x78, 0x6c,
	0x61, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x0d,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x22, 0x81, 0x01,
	0x0a, 0x17, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x11, 0x73, 0x68, 0x61, 0x70, 0x65, 0x5f, 0x77, 0x69,
	0x74, 0x68, 0x5f, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x53, 0x68, 0x61, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x0f, 0x73, 0x68, 0x61, 0x70, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4c, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x22, 0x47, 0x0a, 0x18, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x6f, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a,
	0x07, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x07, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x22, 0x7e, 0x0a, 0x17, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x07, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x4c, 0x69, 0x74,
	0x65, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x07, 0x6c, 0x69, 0x74, 0x65, 0x72,
	0x61, 0x6c, 0x12, 0x36, 0x0a, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x78, 0x6c, 0x61, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x0c, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x22, 0x45, 0x0a, 0x18, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x9d, 0x01, 0x0a, 0x17, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x6f,
	0x49, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a,
	0x07, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x07, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x0d, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x52, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x22, 0x1a, 0x0a, 0x18, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x6f, 0x49,
	0x6e, 0x66, 0x65, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb0, 0x01,
	0x0a, 0x1a, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x4f, 0x75,
	0x74, 0x66, 0x65, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x11,
	0x73, 0x68, 0x61, 0x70, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x6c, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x53, 0x68,
	0x61, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0f, 0x73, 0x68, 0x61, 0x70, 0x65, 0x57,
	0x69, 0x74, 0x68, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x0d, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x52, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x22, 0x4a, 0x0a, 0x1b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d,
	0x4f, 0x75, 0x74, 0x66, 0x65, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2b, 0x0a, 0x07, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x07, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x22, 0x4c, 0x0a, 0x12,
	0x52, 0x65, 0x73, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x36, 0x0a, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x78, 0x6c, 0x61, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x0c, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x22, 0x15, 0x0a, 0x13, 0x52, 0x65,
	0x73, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x8d, 0x01, 0x0a, 0x1c, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x48, 0x6c,
	0x6f, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0b, 0x63, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0d, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x0c, 0x64, 0x65, 0x62, 0x75, 0x67, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x47, 0x0a, 0x18, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78,
	0x6c, 0x61, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x22, 0x5f, 0x0a, 0x1a, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e,
	0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x48, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x22, 0x4b, 0x0a, 0x1b, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x48, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x78, 0x6c,
	0x61, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52,
	0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x3e, 0x0a, 0x11, 0x55, 0x6e, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6c,
	0x61, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x48, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x14, 0x0a, 0x12, 0x55, 0x6e, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd3,
	0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x48, 0x6c, 0x6f,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0b, 0x63, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x11, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x10, 0x65, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x46, 0x0a, 0x17,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x70, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68,
	0x5f, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x78, 0x6c, 0x61, 0x2e, 0x53, 0x68, 0x61, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x68, 0x61, 0x70, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4c, 0x61,
	0x79, 0x6f, 0x75, 0x74, 0x22, 0x3f, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x06, 0x68,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x22, 0x73, 0x0a, 0x0e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x06, 0x68,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x33, 0x0a, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52,
	0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xc5, 0x01, 0x0a, 0x13, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x48, 0x6c,
	0x6f, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0b, 0x63, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x09, 0x61, 0x72, 0x67,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78,
	0x6c, 0x61, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x52, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x42,
	0x0a, 0x11, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6c, 0x61, 0x2e,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x10, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x53, 0x0a, 0x1b, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x47, 0x72, 0x61,
	0x70, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x34, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0x71, 0x0a, 0x0f, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6c, 0x61,
	0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x2f, 0x0a, 0x07, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6c, 0x61,
	0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x4d, 0x0a, 0x17, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x09,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x22, 0x4d, 0x0a, 0x17, 0x57, 0x61, 0x69,
	0x74, 0x46, 0x6f, 0x72, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x45, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x09, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x7a, 0x0a, 0x18, 0x57, 0x61, 0x69, 0x74,
	0x46, 0x6f, 0x72, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x06, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x12, 0x2f, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x07, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x1b, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x78, 0x6c, 0x61, 0x2e,
	0x48, 0x6c, 0x6f, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0b,
	0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x0d, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4c, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x22, 0x46, 0x0a, 0x17, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a,
	0x07, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x07, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x22, 0x53, 0x0a, 0x17, 0x44, 0x65,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0c, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x5f, 0x68,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6c,
	0x61, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x48, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x52, 0x0b, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x22,
	0x5a, 0x0a, 0x18, 0x44, 0x65, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x54, 0x75,
	0x70, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0f, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x0e, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x22, 0xe0, 0x01, 0x0a, 0x0f,
	0x4c, 0x6f, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x30, 0x0a, 0x14, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x69, 0x6f, 0x5f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x69, 0x6f, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x69, 0x6f, 0x5f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x69, 0x6f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x34, 0x0a, 0x0d, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x53, 0x68, 0x61, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x0c, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x68, 0x61, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x10, 0x0a, 0x03,
	0x7a, 0x69, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x7a, 0x69, 0x70, 0x22, 0xd7,
	0x01, 0x0a, 0x10, 0x4c, 0x6f, 0x61, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2e,
	0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x68, 0x61, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x53, 0x68, 0x61, 0x70, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x53, 0x68, 0x61, 0x70, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x6f, 0x77, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x6f, 0x77, 0x73, 0x5f, 0x6c, 0x6f,
	0x61, 0x64, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x6f, 0x77, 0x73,
	0x4c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6e, 0x61, 0x6e,
	0x6f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x3c, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53,
	0x68, 0x61, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6c, 0x61, 0x2e,
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x39, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x68, 0x61,
	0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x73, 0x68,
	0x61, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x78, 0x6c, 0x61, 0x2e,
	0x53, 0x68, 0x61, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x05, 0x73, 0x68, 0x61, 0x70,
	0x65, 0x22, 0x3a, 0x0a, 0x0d, 0x55, 0x6e, 0x70, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x44, 0x61, 0x74,
	0x61, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x44, 0x0a,
	0x0e, 0x55, 0x6e, 0x70, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x32, 0x0a, 0x09, 0x74, 0x69, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x44,
	0x61, 0x74, 0x61, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x08, 0x74, 0x69, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x22, 0x82, 0x02, 0x0a, 0x0d, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x42, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x78, 0x6c,
	0x61, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x69, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x1a, 0x85, 0x01, 0x0a, 0x0b, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x34, 0x0a, 0x16, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x14, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x43, 0x79, 0x63, 0x6c, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x12, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x73, 0x42, 0x79, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x2e,
	0x78, 0x6c, 0x61, 0x42, 0x08, 0x58, 0x6c, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x02, 0x50,
	0x01, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x65, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x71, 0x63, 0x69,
	0x69, 0x70, 0x2d, 0x69, 0x63, 0x70, 0x2f, 0x74, 0x66, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e,
	0x67, 0x2f, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x6d,
	0x70, 0x69, 0x6c, 0x65, 0x72, 0x2f, 0x78, 0x6c, 0x61, 0xa2, 0x02, 0x03, 0x58, 0x58, 0x58, 0xaa,
	0x02, 0x03, 0x58, 0x6c, 0x61, 0xca, 0x02, 0x03, 0x58, 0x6c, 0x61, 0xe2, 0x02, 0x0f, 0x58, 0x6c,
	0x61, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x03,
	0x58, 0x6c, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tensorflow_compiler_xla_xla_proto_rawDescOnce sync.Once
	file_tensorflow_compiler_xla_xla_proto_rawDescData = file_tensorflow_compiler_xla_xla_proto_rawDesc
)

func file_tensorflow_compiler_xla_xla_proto_rawDescGZIP() []byte {
	file_tensorflow_compiler_xla_xla_proto_rawDescOnce.Do(func() {
		file_tensorflow_compiler_xla_xla_proto_rawDescData = protoimpl.X.CompressGZIP(file_tensorflow_compiler_xla_xla_proto_rawDescData)
	})
	return file_tensorflow_compiler_xla_xla_proto_rawDescData
}

var file_tensorflow_compiler_xla_xla_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_tensorflow_compiler_xla_xla_proto_msgTypes = make([]protoimpl.MessageInfo, 51)
var file_tensorflow_compiler_xla_xla_proto_goTypes = []interface{}{
	(DebugOptions_ShapeChecks)(0),                    // 0: xla.DebugOptions.ShapeChecks
	(DebugOptions_StepMarkerLocation)(0),             // 1: xla.DebugOptions.StepMarkerLocation
	(HloModuleConfigProto_FusionConfigCollection)(0), // 2: xla.HloModuleConfigProto.FusionConfigCollection
	(*DebugOptions)(nil),                             // 3: xla.DebugOptions
	(*ShardableValueUpdatePairProto)(nil),            // 4: xla.ShardableValueUpdatePairProto
	(*ExecutionOptions)(nil),                         // 5: xla.ExecutionOptions
	(*HloModuleConfigProto)(nil),                     // 6: xla.HloModuleConfigProto
	(*HloModuleProtoWithConfig)(nil),                 // 7: xla.HloModuleProtoWithConfig
	(*GetDeviceHandlesRequest)(nil),                  // 8: xla.GetDeviceHandlesRequest
	(*GetDeviceHandlesResponse)(nil),                 // 9: xla.GetDeviceHandlesResponse
	(*TransferToClientRequest)(nil),                  // 10: xla.TransferToClientRequest
	(*TransferToClientResponse)(nil),                 // 11: xla.TransferToClientResponse
	(*TransferToServerRequest)(nil),                  // 12: xla.TransferToServerRequest
	(*TransferToServerResponse)(nil),                 // 13: xla.TransferToServerResponse
	(*TransferToInfeedRequest)(nil),                  // 14: xla.TransferToInfeedRequest
	(*TransferToInfeedResponse)(nil),                 // 15: xla.TransferToInfeedResponse
	(*TransferFromOutfeedRequest)(nil),               // 16: xla.TransferFromOutfeedRequest
	(*TransferFromOutfeedResponse)(nil),              // 17: xla.TransferFromOutfeedResponse
	(*ResetDeviceRequest)(nil),                       // 18: xla.ResetDeviceRequest
	(*ResetDeviceResponse)(nil),                      // 19: xla.ResetDeviceResponse
	(*ComputationGraphStatsRequest)(nil),             // 20: xla.ComputationGraphStatsRequest
	(*ComputationStatsResponse)(nil),                 // 21: xla.ComputationStatsResponse
	(*CreateChannelHandleRequest)(nil),               // 22: xla.CreateChannelHandleRequest
	(*CreateChannelHandleResponse)(nil),              // 23: xla.CreateChannelHandleResponse
	(*UnregisterRequest)(nil),                        // 24: xla.UnregisterRequest
	(*UnregisterResponse)(nil),                       // 25: xla.UnregisterResponse
	(*CompileRequest)(nil),                           // 26: xla.CompileRequest
	(*CompileResponse)(nil),                          // 27: xla.CompileResponse
	(*ExecuteRequest)(nil),                           // 28: xla.ExecuteRequest
	(*ExecuteGraphRequest)(nil),                      // 29: xla.ExecuteGraphRequest
	(*ExecuteGraphParallelRequest)(nil),              // 30: xla.ExecuteGraphParallelRequest
	(*ExecuteResponse)(nil),                          // 31: xla.ExecuteResponse
	(*ExecuteParallelResponse)(nil),                  // 32: xla.ExecuteParallelResponse
	(*WaitForExecutionRequest)(nil),                  // 33: xla.WaitForExecutionRequest
	(*WaitForExecutionResponse)(nil),                 // 34: xla.WaitForExecutionResponse
	(*ComputeConstantGraphRequest)(nil),              // 35: xla.ComputeConstantGraphRequest
	(*ComputeConstantResponse)(nil),                  // 36: xla.ComputeConstantResponse
	(*DeconstructTupleRequest)(nil),                  // 37: xla.DeconstructTupleRequest
	(*DeconstructTupleResponse)(nil),                 // 38: xla.DeconstructTupleResponse
	(*LoadDataRequest)(nil),                          // 39: xla.LoadDataRequest
	(*LoadDataResponse)(nil),                         // 40: xla.LoadDataResponse
	(*GetShapeRequest)(nil),                          // 41: xla.GetShapeRequest
	(*GetShapeResponse)(nil),                         // 42: xla.GetShapeResponse
	(*UnpackRequest)(nil),                            // 43: xla.UnpackRequest
	(*UnpackResponse)(nil),                           // 44: xla.UnpackResponse
	(*ScheduleProto)(nil),                            // 45: xla.ScheduleProto
	nil,                                              // 46: xla.DebugOptions.XlaBackendExtraOptionsEntry
	(*HloModuleConfigProto_BoolList)(nil),            // 47: xla.HloModuleConfigProto.BoolList
	(*HloModuleConfigProto_Int64List)(nil),           // 48: xla.HloModuleConfigProto.Int64List
	(*HloModuleConfigProto_Int64ListList)(nil),       // 49: xla.HloModuleConfigProto.Int64ListList
	nil,                               // 50: xla.HloModuleConfigProto.DotConfigEntry
	nil,                               // 51: xla.HloModuleConfigProto.FlagConfigEntry
	nil,                               // 52: xla.HloModuleConfigProto.AnalysisAllowanceMapEntry
	(*ScheduleProto_Instruction)(nil), // 53: xla.ScheduleProto.Instruction
	(*ShapeProto)(nil),                // 54: xla.ShapeProto
	(*DeviceHandle)(nil),              // 55: xla.DeviceHandle
	(*DeviceAssignmentProto)(nil),     // 56: xla.DeviceAssignmentProto
	(*ProgramShapeProto)(nil),         // 57: xla.ProgramShapeProto
	(PrecisionConfig_Precision)(0),    // 58: xla.PrecisionConfig.Precision
	(*service.HloModuleProto)(nil),    // 59: xla.HloModuleProto
	(*GlobalDataHandle)(nil),          // 60: xla.GlobalDataHandle
	(*LiteralProto)(nil),              // 61: xla.LiteralProto
	(*ComputationStats)(nil),          // 62: xla.ComputationStats
	(ChannelHandle_ChannelType)(0),    // 63: xla.ChannelHandle.ChannelType
	(*ChannelHandle)(nil),             // 64: xla.ChannelHandle
	(*ExecutionHandle)(nil),           // 65: xla.ExecutionHandle
	(*ExecutionProfile)(nil),          // 66: xla.ExecutionProfile
	(*LayoutProto)(nil),               // 67: xla.LayoutProto
}
var file_tensorflow_compiler_xla_xla_proto_depIdxs = []int32{
	0,  // 0: xla.DebugOptions.xla_gpu_shape_checks:type_name -> xla.DebugOptions.ShapeChecks
	1,  // 1: xla.DebugOptions.xla_step_marker_location:type_name -> xla.DebugOptions.StepMarkerLocation
	46, // 2: xla.DebugOptions.xla_backend_extra_options:type_name -> xla.DebugOptions.XlaBackendExtraOptionsEntry
	54, // 3: xla.ExecutionOptions.shape_with_output_layout:type_name -> xla.ShapeProto
	3,  // 4: xla.ExecutionOptions.debug_options:type_name -> xla.DebugOptions
	55, // 5: xla.ExecutionOptions.device_handles:type_name -> xla.DeviceHandle
	56, // 6: xla.ExecutionOptions.device_assignment:type_name -> xla.DeviceAssignmentProto
	4,  // 7: xla.ExecutionOptions.shardable_value_update_pairs:type_name -> xla.ShardableValueUpdatePairProto
	57, // 8: xla.HloModuleConfigProto.entry_computation_layout:type_name -> xla.ProgramShapeProto
	3,  // 9: xla.HloModuleConfigProto.debug_options:type_name -> xla.DebugOptions
	56, // 10: xla.HloModuleConfigProto.static_device_assignment:type_name -> xla.DeviceAssignmentProto
	4,  // 11: xla.HloModuleConfigProto.shardable_value_update_pairs:type_name -> xla.ShardableValueUpdatePairProto
	2,  // 12: xla.HloModuleConfigProto.fusion_config_collection:type_name -> xla.HloModuleConfigProto.FusionConfigCollection
	47, // 13: xla.HloModuleConfigProto.fusion_config:type_name -> xla.HloModuleConfigProto.BoolList
	50, // 14: xla.HloModuleConfigProto.dot_config:type_name -> xla.HloModuleConfigProto.DotConfigEntry
	49, // 15: xla.HloModuleConfigProto.layout_config:type_name -> xla.HloModuleConfigProto.Int64ListList
	47, // 16: xla.HloModuleConfigProto.phase_ordering_config:type_name -> xla.HloModuleConfigProto.BoolList
	51, // 17: xla.HloModuleConfigProto.flag_config:type_name -> xla.HloModuleConfigProto.FlagConfigEntry
	52, // 18: xla.HloModuleConfigProto.analysis_allowance_map:type_name -> xla.HloModuleConfigProto.AnalysisAllowanceMapEntry
	58, // 19: xla.HloModuleConfigProto.matrix_unit_operand_precision:type_name -> xla.PrecisionConfig.Precision
	59, // 20: xla.HloModuleProtoWithConfig.hlo_module:type_name -> xla.HloModuleProto
	6,  // 21: xla.HloModuleProtoWithConfig.config:type_name -> xla.HloModuleConfigProto
	55, // 22: xla.GetDeviceHandlesResponse.device_handles:type_name -> xla.DeviceHandle
	60, // 23: xla.TransferToClientRequest.data:type_name -> xla.GlobalDataHandle
	54, // 24: xla.TransferToClientRequest.shape_with_layout:type_name -> xla.ShapeProto
	61, // 25: xla.TransferToClientResponse.literal:type_name -> xla.LiteralProto
	61, // 26: xla.TransferToServerRequest.literal:type_name -> xla.LiteralProto
	55, // 27: xla.TransferToServerRequest.device_handle:type_name -> xla.DeviceHandle
	60, // 28: xla.TransferToServerResponse.data:type_name -> xla.GlobalDataHandle
	61, // 29: xla.TransferToInfeedRequest.literal:type_name -> xla.LiteralProto
	55, // 30: xla.TransferToInfeedRequest.device_handle:type_name -> xla.DeviceHandle
	54, // 31: xla.TransferFromOutfeedRequest.shape_with_layout:type_name -> xla.ShapeProto
	55, // 32: xla.TransferFromOutfeedRequest.device_handle:type_name -> xla.DeviceHandle
	61, // 33: xla.TransferFromOutfeedResponse.literal:type_name -> xla.LiteralProto
	55, // 34: xla.ResetDeviceRequest.device_handle:type_name -> xla.DeviceHandle
	59, // 35: xla.ComputationGraphStatsRequest.computation:type_name -> xla.HloModuleProto
	3,  // 36: xla.ComputationGraphStatsRequest.debug_options:type_name -> xla.DebugOptions
	62, // 37: xla.ComputationStatsResponse.stats:type_name -> xla.ComputationStats
	63, // 38: xla.CreateChannelHandleRequest.channel_type:type_name -> xla.ChannelHandle.ChannelType
	64, // 39: xla.CreateChannelHandleResponse.channel:type_name -> xla.ChannelHandle
	60, // 40: xla.UnregisterRequest.data:type_name -> xla.GlobalDataHandle
	59, // 41: xla.CompileRequest.computation:type_name -> xla.HloModuleProto
	5,  // 42: xla.CompileRequest.execution_options:type_name -> xla.ExecutionOptions
	54, // 43: xla.CompileRequest.input_shape_with_layout:type_name -> xla.ShapeProto
	65, // 44: xla.CompileResponse.handle:type_name -> xla.ExecutionHandle
	65, // 45: xla.ExecuteRequest.handle:type_name -> xla.ExecutionHandle
	60, // 46: xla.ExecuteRequest.arguments:type_name -> xla.GlobalDataHandle
	59, // 47: xla.ExecuteGraphRequest.computation:type_name -> xla.HloModuleProto
	60, // 48: xla.ExecuteGraphRequest.arguments:type_name -> xla.GlobalDataHandle
	5,  // 49: xla.ExecuteGraphRequest.execution_options:type_name -> xla.ExecutionOptions
	29, // 50: xla.ExecuteGraphParallelRequest.requests:type_name -> xla.ExecuteGraphRequest
	60, // 51: xla.ExecuteResponse.output:type_name -> xla.GlobalDataHandle
	66, // 52: xla.ExecuteResponse.profile:type_name -> xla.ExecutionProfile
	31, // 53: xla.ExecuteParallelResponse.responses:type_name -> xla.ExecuteResponse
	65, // 54: xla.WaitForExecutionRequest.execution:type_name -> xla.ExecutionHandle
	60, // 55: xla.WaitForExecutionResponse.output:type_name -> xla.GlobalDataHandle
	66, // 56: xla.WaitForExecutionResponse.profile:type_name -> xla.ExecutionProfile
	59, // 57: xla.ComputeConstantGraphRequest.computation:type_name -> xla.HloModuleProto
	67, // 58: xla.ComputeConstantGraphRequest.output_layout:type_name -> xla.LayoutProto
	61, // 59: xla.ComputeConstantResponse.literal:type_name -> xla.LiteralProto
	60, // 60: xla.DeconstructTupleRequest.tuple_handle:type_name -> xla.GlobalDataHandle
	60, // 61: xla.DeconstructTupleResponse.element_handles:type_name -> xla.GlobalDataHandle
	54, // 62: xla.LoadDataRequest.element_shape:type_name -> xla.ShapeProto
	60, // 63: xla.LoadDataResponse.data:type_name -> xla.GlobalDataHandle
	54, // 64: xla.LoadDataResponse.data_shape:type_name -> xla.ShapeProto
	60, // 65: xla.GetShapeRequest.data:type_name -> xla.GlobalDataHandle
	54, // 66: xla.GetShapeResponse.shape:type_name -> xla.ShapeProto
	60, // 67: xla.UnpackRequest.data:type_name -> xla.GlobalDataHandle
	60, // 68: xla.UnpackResponse.tied_data:type_name -> xla.GlobalDataHandle
	53, // 69: xla.ScheduleProto.instructions:type_name -> xla.ScheduleProto.Instruction
	48, // 70: xla.HloModuleConfigProto.Int64ListList.lists:type_name -> xla.HloModuleConfigProto.Int64List
	48, // 71: xla.HloModuleConfigProto.DotConfigEntry.value:type_name -> xla.HloModuleConfigProto.Int64List
	72, // [72:72] is the sub-list for method output_type
	72, // [72:72] is the sub-list for method input_type
	72, // [72:72] is the sub-list for extension type_name
	72, // [72:72] is the sub-list for extension extendee
	0,  // [0:72] is the sub-list for field type_name
}

func init() { file_tensorflow_compiler_xla_xla_proto_init() }
func file_tensorflow_compiler_xla_xla_proto_init() {
	if File_tensorflow_compiler_xla_xla_proto != nil {
		return
	}
	file_tensorflow_compiler_xla_xla_data_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_tensorflow_compiler_xla_xla_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DebugOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_xla_xla_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShardableValueUpdatePairProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_xla_xla_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_xla_xla_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HloModuleConfigProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_xla_xla_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HloModuleProtoWithConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_xla_xla_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceHandlesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_xla_xla_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceHandlesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_xla_xla_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferToClientRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_xla_xla_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferToClientResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_xla_xla_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferToServerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_xla_xla_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferToServerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_xla_xla_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferToInfeedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_xla_xla_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferToInfeedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_xla_xla_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferFromOutfeedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_xla_xla_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferFromOutfeedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_xla_xla_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_xla_xla_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetDeviceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_xla_xla_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComputationGraphStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_xla_xla_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComputationStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_xla_xla_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateChannelHandleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_xla_xla_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateChannelHandleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_xla_xla_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnregisterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_xla_xla_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnregisterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_xla_xla_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_xla_xla_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_xla_xla_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_xla_xla_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteGraphRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_xla_xla_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteGraphParallelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_xla_xla_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_xla_xla_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteParallelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_xla_xla_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaitForExecutionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_xla_xla_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaitForExecutionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_xla_xla_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComputeConstantGraphRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_xla_xla_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComputeConstantResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_xla_xla_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeconstructTupleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_xla_xla_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeconstructTupleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_xla_xla_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_xla_xla_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_xla_xla_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShapeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_xla_xla_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShapeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_xla_xla_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnpackRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_xla_xla_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnpackResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_xla_xla_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_xla_xla_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HloModuleConfigProto_BoolList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_xla_xla_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HloModuleConfigProto_Int64List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_xla_xla_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HloModuleConfigProto_Int64ListList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_xla_xla_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleProto_Instruction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tensorflow_compiler_xla_xla_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   51,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tensorflow_compiler_xla_xla_proto_goTypes,
		DependencyIndexes: file_tensorflow_compiler_xla_xla_proto_depIdxs,
		EnumInfos:         file_tensorflow_compiler_xla_xla_proto_enumTypes,
		MessageInfos:      file_tensorflow_compiler_xla_xla_proto_msgTypes,
	}.Build()
	File_tensorflow_compiler_xla_xla_proto = out.File
	file_tensorflow_compiler_xla_xla_proto_rawDesc = nil
	file_tensorflow_compiler_xla_xla_proto_goTypes = nil
	file_tensorflow_compiler_xla_xla_proto_depIdxs = nil
}
