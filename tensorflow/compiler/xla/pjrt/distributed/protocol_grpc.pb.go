// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: tensorflow/compiler/xla/pjrt/distributed/protocol.proto

package distributed

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DistributedRuntimeServiceClient is the client API for DistributedRuntimeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DistributedRuntimeServiceClient interface {
	// Connects a node to the distributed coordinator node. Blocks until all tasks
	// have connected. The service receives the number of nodes to expect as an
	// option passed to its constructor.
	Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*ConnectResponse, error)
	// Blocking enumeration of devices, used by the GPU backend only.
	// In parallel, all clients call EnumerateDevices() with their local device
	// topology, and receive back a global topology in response.
	EnumerateDevices(ctx context.Context, in *EnumerateDevicesRequest, opts ...grpc.CallOption) (*EnumerateDevicesResponse, error)
	// Health-checking RPC. Workers send heartbeats to the coordinator at regular
	// intervals. If the worker does not hear from the coordinator or the
	// coordinator does not hear from the tasks, the tasks abort.
	Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error)
	// Shutdown RPC. Workers send this RPC when they are ready to shut down; the
	// RPC blocks until all tasks have indicated they are ready to shut down,
	// or a timeout is reached.
	Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*ShutdownResponse, error)
	// Looks up a key in the key-value service. Blocks until the key is present
	// or until `timeout` expires.
	KeyValueGet(ctx context.Context, in *KeyValueGetRequest, opts ...grpc.CallOption) (*KeyValueGetResponse, error)
	// Updates the value associated with a key.
	KeyValueSet(ctx context.Context, in *KeyValueSetRequest, opts ...grpc.CallOption) (*KeyValueSetResponse, error)
	// Blocks until all nodes are at the barrier or the barrier times out.
	WaitAtBarrier(ctx context.Context, in *WaitAtBarrierRequest, opts ...grpc.CallOption) (*WaitAtBarrierResponse, error)
}

type distributedRuntimeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDistributedRuntimeServiceClient(cc grpc.ClientConnInterface) DistributedRuntimeServiceClient {
	return &distributedRuntimeServiceClient{cc}
}

func (c *distributedRuntimeServiceClient) Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*ConnectResponse, error) {
	out := new(ConnectResponse)
	err := c.cc.Invoke(ctx, "/xla.DistributedRuntimeService/Connect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributedRuntimeServiceClient) EnumerateDevices(ctx context.Context, in *EnumerateDevicesRequest, opts ...grpc.CallOption) (*EnumerateDevicesResponse, error) {
	out := new(EnumerateDevicesResponse)
	err := c.cc.Invoke(ctx, "/xla.DistributedRuntimeService/EnumerateDevices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributedRuntimeServiceClient) Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error) {
	out := new(HeartbeatResponse)
	err := c.cc.Invoke(ctx, "/xla.DistributedRuntimeService/Heartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributedRuntimeServiceClient) Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*ShutdownResponse, error) {
	out := new(ShutdownResponse)
	err := c.cc.Invoke(ctx, "/xla.DistributedRuntimeService/Shutdown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributedRuntimeServiceClient) KeyValueGet(ctx context.Context, in *KeyValueGetRequest, opts ...grpc.CallOption) (*KeyValueGetResponse, error) {
	out := new(KeyValueGetResponse)
	err := c.cc.Invoke(ctx, "/xla.DistributedRuntimeService/KeyValueGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributedRuntimeServiceClient) KeyValueSet(ctx context.Context, in *KeyValueSetRequest, opts ...grpc.CallOption) (*KeyValueSetResponse, error) {
	out := new(KeyValueSetResponse)
	err := c.cc.Invoke(ctx, "/xla.DistributedRuntimeService/KeyValueSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributedRuntimeServiceClient) WaitAtBarrier(ctx context.Context, in *WaitAtBarrierRequest, opts ...grpc.CallOption) (*WaitAtBarrierResponse, error) {
	out := new(WaitAtBarrierResponse)
	err := c.cc.Invoke(ctx, "/xla.DistributedRuntimeService/WaitAtBarrier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DistributedRuntimeServiceServer is the server API for DistributedRuntimeService service.
// All implementations must embed UnimplementedDistributedRuntimeServiceServer
// for forward compatibility
type DistributedRuntimeServiceServer interface {
	// Connects a node to the distributed coordinator node. Blocks until all tasks
	// have connected. The service receives the number of nodes to expect as an
	// option passed to its constructor.
	Connect(context.Context, *ConnectRequest) (*ConnectResponse, error)
	// Blocking enumeration of devices, used by the GPU backend only.
	// In parallel, all clients call EnumerateDevices() with their local device
	// topology, and receive back a global topology in response.
	EnumerateDevices(context.Context, *EnumerateDevicesRequest) (*EnumerateDevicesResponse, error)
	// Health-checking RPC. Workers send heartbeats to the coordinator at regular
	// intervals. If the worker does not hear from the coordinator or the
	// coordinator does not hear from the tasks, the tasks abort.
	Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error)
	// Shutdown RPC. Workers send this RPC when they are ready to shut down; the
	// RPC blocks until all tasks have indicated they are ready to shut down,
	// or a timeout is reached.
	Shutdown(context.Context, *ShutdownRequest) (*ShutdownResponse, error)
	// Looks up a key in the key-value service. Blocks until the key is present
	// or until `timeout` expires.
	KeyValueGet(context.Context, *KeyValueGetRequest) (*KeyValueGetResponse, error)
	// Updates the value associated with a key.
	KeyValueSet(context.Context, *KeyValueSetRequest) (*KeyValueSetResponse, error)
	// Blocks until all nodes are at the barrier or the barrier times out.
	WaitAtBarrier(context.Context, *WaitAtBarrierRequest) (*WaitAtBarrierResponse, error)
	mustEmbedUnimplementedDistributedRuntimeServiceServer()
}

// UnimplementedDistributedRuntimeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDistributedRuntimeServiceServer struct {
}

func (UnimplementedDistributedRuntimeServiceServer) Connect(context.Context, *ConnectRequest) (*ConnectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedDistributedRuntimeServiceServer) EnumerateDevices(context.Context, *EnumerateDevicesRequest) (*EnumerateDevicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnumerateDevices not implemented")
}
func (UnimplementedDistributedRuntimeServiceServer) Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedDistributedRuntimeServiceServer) Shutdown(context.Context, *ShutdownRequest) (*ShutdownResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shutdown not implemented")
}
func (UnimplementedDistributedRuntimeServiceServer) KeyValueGet(context.Context, *KeyValueGetRequest) (*KeyValueGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KeyValueGet not implemented")
}
func (UnimplementedDistributedRuntimeServiceServer) KeyValueSet(context.Context, *KeyValueSetRequest) (*KeyValueSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KeyValueSet not implemented")
}
func (UnimplementedDistributedRuntimeServiceServer) WaitAtBarrier(context.Context, *WaitAtBarrierRequest) (*WaitAtBarrierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WaitAtBarrier not implemented")
}
func (UnimplementedDistributedRuntimeServiceServer) mustEmbedUnimplementedDistributedRuntimeServiceServer() {
}

// UnsafeDistributedRuntimeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DistributedRuntimeServiceServer will
// result in compilation errors.
type UnsafeDistributedRuntimeServiceServer interface {
	mustEmbedUnimplementedDistributedRuntimeServiceServer()
}

func RegisterDistributedRuntimeServiceServer(s grpc.ServiceRegistrar, srv DistributedRuntimeServiceServer) {
	s.RegisterService(&DistributedRuntimeService_ServiceDesc, srv)
}

func _DistributedRuntimeService_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributedRuntimeServiceServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xla.DistributedRuntimeService/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributedRuntimeServiceServer).Connect(ctx, req.(*ConnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistributedRuntimeService_EnumerateDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnumerateDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributedRuntimeServiceServer).EnumerateDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xla.DistributedRuntimeService/EnumerateDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributedRuntimeServiceServer).EnumerateDevices(ctx, req.(*EnumerateDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistributedRuntimeService_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributedRuntimeServiceServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xla.DistributedRuntimeService/Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributedRuntimeServiceServer).Heartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistributedRuntimeService_Shutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShutdownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributedRuntimeServiceServer).Shutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xla.DistributedRuntimeService/Shutdown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributedRuntimeServiceServer).Shutdown(ctx, req.(*ShutdownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistributedRuntimeService_KeyValueGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyValueGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributedRuntimeServiceServer).KeyValueGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xla.DistributedRuntimeService/KeyValueGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributedRuntimeServiceServer).KeyValueGet(ctx, req.(*KeyValueGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistributedRuntimeService_KeyValueSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyValueSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributedRuntimeServiceServer).KeyValueSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xla.DistributedRuntimeService/KeyValueSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributedRuntimeServiceServer).KeyValueSet(ctx, req.(*KeyValueSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistributedRuntimeService_WaitAtBarrier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WaitAtBarrierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributedRuntimeServiceServer).WaitAtBarrier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/xla.DistributedRuntimeService/WaitAtBarrier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributedRuntimeServiceServer).WaitAtBarrier(ctx, req.(*WaitAtBarrierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DistributedRuntimeService_ServiceDesc is the grpc.ServiceDesc for DistributedRuntimeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DistributedRuntimeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "xla.DistributedRuntimeService",
	HandlerType: (*DistributedRuntimeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Connect",
			Handler:    _DistributedRuntimeService_Connect_Handler,
		},
		{
			MethodName: "EnumerateDevices",
			Handler:    _DistributedRuntimeService_EnumerateDevices_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _DistributedRuntimeService_Heartbeat_Handler,
		},
		{
			MethodName: "Shutdown",
			Handler:    _DistributedRuntimeService_Shutdown_Handler,
		},
		{
			MethodName: "KeyValueGet",
			Handler:    _DistributedRuntimeService_KeyValueGet_Handler,
		},
		{
			MethodName: "KeyValueSet",
			Handler:    _DistributedRuntimeService_KeyValueSet_Handler,
		},
		{
			MethodName: "WaitAtBarrier",
			Handler:    _DistributedRuntimeService_WaitAtBarrier_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tensorflow/compiler/xla/pjrt/distributed/protocol.proto",
}
