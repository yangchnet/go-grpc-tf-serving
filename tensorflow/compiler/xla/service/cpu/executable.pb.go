// Copyright 2022 The TensorFlow Authors. All Rights Reserved.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//==============================================================================

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: tensorflow/compiler/xla/service/cpu/executable.proto

package cpu

import (
	service "github.com/yangchnet/tf-serving/tensorflow/compiler/xla/service"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type XlaRuntimeCpuExecutableProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	XlaRuntimeExecutable *service.XlaRuntimeExecutableProto `protobuf:"bytes,1,opt,name=xla_runtime_executable,json=xlaRuntimeExecutable" json:"xla_runtime_executable,omitempty"`
	XlaFrameworkMapping  *XlaFrameworkMappingProto          `protobuf:"bytes,2,opt,name=xla_framework_mapping,json=xlaFrameworkMapping" json:"xla_framework_mapping,omitempty"`
}

func (x *XlaRuntimeCpuExecutableProto) Reset() {
	*x = XlaRuntimeCpuExecutableProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_xla_service_cpu_executable_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XlaRuntimeCpuExecutableProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XlaRuntimeCpuExecutableProto) ProtoMessage() {}

func (x *XlaRuntimeCpuExecutableProto) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_xla_service_cpu_executable_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XlaRuntimeCpuExecutableProto.ProtoReflect.Descriptor instead.
func (*XlaRuntimeCpuExecutableProto) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_xla_service_cpu_executable_proto_rawDescGZIP(), []int{0}
}

func (x *XlaRuntimeCpuExecutableProto) GetXlaRuntimeExecutable() *service.XlaRuntimeExecutableProto {
	if x != nil {
		return x.XlaRuntimeExecutable
	}
	return nil
}

func (x *XlaRuntimeCpuExecutableProto) GetXlaFrameworkMapping() *XlaFrameworkMappingProto {
	if x != nil {
		return x.XlaFrameworkMapping
	}
	return nil
}

var File_tensorflow_compiler_xla_service_cpu_executable_proto protoreflect.FileDescriptor

var file_tensorflow_compiler_xla_service_cpu_executable_proto_rawDesc = []byte{
	0x0a, 0x34, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x6d,
	0x70, 0x69, 0x6c, 0x65, 0x72, 0x2f, 0x78, 0x6c, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x63, 0x70, 0x75, 0x2f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x78, 0x6c, 0x61, 0x2e, 0x63, 0x70, 0x75, 0x1a,
	0x37, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x6d, 0x70,
	0x69, 0x6c, 0x65, 0x72, 0x2f, 0x78, 0x6c, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2f, 0x63, 0x70, 0x75, 0x2f, 0x78, 0x6c, 0x61, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x2f, 0x78, 0x6c,
	0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x68, 0x6c, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xcb, 0x01, 0x0a, 0x1c, 0x58, 0x6c, 0x61, 0x52, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x43, 0x70, 0x75, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x54, 0x0a, 0x16, 0x78, 0x6c, 0x61, 0x5f, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x58, 0x6c, 0x61, 0x52, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14, 0x78, 0x6c, 0x61, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x55, 0x0a, 0x15, 0x78, 0x6c,
	0x61, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x78, 0x6c, 0x61, 0x2e,
	0x63, 0x70, 0x75, 0x2e, 0x58, 0x6c, 0x61, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x13, 0x78, 0x6c,
	0x61, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x42, 0xa1, 0x01, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x63, 0x70,
	0x75, 0x42, 0x0f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x48, 0x02, 0x50, 0x01, 0x5a, 0x42, 0x67, 0x69, 0x74, 0x65, 0x65, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x71, 0x63, 0x69, 0x69, 0x70, 0x2d, 0x69, 0x63, 0x70, 0x2f, 0x74, 0x66, 0x2d, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2f, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f,
	0x77, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x2f, 0x78, 0x6c, 0x61, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x63, 0x70, 0x75, 0xa2, 0x02, 0x03, 0x58, 0x43, 0x58,
	0xaa, 0x02, 0x07, 0x58, 0x6c, 0x61, 0x2e, 0x43, 0x70, 0x75, 0xca, 0x02, 0x07, 0x58, 0x6c, 0x61,
	0x5c, 0x43, 0x70, 0x75, 0xe2, 0x02, 0x13, 0x58, 0x6c, 0x61, 0x5c, 0x43, 0x70, 0x75, 0x5c, 0x47,
	0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x08, 0x58, 0x6c, 0x61,
	0x3a, 0x3a, 0x43, 0x70, 0x75,
}

var (
	file_tensorflow_compiler_xla_service_cpu_executable_proto_rawDescOnce sync.Once
	file_tensorflow_compiler_xla_service_cpu_executable_proto_rawDescData = file_tensorflow_compiler_xla_service_cpu_executable_proto_rawDesc
)

func file_tensorflow_compiler_xla_service_cpu_executable_proto_rawDescGZIP() []byte {
	file_tensorflow_compiler_xla_service_cpu_executable_proto_rawDescOnce.Do(func() {
		file_tensorflow_compiler_xla_service_cpu_executable_proto_rawDescData = protoimpl.X.CompressGZIP(file_tensorflow_compiler_xla_service_cpu_executable_proto_rawDescData)
	})
	return file_tensorflow_compiler_xla_service_cpu_executable_proto_rawDescData
}

var file_tensorflow_compiler_xla_service_cpu_executable_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_tensorflow_compiler_xla_service_cpu_executable_proto_goTypes = []interface{}{
	(*XlaRuntimeCpuExecutableProto)(nil),      // 0: xla.cpu.XlaRuntimeCpuExecutableProto
	(*service.XlaRuntimeExecutableProto)(nil), // 1: xla.XlaRuntimeExecutableProto
	(*XlaFrameworkMappingProto)(nil),          // 2: xla.cpu.XlaFrameworkMappingProto
}
var file_tensorflow_compiler_xla_service_cpu_executable_proto_depIdxs = []int32{
	1, // 0: xla.cpu.XlaRuntimeCpuExecutableProto.xla_runtime_executable:type_name -> xla.XlaRuntimeExecutableProto
	2, // 1: xla.cpu.XlaRuntimeCpuExecutableProto.xla_framework_mapping:type_name -> xla.cpu.XlaFrameworkMappingProto
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_tensorflow_compiler_xla_service_cpu_executable_proto_init() }
func file_tensorflow_compiler_xla_service_cpu_executable_proto_init() {
	if File_tensorflow_compiler_xla_service_cpu_executable_proto != nil {
		return
	}
	file_tensorflow_compiler_xla_service_cpu_xla_framework_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_tensorflow_compiler_xla_service_cpu_executable_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XlaRuntimeCpuExecutableProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tensorflow_compiler_xla_service_cpu_executable_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tensorflow_compiler_xla_service_cpu_executable_proto_goTypes,
		DependencyIndexes: file_tensorflow_compiler_xla_service_cpu_executable_proto_depIdxs,
		MessageInfos:      file_tensorflow_compiler_xla_service_cpu_executable_proto_msgTypes,
	}.Build()
	File_tensorflow_compiler_xla_service_cpu_executable_proto = out.File
	file_tensorflow_compiler_xla_service_cpu_executable_proto_rawDesc = nil
	file_tensorflow_compiler_xla_service_cpu_executable_proto_goTypes = nil
	file_tensorflow_compiler_xla_service_cpu_executable_proto_depIdxs = nil
}
