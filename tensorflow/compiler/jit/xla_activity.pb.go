// Copyright 2019 The TensorFlow Authors. All Rights Reserved.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//==============================================================================

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: tensorflow/compiler/jit/xla_activity.proto

package jit

import (
	protobuf "github.com/yangchnet/tf-serving/tensorflow/core/protobuf"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Next ID: 6
type XlaOptimizationRemark_Warning int32

const (
	XlaOptimizationRemark_NONE                         XlaOptimizationRemark_Warning = 0
	XlaOptimizationRemark_INACCURATE_OPERATION         XlaOptimizationRemark_Warning = 1
	XlaOptimizationRemark_SLOW_OPERATION               XlaOptimizationRemark_Warning = 2
	XlaOptimizationRemark_UNIMPLEMENTED_OPERATION      XlaOptimizationRemark_Warning = 3
	XlaOptimizationRemark_SLOW_IMAGE_RESIZE_DIMENSIONS XlaOptimizationRemark_Warning = 4
	XlaOptimizationRemark_MEGAMORPHIC_FUNCTION         XlaOptimizationRemark_Warning = 5
)

// Enum value maps for XlaOptimizationRemark_Warning.
var (
	XlaOptimizationRemark_Warning_name = map[int32]string{
		0: "NONE",
		1: "INACCURATE_OPERATION",
		2: "SLOW_OPERATION",
		3: "UNIMPLEMENTED_OPERATION",
		4: "SLOW_IMAGE_RESIZE_DIMENSIONS",
		5: "MEGAMORPHIC_FUNCTION",
	}
	XlaOptimizationRemark_Warning_value = map[string]int32{
		"NONE":                         0,
		"INACCURATE_OPERATION":         1,
		"SLOW_OPERATION":               2,
		"UNIMPLEMENTED_OPERATION":      3,
		"SLOW_IMAGE_RESIZE_DIMENSIONS": 4,
		"MEGAMORPHIC_FUNCTION":         5,
	}
)

func (x XlaOptimizationRemark_Warning) Enum() *XlaOptimizationRemark_Warning {
	p := new(XlaOptimizationRemark_Warning)
	*p = x
	return p
}

func (x XlaOptimizationRemark_Warning) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (XlaOptimizationRemark_Warning) Descriptor() protoreflect.EnumDescriptor {
	return file_tensorflow_compiler_jit_xla_activity_proto_enumTypes[0].Descriptor()
}

func (XlaOptimizationRemark_Warning) Type() protoreflect.EnumType {
	return &file_tensorflow_compiler_jit_xla_activity_proto_enumTypes[0]
}

func (x XlaOptimizationRemark_Warning) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use XlaOptimizationRemark_Warning.Descriptor instead.
func (XlaOptimizationRemark_Warning) EnumDescriptor() ([]byte, []int) {
	return file_tensorflow_compiler_jit_xla_activity_proto_rawDescGZIP(), []int{3, 0}
}

// Summarizes the results of auto-clustering a TensorFlow graph.
//
// Next ID: 5
type XlaAutoClusteringSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of nodes in the graph that are not inside an XLA cluster.
	UnclusteredNodeCount int32 `protobuf:"varint,1,opt,name=unclustered_node_count,json=unclusteredNodeCount,proto3" json:"unclustered_node_count,omitempty"`
	// The number of nodes in the graph that are in an XLA cluster.
	ClusteredNodeCount int32 `protobuf:"varint,2,opt,name=clustered_node_count,json=clusteredNodeCount,proto3" json:"clustered_node_count,omitempty"`
	// All of the XLA clusters in the TF graph.
	Clusters []*XlaAutoClusteringSummary_Cluster `protobuf:"bytes,3,rep,name=clusters,proto3" json:"clusters,omitempty"`
	// A histogram of the TF operations that were not clustered.
	UnclusteredOpHistogram []*XlaAutoClusteringSummary_OpAndCount `protobuf:"bytes,4,rep,name=unclustered_op_histogram,json=unclusteredOpHistogram,proto3" json:"unclustered_op_histogram,omitempty"`
}

func (x *XlaAutoClusteringSummary) Reset() {
	*x = XlaAutoClusteringSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_jit_xla_activity_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XlaAutoClusteringSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XlaAutoClusteringSummary) ProtoMessage() {}

func (x *XlaAutoClusteringSummary) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_jit_xla_activity_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XlaAutoClusteringSummary.ProtoReflect.Descriptor instead.
func (*XlaAutoClusteringSummary) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_jit_xla_activity_proto_rawDescGZIP(), []int{0}
}

func (x *XlaAutoClusteringSummary) GetUnclusteredNodeCount() int32 {
	if x != nil {
		return x.UnclusteredNodeCount
	}
	return 0
}

func (x *XlaAutoClusteringSummary) GetClusteredNodeCount() int32 {
	if x != nil {
		return x.ClusteredNodeCount
	}
	return 0
}

func (x *XlaAutoClusteringSummary) GetClusters() []*XlaAutoClusteringSummary_Cluster {
	if x != nil {
		return x.Clusters
	}
	return nil
}

func (x *XlaAutoClusteringSummary) GetUnclusteredOpHistogram() []*XlaAutoClusteringSummary_OpAndCount {
	if x != nil {
		return x.UnclusteredOpHistogram
	}
	return nil
}

// Listeners listening for auto clustering events get messages of this type.
//
// Next ID: 4
type XlaAutoClusteringActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The value of GlobalJitLevel, as determined by `GetGlobalJitLevelForGraph`.
	// This determines if global auto-clustering is enabled.
	GlobalJitLevel protobuf.OptimizerOptions_GlobalJitLevel `protobuf:"varint,1,opt,name=global_jit_level,json=globalJitLevel,proto3,enum=tensorflow.OptimizerOptions_GlobalJitLevel" json:"global_jit_level,omitempty"`
	// Whether --tf_xla_cpu_global_jit is enabled in TF_XLA_FLAGS.
	CpuGlobalJitEnabled bool                      `protobuf:"varint,2,opt,name=cpu_global_jit_enabled,json=cpuGlobalJitEnabled,proto3" json:"cpu_global_jit_enabled,omitempty"`
	Summary             *XlaAutoClusteringSummary `protobuf:"bytes,3,opt,name=summary,proto3" json:"summary,omitempty"`
}

func (x *XlaAutoClusteringActivity) Reset() {
	*x = XlaAutoClusteringActivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_jit_xla_activity_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XlaAutoClusteringActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XlaAutoClusteringActivity) ProtoMessage() {}

func (x *XlaAutoClusteringActivity) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_jit_xla_activity_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XlaAutoClusteringActivity.ProtoReflect.Descriptor instead.
func (*XlaAutoClusteringActivity) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_jit_xla_activity_proto_rawDescGZIP(), []int{1}
}

func (x *XlaAutoClusteringActivity) GetGlobalJitLevel() protobuf.OptimizerOptions_GlobalJitLevel {
	if x != nil {
		return x.GlobalJitLevel
	}
	return protobuf.OptimizerOptions_GlobalJitLevel(0)
}

func (x *XlaAutoClusteringActivity) GetCpuGlobalJitEnabled() bool {
	if x != nil {
		return x.CpuGlobalJitEnabled
	}
	return false
}

func (x *XlaAutoClusteringActivity) GetSummary() *XlaAutoClusteringSummary {
	if x != nil {
		return x.Summary
	}
	return nil
}

// Listeners listening for JIT compilation events get messages of this type.
// Each instance of XlaJitCompilationActivity corresponds to a single
// compilation of a single XLA cluster.  E.g. if a graph has two clusters, A and
// B, and A is compiled 5 times and B is compiled 2 times then we will generate
// 7 instances of XlaJitCompilationActivity.
//
// Next ID: 6
type XlaJitCompilationActivity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterName string `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	// The number of time this cluster has been compiled.
	CompileCount int32 `protobuf:"varint,2,opt,name=compile_count,json=compileCount,proto3" json:"compile_count,omitempty"`
	// Microseconds spent in the individual compilation being reported.
	CompileTimeUs int64 `protobuf:"varint,3,opt,name=compile_time_us,json=compileTimeUs,proto3" json:"compile_time_us,omitempty"`
	// Total microseconds spent in (re-)compiling this cluster so far.
	CumulativeCompileTimeUs int64 `protobuf:"varint,4,opt,name=cumulative_compile_time_us,json=cumulativeCompileTimeUs,proto3" json:"cumulative_compile_time_us,omitempty"`
	// Whether a persistent compilation cache entry was used.
	UsedPersistentCache bool `protobuf:"varint,5,opt,name=used_persistent_cache,json=usedPersistentCache,proto3" json:"used_persistent_cache,omitempty"`
}

func (x *XlaJitCompilationActivity) Reset() {
	*x = XlaJitCompilationActivity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_jit_xla_activity_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XlaJitCompilationActivity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XlaJitCompilationActivity) ProtoMessage() {}

func (x *XlaJitCompilationActivity) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_jit_xla_activity_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XlaJitCompilationActivity.ProtoReflect.Descriptor instead.
func (*XlaJitCompilationActivity) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_jit_xla_activity_proto_rawDescGZIP(), []int{2}
}

func (x *XlaJitCompilationActivity) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *XlaJitCompilationActivity) GetCompileCount() int32 {
	if x != nil {
		return x.CompileCount
	}
	return 0
}

func (x *XlaJitCompilationActivity) GetCompileTimeUs() int64 {
	if x != nil {
		return x.CompileTimeUs
	}
	return 0
}

func (x *XlaJitCompilationActivity) GetCumulativeCompileTimeUs() int64 {
	if x != nil {
		return x.CumulativeCompileTimeUs
	}
	return 0
}

func (x *XlaJitCompilationActivity) GetUsedPersistentCache() bool {
	if x != nil {
		return x.UsedPersistentCache
	}
	return false
}

// LINT.IfChange
//
// Used for logging situations seen in Tensorflow models being optimized that
// are known to not perform well with XLA.
//
// Next ID: 3
type XlaOptimizationRemark struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Warning XlaOptimizationRemark_Warning `protobuf:"varint,1,opt,name=warning,proto3,enum=tensorflow.XlaOptimizationRemark_Warning" json:"warning,omitempty"`
	// Information such as which node was the problem.
	DebugInformation string `protobuf:"bytes,2,opt,name=debug_information,json=debugInformation,proto3" json:"debug_information,omitempty"`
}

func (x *XlaOptimizationRemark) Reset() {
	*x = XlaOptimizationRemark{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_jit_xla_activity_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XlaOptimizationRemark) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XlaOptimizationRemark) ProtoMessage() {}

func (x *XlaOptimizationRemark) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_jit_xla_activity_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XlaOptimizationRemark.ProtoReflect.Descriptor instead.
func (*XlaOptimizationRemark) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_jit_xla_activity_proto_rawDescGZIP(), []int{3}
}

func (x *XlaOptimizationRemark) GetWarning() XlaOptimizationRemark_Warning {
	if x != nil {
		return x.Warning
	}
	return XlaOptimizationRemark_NONE
}

func (x *XlaOptimizationRemark) GetDebugInformation() string {
	if x != nil {
		return x.DebugInformation
	}
	return ""
}

// Represents a single element in a histogram of ops ("op" as in "TensorFlow
// operation").
//
// Next ID: 3
type XlaAutoClusteringSummary_OpAndCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The TensorFlow operation (like MatMult, Add etc.)
	Op string `protobuf:"bytes,1,opt,name=op,proto3" json:"op,omitempty"`
	// The number of times this occurs.
	Count int32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *XlaAutoClusteringSummary_OpAndCount) Reset() {
	*x = XlaAutoClusteringSummary_OpAndCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_jit_xla_activity_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XlaAutoClusteringSummary_OpAndCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XlaAutoClusteringSummary_OpAndCount) ProtoMessage() {}

func (x *XlaAutoClusteringSummary_OpAndCount) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_jit_xla_activity_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XlaAutoClusteringSummary_OpAndCount.ProtoReflect.Descriptor instead.
func (*XlaAutoClusteringSummary_OpAndCount) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_jit_xla_activity_proto_rawDescGZIP(), []int{0, 0}
}

func (x *XlaAutoClusteringSummary_OpAndCount) GetOp() string {
	if x != nil {
		return x.Op
	}
	return ""
}

func (x *XlaAutoClusteringSummary_OpAndCount) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

// Describes a single XLA cluster.
//
// Next ID: 4
type XlaAutoClusteringSummary_Cluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The number of nodes in the cluster.
	Size int32 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	// A histogram of the TF operations in this cluster.
	OpHistogram []*XlaAutoClusteringSummary_OpAndCount `protobuf:"bytes,3,rep,name=op_histogram,json=opHistogram,proto3" json:"op_histogram,omitempty"`
}

func (x *XlaAutoClusteringSummary_Cluster) Reset() {
	*x = XlaAutoClusteringSummary_Cluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_jit_xla_activity_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XlaAutoClusteringSummary_Cluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XlaAutoClusteringSummary_Cluster) ProtoMessage() {}

func (x *XlaAutoClusteringSummary_Cluster) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_jit_xla_activity_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XlaAutoClusteringSummary_Cluster.ProtoReflect.Descriptor instead.
func (*XlaAutoClusteringSummary_Cluster) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_jit_xla_activity_proto_rawDescGZIP(), []int{0, 1}
}

func (x *XlaAutoClusteringSummary_Cluster) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *XlaAutoClusteringSummary_Cluster) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *XlaAutoClusteringSummary_Cluster) GetOpHistogram() []*XlaAutoClusteringSummary_OpAndCount {
	if x != nil {
		return x.OpHistogram
	}
	return nil
}

var File_tensorflow_compiler_jit_xla_activity_proto protoreflect.FileDescriptor

var file_tensorflow_compiler_jit_xla_activity_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x6d,
	0x70, 0x69, 0x6c, 0x65, 0x72, 0x2f, 0x6a, 0x69, 0x74, 0x2f, 0x78, 0x6c, 0x61, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x74, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x1a, 0x25, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xf3, 0x03, 0x0a, 0x18, 0x58, 0x6c, 0x61, 0x41, 0x75, 0x74, 0x6f, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x34, 0x0a, 0x16,
	0x75, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x75, 0x6e,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x12, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x48, 0x0a, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x58, 0x6c, 0x61, 0x41, 0x75, 0x74, 0x6f, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x08, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x69,
	0x0a, 0x18, 0x75, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x6f, 0x70,
	0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x58, 0x6c,
	0x61, 0x41, 0x75, 0x74, 0x6f, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x4f, 0x70, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x16, 0x75, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4f, 0x70,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x1a, 0x32, 0x0a, 0x0a, 0x4f, 0x70, 0x41,
	0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x85, 0x01,
	0x0a, 0x07, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x12, 0x52, 0x0a, 0x0c, 0x6f, 0x70, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61,
	0x6d, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x58, 0x6c, 0x61, 0x41, 0x75, 0x74, 0x6f, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x2e, 0x4f, 0x70,
	0x41, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0b, 0x6f, 0x70, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x22, 0xe7, 0x01, 0x0a, 0x19, 0x58, 0x6c, 0x61, 0x41, 0x75, 0x74,
	0x6f, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x12, 0x55, 0x0a, 0x10, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x6a, 0x69,
	0x74, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e,
	0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6d,
	0x69, 0x7a, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x4a, 0x69, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x0e, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x4a, 0x69, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x33, 0x0a, 0x16, 0x63, 0x70,
	0x75, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x6a, 0x69, 0x74, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x63, 0x70, 0x75, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4a, 0x69, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x3e, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x58, 0x6c,
	0x61, 0x41, 0x75, 0x74, 0x6f, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22,
	0xfc, 0x01, 0x0a, 0x19, 0x58, 0x6c, 0x61, 0x4a, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x73, 0x12, 0x3b, 0x0a,
	0x1a, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x69, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x17, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6d,
	0x70, 0x69, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x75, 0x73,
	0x65, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x75, 0x73, 0x65, 0x64, 0x50,
	0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x63, 0x68, 0x65, 0x22, 0xa6,
	0x02, 0x0a, 0x15, 0x58, 0x6c, 0x61, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x43, 0x0a, 0x07, 0x77, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x74, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x58, 0x6c, 0x61, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x57, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x2b, 0x0a,
	0x11, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x65, 0x62, 0x75, 0x67, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9a, 0x01, 0x0a, 0x07, 0x57,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00,
	0x12, 0x18, 0x0a, 0x14, 0x49, 0x4e, 0x41, 0x43, 0x43, 0x55, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x4c,
	0x4f, 0x57, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x1b,
	0x0a, 0x17, 0x55, 0x4e, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x45, 0x44, 0x5f,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x53,
	0x4c, 0x4f, 0x57, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x49, 0x5a, 0x45,
	0x5f, 0x44, 0x49, 0x4d, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x53, 0x10, 0x04, 0x12, 0x18, 0x0a,
	0x14, 0x4d, 0x45, 0x47, 0x41, 0x4d, 0x4f, 0x52, 0x50, 0x48, 0x49, 0x43, 0x5f, 0x46, 0x55, 0x4e,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x42, 0xa4, 0x01, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x2e,
	0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x42, 0x10, 0x58, 0x6c, 0x61, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x02, 0x50, 0x01,
	0x5a, 0x36, 0x67, 0x69, 0x74, 0x65, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x71, 0x63, 0x69, 0x69,
	0x70, 0x2d, 0x69, 0x63, 0x70, 0x2f, 0x74, 0x66, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67,
	0x2f, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x6d, 0x70,
	0x69, 0x6c, 0x65, 0x72, 0x2f, 0x6a, 0x69, 0x74, 0xa2, 0x02, 0x03, 0x54, 0x58, 0x58, 0xaa, 0x02,
	0x0a, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0xca, 0x02, 0x0a, 0x54, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0xe2, 0x02, 0x16, 0x54, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0xea, 0x02, 0x0a, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tensorflow_compiler_jit_xla_activity_proto_rawDescOnce sync.Once
	file_tensorflow_compiler_jit_xla_activity_proto_rawDescData = file_tensorflow_compiler_jit_xla_activity_proto_rawDesc
)

func file_tensorflow_compiler_jit_xla_activity_proto_rawDescGZIP() []byte {
	file_tensorflow_compiler_jit_xla_activity_proto_rawDescOnce.Do(func() {
		file_tensorflow_compiler_jit_xla_activity_proto_rawDescData = protoimpl.X.CompressGZIP(file_tensorflow_compiler_jit_xla_activity_proto_rawDescData)
	})
	return file_tensorflow_compiler_jit_xla_activity_proto_rawDescData
}

var file_tensorflow_compiler_jit_xla_activity_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_tensorflow_compiler_jit_xla_activity_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_tensorflow_compiler_jit_xla_activity_proto_goTypes = []interface{}{
	(XlaOptimizationRemark_Warning)(0),            // 0: tensorflow.XlaOptimizationRemark.Warning
	(*XlaAutoClusteringSummary)(nil),              // 1: tensorflow.XlaAutoClusteringSummary
	(*XlaAutoClusteringActivity)(nil),             // 2: tensorflow.XlaAutoClusteringActivity
	(*XlaJitCompilationActivity)(nil),             // 3: tensorflow.XlaJitCompilationActivity
	(*XlaOptimizationRemark)(nil),                 // 4: tensorflow.XlaOptimizationRemark
	(*XlaAutoClusteringSummary_OpAndCount)(nil),   // 5: tensorflow.XlaAutoClusteringSummary.OpAndCount
	(*XlaAutoClusteringSummary_Cluster)(nil),      // 6: tensorflow.XlaAutoClusteringSummary.Cluster
	(protobuf.OptimizerOptions_GlobalJitLevel)(0), // 7: tensorflow.OptimizerOptions.GlobalJitLevel
}
var file_tensorflow_compiler_jit_xla_activity_proto_depIdxs = []int32{
	6, // 0: tensorflow.XlaAutoClusteringSummary.clusters:type_name -> tensorflow.XlaAutoClusteringSummary.Cluster
	5, // 1: tensorflow.XlaAutoClusteringSummary.unclustered_op_histogram:type_name -> tensorflow.XlaAutoClusteringSummary.OpAndCount
	7, // 2: tensorflow.XlaAutoClusteringActivity.global_jit_level:type_name -> tensorflow.OptimizerOptions.GlobalJitLevel
	1, // 3: tensorflow.XlaAutoClusteringActivity.summary:type_name -> tensorflow.XlaAutoClusteringSummary
	0, // 4: tensorflow.XlaOptimizationRemark.warning:type_name -> tensorflow.XlaOptimizationRemark.Warning
	5, // 5: tensorflow.XlaAutoClusteringSummary.Cluster.op_histogram:type_name -> tensorflow.XlaAutoClusteringSummary.OpAndCount
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_tensorflow_compiler_jit_xla_activity_proto_init() }
func file_tensorflow_compiler_jit_xla_activity_proto_init() {
	if File_tensorflow_compiler_jit_xla_activity_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tensorflow_compiler_jit_xla_activity_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XlaAutoClusteringSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_jit_xla_activity_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XlaAutoClusteringActivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_jit_xla_activity_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XlaJitCompilationActivity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_jit_xla_activity_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XlaOptimizationRemark); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_jit_xla_activity_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XlaAutoClusteringSummary_OpAndCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_jit_xla_activity_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XlaAutoClusteringSummary_Cluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tensorflow_compiler_jit_xla_activity_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tensorflow_compiler_jit_xla_activity_proto_goTypes,
		DependencyIndexes: file_tensorflow_compiler_jit_xla_activity_proto_depIdxs,
		EnumInfos:         file_tensorflow_compiler_jit_xla_activity_proto_enumTypes,
		MessageInfos:      file_tensorflow_compiler_jit_xla_activity_proto_msgTypes,
	}.Build()
	File_tensorflow_compiler_jit_xla_activity_proto = out.File
	file_tensorflow_compiler_jit_xla_activity_proto_rawDesc = nil
	file_tensorflow_compiler_jit_xla_activity_proto_goTypes = nil
	file_tensorflow_compiler_jit_xla_activity_proto_depIdxs = nil
}
