// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: tensorflow/compiler/xrt/xrt.proto

package xrt

import (
	tf2xla "github.com/yangchnet/tf-serving/tensorflow/compiler/tf2xla"
	xla "github.com/yangchnet/tf-serving/tensorflow/compiler/xla"
	service "github.com/yangchnet/tf-serving/tensorflow/compiler/xla/service"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MetricValues_UnitOfMeasure int32

const (
	MetricValues_INVALID MetricValues_UnitOfMeasure = 0
	MetricValues_NUMBER  MetricValues_UnitOfMeasure = 1
	MetricValues_TIME    MetricValues_UnitOfMeasure = 2
	MetricValues_BYTES   MetricValues_UnitOfMeasure = 3
)

// Enum value maps for MetricValues_UnitOfMeasure.
var (
	MetricValues_UnitOfMeasure_name = map[int32]string{
		0: "INVALID",
		1: "NUMBER",
		2: "TIME",
		3: "BYTES",
	}
	MetricValues_UnitOfMeasure_value = map[string]int32{
		"INVALID": 0,
		"NUMBER":  1,
		"TIME":    2,
		"BYTES":   3,
	}
)

func (x MetricValues_UnitOfMeasure) Enum() *MetricValues_UnitOfMeasure {
	p := new(MetricValues_UnitOfMeasure)
	*p = x
	return p
}

func (x MetricValues_UnitOfMeasure) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MetricValues_UnitOfMeasure) Descriptor() protoreflect.EnumDescriptor {
	return file_tensorflow_compiler_xrt_xrt_proto_enumTypes[0].Descriptor()
}

func (MetricValues_UnitOfMeasure) Type() protoreflect.EnumType {
	return &file_tensorflow_compiler_xrt_xrt_proto_enumTypes[0]
}

func (x MetricValues_UnitOfMeasure) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MetricValues_UnitOfMeasure.Descriptor instead.
func (MetricValues_UnitOfMeasure) EnumDescriptor() ([]byte, []int) {
	return file_tensorflow_compiler_xrt_xrt_proto_rawDescGZIP(), []int{12, 0}
}

type DeviceAssignment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// As many ComputationDevice as many there are computations (number
	// of cores per replica).
	ComputationDevices []*DeviceAssignment_ComputationDevice `protobuf:"bytes,1,rep,name=computation_devices,json=computationDevices,proto3" json:"computation_devices,omitempty"`
}

func (x *DeviceAssignment) Reset() {
	*x = DeviceAssignment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_xrt_xrt_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceAssignment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceAssignment) ProtoMessage() {}

func (x *DeviceAssignment) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_xrt_xrt_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceAssignment.ProtoReflect.Descriptor instead.
func (*DeviceAssignment) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_xrt_xrt_proto_rawDescGZIP(), []int{0}
}

func (x *DeviceAssignment) GetComputationDevices() []*DeviceAssignment_ComputationDevice {
	if x != nil {
		return x.ComputationDevices
	}
	return nil
}

// Options for an XLA compilation.
type XLAComputationConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The number of replicas the computation will be run on. If this is
	// default (0) it is interpreted as 1.
	NumReplicas int32 `protobuf:"varint,1,opt,name=num_replicas,json=numReplicas,proto3" json:"num_replicas,omitempty"`
	// The number of "model-parallel" cores per replica. If this is
	// default (0) it is interpreted as 1.
	NumCoresPerReplica int32 `protobuf:"varint,2,opt,name=num_cores_per_replica,json=numCoresPerReplica,proto3" json:"num_cores_per_replica,omitempty"`
	// Optional metadata about host sends and recvs.
	HostComputeMetadata *tf2xla.HostComputeMetadata `protobuf:"bytes,3,opt,name=host_compute_metadata,json=hostComputeMetadata,proto3" json:"host_compute_metadata,omitempty"`
	// The arg/result shapes for the whole computation.
	ProgramShape *xla.ProgramShapeProto `protobuf:"bytes,4,opt,name=program_shape,json=programShape,proto3" json:"program_shape,omitempty"`
	// The arg/result shapes for each core of a model-parallel
	// computation. per_core_args_and_result_shapes is optional for a
	// single-core computation.
	PerCoreProgramShape []*xla.ProgramShapeProto `protobuf:"bytes,5,rep,name=per_core_program_shape,json=perCoreProgramShape,proto3" json:"per_core_program_shape,omitempty"`
	// Describes how replicated computation instances should be assigned to
	// devices. There are num_cores_per_replica computations, and each one will be
	// sent and executed to the set of replica device numbers described in the
	// DeviceAssignment proto.
	DeviceAssignment *DeviceAssignment `protobuf:"bytes,6,opt,name=device_assignment,json=deviceAssignment,proto3" json:"device_assignment,omitempty"`
	// The debugging options to be passed to the XLA compilation process.
	DebugOptions *xla.DebugOptions                  `protobuf:"bytes,7,opt,name=debug_options,json=debugOptions,proto3" json:"debug_options,omitempty"`
	Experimental *XLAComputationConfig_Experimental `protobuf:"bytes,8,opt,name=experimental,proto3" json:"experimental,omitempty"`
}

func (x *XLAComputationConfig) Reset() {
	*x = XLAComputationConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_xrt_xrt_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XLAComputationConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XLAComputationConfig) ProtoMessage() {}

func (x *XLAComputationConfig) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_xrt_xrt_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XLAComputationConfig.ProtoReflect.Descriptor instead.
func (*XLAComputationConfig) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_xrt_xrt_proto_rawDescGZIP(), []int{1}
}

func (x *XLAComputationConfig) GetNumReplicas() int32 {
	if x != nil {
		return x.NumReplicas
	}
	return 0
}

func (x *XLAComputationConfig) GetNumCoresPerReplica() int32 {
	if x != nil {
		return x.NumCoresPerReplica
	}
	return 0
}

func (x *XLAComputationConfig) GetHostComputeMetadata() *tf2xla.HostComputeMetadata {
	if x != nil {
		return x.HostComputeMetadata
	}
	return nil
}

func (x *XLAComputationConfig) GetProgramShape() *xla.ProgramShapeProto {
	if x != nil {
		return x.ProgramShape
	}
	return nil
}

func (x *XLAComputationConfig) GetPerCoreProgramShape() []*xla.ProgramShapeProto {
	if x != nil {
		return x.PerCoreProgramShape
	}
	return nil
}

func (x *XLAComputationConfig) GetDeviceAssignment() *DeviceAssignment {
	if x != nil {
		return x.DeviceAssignment
	}
	return nil
}

func (x *XLAComputationConfig) GetDebugOptions() *xla.DebugOptions {
	if x != nil {
		return x.DebugOptions
	}
	return nil
}

func (x *XLAComputationConfig) GetExperimental() *XLAComputationConfig_Experimental {
	if x != nil {
		return x.Experimental
	}
	return nil
}

// Options and XLA computation for a compilation.
type XLAComputation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config      *XLAComputationConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	HloSnapshot *service.HloSnapshot  `protobuf:"bytes,2,opt,name=hlo_snapshot,json=hloSnapshot,proto3" json:"hlo_snapshot,omitempty"`
}

func (x *XLAComputation) Reset() {
	*x = XLAComputation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_xrt_xrt_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XLAComputation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XLAComputation) ProtoMessage() {}

func (x *XLAComputation) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_xrt_xrt_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XLAComputation.ProtoReflect.Descriptor instead.
func (*XLAComputation) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_xrt_xrt_proto_rawDescGZIP(), []int{2}
}

func (x *XLAComputation) GetConfig() *XLAComputationConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *XLAComputation) GetHloSnapshot() *service.HloSnapshot {
	if x != nil {
		return x.HloSnapshot
	}
	return nil
}

// Literal to allocate space for, and transfer to, device memory.
type XLAAllocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *xla.LiteralProto `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *XLAAllocation) Reset() {
	*x = XLAAllocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_xrt_xrt_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XLAAllocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XLAAllocation) ProtoMessage() {}

func (x *XLAAllocation) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_xrt_xrt_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XLAAllocation.ProtoReflect.Descriptor instead.
func (*XLAAllocation) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_xrt_xrt_proto_rawDescGZIP(), []int{3}
}

func (x *XLAAllocation) GetValue() *xla.LiteralProto {
	if x != nil {
		return x.Value
	}
	return nil
}

// Node in a tree describing a tuple constructed from input handles. A
// node is an internal node if tuples is non-empty, in which case
// input_index and release_input_handle are ignored. Otherwise a node
// is a leaf node. Each leaf XLATupleNode is the index of an input
// which corresponds to a handle that will be grafted onto the output
// tuple at that location. If release_input_handle is true that input
// handle will be released and become invalid.  Inputs may be repeated
// in which case leaves of the output tuple will alias. If an input is
// repeated, release_input_handle must be false for every leaf where
// that input appears.
//
// For example, if input 0 has shape {} and input 1 has shape {2,3}
// then the XLATupleNode with structure {1,{0,1}} corresponds to a
// tuple with shape {{2,3},{{},{2,3}}}.
type XLATupleNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InputIndex         int32           `protobuf:"varint,1,opt,name=input_index,json=inputIndex,proto3" json:"input_index,omitempty"`
	ReleaseInputHandle bool            `protobuf:"varint,2,opt,name=release_input_handle,json=releaseInputHandle,proto3" json:"release_input_handle,omitempty"`
	Tuples             []*XLATupleNode `protobuf:"bytes,3,rep,name=tuples,proto3" json:"tuples,omitempty"`
}

func (x *XLATupleNode) Reset() {
	*x = XLATupleNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_xrt_xrt_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XLATupleNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XLATupleNode) ProtoMessage() {}

func (x *XLATupleNode) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_xrt_xrt_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XLATupleNode.ProtoReflect.Descriptor instead.
func (*XLATupleNode) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_xrt_xrt_proto_rawDescGZIP(), []int{4}
}

func (x *XLATupleNode) GetInputIndex() int32 {
	if x != nil {
		return x.InputIndex
	}
	return 0
}

func (x *XLATupleNode) GetReleaseInputHandle() bool {
	if x != nil {
		return x.ReleaseInputHandle
	}
	return false
}

func (x *XLATupleNode) GetTuples() []*XLATupleNode {
	if x != nil {
		return x.Tuples
	}
	return nil
}

type CommonExecutionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The replica index this execute is driving.
	ReplicaId int32 `protobuf:"varint,1,opt,name=replica_id,json=replicaId,proto3" json:"replica_id,omitempty"`
	// Mapping local device ordinals to global replica IDs.
	// local_replica_mapping[LOCAL_DEVICE_ORDINAL] = GLOBAL_REPLICA_ID
	LocalReplicaMapping []int32 `protobuf:"varint,2,rep,packed,name=local_replica_mapping,json=localReplicaMapping,proto3" json:"local_replica_mapping,omitempty"`
	// The execution run ID used to correlate different XRT execute operations
	// happeining in parallel from different threads.
	RunId int64 `protobuf:"varint,3,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
}

func (x *CommonExecutionConfig) Reset() {
	*x = CommonExecutionConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_xrt_xrt_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonExecutionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonExecutionConfig) ProtoMessage() {}

func (x *CommonExecutionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_xrt_xrt_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonExecutionConfig.ProtoReflect.Descriptor instead.
func (*CommonExecutionConfig) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_xrt_xrt_proto_rawDescGZIP(), []int{5}
}

func (x *CommonExecutionConfig) GetReplicaId() int32 {
	if x != nil {
		return x.ReplicaId
	}
	return 0
}

func (x *CommonExecutionConfig) GetLocalReplicaMapping() []int32 {
	if x != nil {
		return x.LocalReplicaMapping
	}
	return nil
}

func (x *CommonExecutionConfig) GetRunId() int64 {
	if x != nil {
		return x.RunId
	}
	return 0
}

// Options for an XLA execution.
type XRTExecutionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Local device to run on. This is present because the execute Op
	// may be placed on a device such as CPU or TPU_SYSTEM that
	// logically manages multiple cores.
	DeviceOrdinal int32 `protobuf:"varint,1,opt,name=device_ordinal,json=deviceOrdinal,proto3" json:"device_ordinal,omitempty"`
	// Which model-parallel computation to run from the compiled bundle.
	CoreIndexInReplica int32 `protobuf:"varint,2,opt,name=core_index_in_replica,json=coreIndexInReplica,proto3" json:"core_index_in_replica,omitempty"`
	// Optional key to disambiguate between executions. This is only
	// needed if multiple host send/recvs may be outstanding
	// concurrently with executions.
	ExecutionInstanceKey string `protobuf:"bytes,3,opt,name=execution_instance_key,json=executionInstanceKey,proto3" json:"execution_instance_key,omitempty"`
	// If non-zero, rng_seed to reset the core with.
	RngSeed uint32 `protobuf:"varint,4,opt,name=rng_seed,json=rngSeed,proto3" json:"rng_seed,omitempty"`
	// If true, release allocation handles on the inputs after running.
	ReleaseInputHandles bool `protobuf:"varint,5,opt,name=release_input_handles,json=releaseInputHandles,proto3" json:"release_input_handles,omitempty"`
	// If true, release the handle to the computation after running.
	ReleaseCompilationHandle bool `protobuf:"varint,6,opt,name=release_compilation_handle,json=releaseCompilationHandle,proto3" json:"release_compilation_handle,omitempty"`
	// If set to true, and the result shape is a tuple, then instead of returning
	// a single tuple allocation the execution will return a vector of
	// allocations, one for each of the first-level elements of the result tuple.
	ReturnExplodedTuple bool `protobuf:"varint,7,opt,name=return_exploded_tuple,json=returnExplodedTuple,proto3" json:"return_exploded_tuple,omitempty"`
	// The common configuration for XRT execute operations.
	CommonConfig *CommonExecutionConfig `protobuf:"bytes,9,opt,name=common_config,json=commonConfig,proto3" json:"common_config,omitempty"`
}

func (x *XRTExecutionConfig) Reset() {
	*x = XRTExecutionConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_xrt_xrt_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XRTExecutionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XRTExecutionConfig) ProtoMessage() {}

func (x *XRTExecutionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_xrt_xrt_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XRTExecutionConfig.ProtoReflect.Descriptor instead.
func (*XRTExecutionConfig) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_xrt_xrt_proto_rawDescGZIP(), []int{6}
}

func (x *XRTExecutionConfig) GetDeviceOrdinal() int32 {
	if x != nil {
		return x.DeviceOrdinal
	}
	return 0
}

func (x *XRTExecutionConfig) GetCoreIndexInReplica() int32 {
	if x != nil {
		return x.CoreIndexInReplica
	}
	return 0
}

func (x *XRTExecutionConfig) GetExecutionInstanceKey() string {
	if x != nil {
		return x.ExecutionInstanceKey
	}
	return ""
}

func (x *XRTExecutionConfig) GetRngSeed() uint32 {
	if x != nil {
		return x.RngSeed
	}
	return 0
}

func (x *XRTExecutionConfig) GetReleaseInputHandles() bool {
	if x != nil {
		return x.ReleaseInputHandles
	}
	return false
}

func (x *XRTExecutionConfig) GetReleaseCompilationHandle() bool {
	if x != nil {
		return x.ReleaseCompilationHandle
	}
	return false
}

func (x *XRTExecutionConfig) GetReturnExplodedTuple() bool {
	if x != nil {
		return x.ReturnExplodedTuple
	}
	return false
}

func (x *XRTExecutionConfig) GetCommonConfig() *CommonExecutionConfig {
	if x != nil {
		return x.CommonConfig
	}
	return nil
}

type XRTChainedExecuteConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If non-zero, rng_seed to reset the core with.
	RngSeed uint32 `protobuf:"varint,1,opt,name=rng_seed,json=rngSeed,proto3" json:"rng_seed,omitempty"`
	// Which model-parallel computation to run from the compiled bundle.
	CoreIndexInReplica int32 `protobuf:"varint,2,opt,name=core_index_in_replica,json=coreIndexInReplica,proto3" json:"core_index_in_replica,omitempty"`
	// Optional key to disambiguate between executions. This is only needed if
	// multiple host send/recvs may be outstanding concurrently with executions.
	ExecutionInstanceKey string `protobuf:"bytes,3,opt,name=execution_instance_key,json=executionInstanceKey,proto3" json:"execution_instance_key,omitempty"`
	// The common configuration for XRT execute operations.
	CommonConfig *CommonExecutionConfig `protobuf:"bytes,5,opt,name=common_config,json=commonConfig,proto3" json:"common_config,omitempty"`
}

func (x *XRTChainedExecuteConfig) Reset() {
	*x = XRTChainedExecuteConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_xrt_xrt_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XRTChainedExecuteConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XRTChainedExecuteConfig) ProtoMessage() {}

func (x *XRTChainedExecuteConfig) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_xrt_xrt_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XRTChainedExecuteConfig.ProtoReflect.Descriptor instead.
func (*XRTChainedExecuteConfig) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_xrt_xrt_proto_rawDescGZIP(), []int{7}
}

func (x *XRTChainedExecuteConfig) GetRngSeed() uint32 {
	if x != nil {
		return x.RngSeed
	}
	return 0
}

func (x *XRTChainedExecuteConfig) GetCoreIndexInReplica() int32 {
	if x != nil {
		return x.CoreIndexInReplica
	}
	return 0
}

func (x *XRTChainedExecuteConfig) GetExecutionInstanceKey() string {
	if x != nil {
		return x.ExecutionInstanceKey
	}
	return ""
}

func (x *XRTChainedExecuteConfig) GetCommonConfig() *CommonExecutionConfig {
	if x != nil {
		return x.CommonConfig
	}
	return nil
}

// A single chained execute operation. An operation can either be a device data
// load, or an existing (as in, previously compiled and accessible via its int64
// handle) XLA computation execution.
type XRTChainedExecuteOp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to OpOneof:
	//
	//	*XRTChainedExecuteOp_DataHandle
	//	*XRTChainedExecuteOp_ComputationHandle
	OpOneof isXRTChainedExecuteOp_OpOneof `protobuf_oneof:"op_oneof"`
	// The outputs of this XRTChainedExecuteOp operation.
	Outputs []*XRTChainedExecuteOp_Output `protobuf:"bytes,3,rep,name=outputs,proto3" json:"outputs,omitempty"`
	// The inputs of this XRTChainedExecuteOp operation. If data_handle is set,
	// there are no inputs.
	Inputs []*XRTChainedExecuteOp_Input `protobuf:"bytes,4,rep,name=inputs,proto3" json:"inputs,omitempty"`
}

func (x *XRTChainedExecuteOp) Reset() {
	*x = XRTChainedExecuteOp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_xrt_xrt_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XRTChainedExecuteOp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XRTChainedExecuteOp) ProtoMessage() {}

func (x *XRTChainedExecuteOp) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_xrt_xrt_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XRTChainedExecuteOp.ProtoReflect.Descriptor instead.
func (*XRTChainedExecuteOp) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_xrt_xrt_proto_rawDescGZIP(), []int{8}
}

func (m *XRTChainedExecuteOp) GetOpOneof() isXRTChainedExecuteOp_OpOneof {
	if m != nil {
		return m.OpOneof
	}
	return nil
}

func (x *XRTChainedExecuteOp) GetDataHandle() int64 {
	if x, ok := x.GetOpOneof().(*XRTChainedExecuteOp_DataHandle); ok {
		return x.DataHandle
	}
	return 0
}

func (x *XRTChainedExecuteOp) GetComputationHandle() int64 {
	if x, ok := x.GetOpOneof().(*XRTChainedExecuteOp_ComputationHandle); ok {
		return x.ComputationHandle
	}
	return 0
}

func (x *XRTChainedExecuteOp) GetOutputs() []*XRTChainedExecuteOp_Output {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *XRTChainedExecuteOp) GetInputs() []*XRTChainedExecuteOp_Input {
	if x != nil {
		return x.Inputs
	}
	return nil
}

type isXRTChainedExecuteOp_OpOneof interface {
	isXRTChainedExecuteOp_OpOneof()
}

type XRTChainedExecuteOp_DataHandle struct {
	// The handle to an existing XRT device data.
	DataHandle int64 `protobuf:"varint,1,opt,name=data_handle,json=dataHandle,proto3,oneof"`
}

type XRTChainedExecuteOp_ComputationHandle struct {
	// The handle to an existing XRT compiled computation.
	ComputationHandle int64 `protobuf:"varint,2,opt,name=computation_handle,json=computationHandle,proto3,oneof"`
}

func (*XRTChainedExecuteOp_DataHandle) isXRTChainedExecuteOp_OpOneof() {}

func (*XRTChainedExecuteOp_ComputationHandle) isXRTChainedExecuteOp_OpOneof() {}

// Execution plan for the XRTChainedExecute operation.
type XRTChainedExecutePlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The post order with the XRT computations to be executed.
	Ops []*XRTChainedExecuteOp `protobuf:"bytes,1,rep,name=ops,proto3" json:"ops,omitempty"`
}

func (x *XRTChainedExecutePlan) Reset() {
	*x = XRTChainedExecutePlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_xrt_xrt_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XRTChainedExecutePlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XRTChainedExecutePlan) ProtoMessage() {}

func (x *XRTChainedExecutePlan) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_xrt_xrt_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XRTChainedExecutePlan.ProtoReflect.Descriptor instead.
func (*XRTChainedExecutePlan) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_xrt_xrt_proto_rawDescGZIP(), []int{9}
}

func (x *XRTChainedExecutePlan) GetOps() []*XRTChainedExecuteOp {
	if x != nil {
		return x.Ops
	}
	return nil
}

// The message used to encode the options for the XRTMetricsCollect operation.
type XRTMetricsCollect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of regular expressions to match the metric names. Empty means to
	// return all the metrics reported by the collection registry.
	MetricsRegex []string `protobuf:"bytes,1,rep,name=metrics_regex,json=metricsRegex,proto3" json:"metrics_regex,omitempty"`
}

func (x *XRTMetricsCollect) Reset() {
	*x = XRTMetricsCollect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_xrt_xrt_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XRTMetricsCollect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XRTMetricsCollect) ProtoMessage() {}

func (x *XRTMetricsCollect) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_xrt_xrt_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XRTMetricsCollect.ProtoReflect.Descriptor instead.
func (*XRTMetricsCollect) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_xrt_xrt_proto_rawDescGZIP(), []int{10}
}

func (x *XRTMetricsCollect) GetMetricsRegex() []string {
	if x != nil {
		return x.MetricsRegex
	}
	return nil
}

type Percentiles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The time (in nanoseconds) of the first sample within the samples buffer.
	StartNstime uint64 `protobuf:"varint,1,opt,name=start_nstime,json=startNstime,proto3" json:"start_nstime,omitempty"`
	// The time (in nanoseconds) of the last sample within the samples buffer.
	EndNstime uint64 `protobuf:"varint,2,opt,name=end_nstime,json=endNstime,proto3" json:"end_nstime,omitempty"`
	// The minimum value of the samples within the samples buffer.
	MinValue float64 `protobuf:"fixed64,3,opt,name=min_value,json=minValue,proto3" json:"min_value,omitempty"`
	// The maximum value of the samples within the samples buffer.
	MaxValue float64 `protobuf:"fixed64,4,opt,name=max_value,json=maxValue,proto3" json:"max_value,omitempty"`
	// The mean value of the samples within the samples buffer.
	Mean float64 `protobuf:"fixed64,5,opt,name=mean,proto3" json:"mean,omitempty"`
	// The stndard deviation of the samples within the samples buffer.
	Stddev float64 `protobuf:"fixed64,6,opt,name=stddev,proto3" json:"stddev,omitempty"`
	// The number samples within the samples buffer.
	NumSamples uint64 `protobuf:"varint,7,opt,name=num_samples,json=numSamples,proto3" json:"num_samples,omitempty"`
	// The total number of times this metrics has been posted a value to.
	TotalSamples uint64 `protobuf:"varint,8,opt,name=total_samples,json=totalSamples,proto3" json:"total_samples,omitempty"`
	// The sum of all the posted values.
	Accumulator float64 `protobuf:"fixed64,9,opt,name=accumulator,proto3" json:"accumulator,omitempty"`
	// The percentile points reported by the metric.
	Points []*Percentiles_Point `protobuf:"bytes,10,rep,name=points,proto3" json:"points,omitempty"`
}

func (x *Percentiles) Reset() {
	*x = Percentiles{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_xrt_xrt_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Percentiles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Percentiles) ProtoMessage() {}

func (x *Percentiles) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_xrt_xrt_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Percentiles.ProtoReflect.Descriptor instead.
func (*Percentiles) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_xrt_xrt_proto_rawDescGZIP(), []int{11}
}

func (x *Percentiles) GetStartNstime() uint64 {
	if x != nil {
		return x.StartNstime
	}
	return 0
}

func (x *Percentiles) GetEndNstime() uint64 {
	if x != nil {
		return x.EndNstime
	}
	return 0
}

func (x *Percentiles) GetMinValue() float64 {
	if x != nil {
		return x.MinValue
	}
	return 0
}

func (x *Percentiles) GetMaxValue() float64 {
	if x != nil {
		return x.MaxValue
	}
	return 0
}

func (x *Percentiles) GetMean() float64 {
	if x != nil {
		return x.Mean
	}
	return 0
}

func (x *Percentiles) GetStddev() float64 {
	if x != nil {
		return x.Stddev
	}
	return 0
}

func (x *Percentiles) GetNumSamples() uint64 {
	if x != nil {
		return x.NumSamples
	}
	return 0
}

func (x *Percentiles) GetTotalSamples() uint64 {
	if x != nil {
		return x.TotalSamples
	}
	return 0
}

func (x *Percentiles) GetAccumulator() float64 {
	if x != nil {
		return x.Accumulator
	}
	return 0
}

func (x *Percentiles) GetPoints() []*Percentiles_Point {
	if x != nil {
		return x.Points
	}
	return nil
}

type MetricValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The metric name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are assignable to ValuesOneof:
	//
	//	*MetricValues_PercentilesValue
	//	*MetricValues_Int64Value
	ValuesOneof   isMetricValues_ValuesOneof `protobuf_oneof:"values_oneof"`
	UnitOfMeasure MetricValues_UnitOfMeasure `protobuf:"varint,4,opt,name=unit_of_measure,json=unitOfMeasure,proto3,enum=xrt.MetricValues_UnitOfMeasure" json:"unit_of_measure,omitempty"`
}

func (x *MetricValues) Reset() {
	*x = MetricValues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_xrt_xrt_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricValues) ProtoMessage() {}

func (x *MetricValues) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_xrt_xrt_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricValues.ProtoReflect.Descriptor instead.
func (*MetricValues) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_xrt_xrt_proto_rawDescGZIP(), []int{12}
}

func (x *MetricValues) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (m *MetricValues) GetValuesOneof() isMetricValues_ValuesOneof {
	if m != nil {
		return m.ValuesOneof
	}
	return nil
}

func (x *MetricValues) GetPercentilesValue() *Percentiles {
	if x, ok := x.GetValuesOneof().(*MetricValues_PercentilesValue); ok {
		return x.PercentilesValue
	}
	return nil
}

func (x *MetricValues) GetInt64Value() int64 {
	if x, ok := x.GetValuesOneof().(*MetricValues_Int64Value); ok {
		return x.Int64Value
	}
	return 0
}

func (x *MetricValues) GetUnitOfMeasure() MetricValues_UnitOfMeasure {
	if x != nil {
		return x.UnitOfMeasure
	}
	return MetricValues_INVALID
}

type isMetricValues_ValuesOneof interface {
	isMetricValues_ValuesOneof()
}

type MetricValues_PercentilesValue struct {
	PercentilesValue *Percentiles `protobuf:"bytes,2,opt,name=percentiles_value,json=percentilesValue,proto3,oneof"`
}

type MetricValues_Int64Value struct {
	Int64Value int64 `protobuf:"varint,3,opt,name=int64_value,json=int64Value,proto3,oneof"`
}

func (*MetricValues_PercentilesValue) isMetricValues_ValuesOneof() {}

func (*MetricValues_Int64Value) isMetricValues_ValuesOneof() {}

type MetricsReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metrics []*MetricValues `protobuf:"bytes,1,rep,name=metrics,proto3" json:"metrics,omitempty"`
}

func (x *MetricsReport) Reset() {
	*x = MetricsReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_xrt_xrt_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetricsReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetricsReport) ProtoMessage() {}

func (x *MetricsReport) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_xrt_xrt_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetricsReport.ProtoReflect.Descriptor instead.
func (*MetricsReport) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_xrt_xrt_proto_rawDescGZIP(), []int{13}
}

func (x *MetricsReport) GetMetrics() []*MetricValues {
	if x != nil {
		return x.Metrics
	}
	return nil
}

type MemoryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The total memory on a device, in KB.
	KbTotal int64 `protobuf:"varint,1,opt,name=kb_total,json=kbTotal,proto3" json:"kb_total,omitempty"`
	// The free memory on a device, in KB.
	KbFree int64 `protobuf:"varint,2,opt,name=kb_free,json=kbFree,proto3" json:"kb_free,omitempty"`
}

func (x *MemoryInfo) Reset() {
	*x = MemoryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_xrt_xrt_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemoryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemoryInfo) ProtoMessage() {}

func (x *MemoryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_xrt_xrt_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemoryInfo.ProtoReflect.Descriptor instead.
func (*MemoryInfo) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_xrt_xrt_proto_rawDescGZIP(), []int{14}
}

func (x *MemoryInfo) GetKbTotal() int64 {
	if x != nil {
		return x.KbTotal
	}
	return 0
}

func (x *MemoryInfo) GetKbFree() int64 {
	if x != nil {
		return x.KbFree
	}
	return 0
}

type DeviceAssignment_ComputationDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// As many replicas as there are in the replicated computation.
	ReplicaDevices []*DeviceAssignment_ComputationDevice_DeviceMeshCoordinates `protobuf:"bytes,1,rep,name=replica_devices,json=replicaDevices,proto3" json:"replica_devices,omitempty"`
}

func (x *DeviceAssignment_ComputationDevice) Reset() {
	*x = DeviceAssignment_ComputationDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_xrt_xrt_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceAssignment_ComputationDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceAssignment_ComputationDevice) ProtoMessage() {}

func (x *DeviceAssignment_ComputationDevice) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_xrt_xrt_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceAssignment_ComputationDevice.ProtoReflect.Descriptor instead.
func (*DeviceAssignment_ComputationDevice) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_xrt_xrt_proto_rawDescGZIP(), []int{0, 0}
}

func (x *DeviceAssignment_ComputationDevice) GetReplicaDevices() []*DeviceAssignment_ComputationDevice_DeviceMeshCoordinates {
	if x != nil {
		return x.ReplicaDevices
	}
	return nil
}

type DeviceAssignment_ComputationDevice_DeviceMeshCoordinates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The mesh coordinates for the device. Usually (X, Y, Z, Core), in the
	// order in which they are returned in the TopologyProto.
	//
	//	X    = value(0)
	//	Y    = value(1)
	//	Z    = value(2)
	//	Core = value(3)
	Value []int32 `protobuf:"varint,1,rep,packed,name=value,proto3" json:"value,omitempty"`
}

func (x *DeviceAssignment_ComputationDevice_DeviceMeshCoordinates) Reset() {
	*x = DeviceAssignment_ComputationDevice_DeviceMeshCoordinates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_xrt_xrt_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceAssignment_ComputationDevice_DeviceMeshCoordinates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceAssignment_ComputationDevice_DeviceMeshCoordinates) ProtoMessage() {}

func (x *DeviceAssignment_ComputationDevice_DeviceMeshCoordinates) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_xrt_xrt_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceAssignment_ComputationDevice_DeviceMeshCoordinates.ProtoReflect.Descriptor instead.
func (*DeviceAssignment_ComputationDevice_DeviceMeshCoordinates) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_xrt_xrt_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *DeviceAssignment_ComputationDevice_DeviceMeshCoordinates) GetValue() []int32 {
	if x != nil {
		return x.Value
	}
	return nil
}

// Everything inside Experimental is subject to change and is not subject
// to API stability guarantees in
// https://www.tensorflow.org/guide/version_compat.
type XLAComputationConfig_Experimental struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// stateful_input_indices is only useful when using XRT-compiled
	// programs together with standard TensorFlow TPU execution ops, so should
	// be ignored by most clients.
	//
	// Optionally the client can pass information about which inputs
	// to the computation are updates to "stateful" quantities. Each
	// element of stateful_input_indices includes an index indicating
	// which input argument it corresponds to, and a bool indicating
	// whether the value is updated or not. If the XRT computation is
	// going to be used with a TensorFlow TPU execution op then an
	// input index must be present for each input that will correspond
	// to a resource variable in the execution op, and may not be
	// present for any other input.
	StatefulInputIndices []*XLAComputationConfig_Experimental_UpdateIndexPair `protobuf:"bytes,1,rep,name=stateful_input_indices,json=statefulInputIndices,proto3" json:"stateful_input_indices,omitempty"`
}

func (x *XLAComputationConfig_Experimental) Reset() {
	*x = XLAComputationConfig_Experimental{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_xrt_xrt_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XLAComputationConfig_Experimental) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XLAComputationConfig_Experimental) ProtoMessage() {}

func (x *XLAComputationConfig_Experimental) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_xrt_xrt_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XLAComputationConfig_Experimental.ProtoReflect.Descriptor instead.
func (*XLAComputationConfig_Experimental) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_xrt_xrt_proto_rawDescGZIP(), []int{1, 0}
}

func (x *XLAComputationConfig_Experimental) GetStatefulInputIndices() []*XLAComputationConfig_Experimental_UpdateIndexPair {
	if x != nil {
		return x.StatefulInputIndices
	}
	return nil
}

type XLAComputationConfig_Experimental_UpdateIndexPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index   int32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Updated bool  `protobuf:"varint,2,opt,name=updated,proto3" json:"updated,omitempty"`
}

func (x *XLAComputationConfig_Experimental_UpdateIndexPair) Reset() {
	*x = XLAComputationConfig_Experimental_UpdateIndexPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_xrt_xrt_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XLAComputationConfig_Experimental_UpdateIndexPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XLAComputationConfig_Experimental_UpdateIndexPair) ProtoMessage() {}

func (x *XLAComputationConfig_Experimental_UpdateIndexPair) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_xrt_xrt_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XLAComputationConfig_Experimental_UpdateIndexPair.ProtoReflect.Descriptor instead.
func (*XLAComputationConfig_Experimental_UpdateIndexPair) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_xrt_xrt_proto_rawDescGZIP(), []int{1, 0, 0}
}

func (x *XLAComputationConfig_Experimental_UpdateIndexPair) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *XLAComputationConfig_Experimental_UpdateIndexPair) GetUpdated() bool {
	if x != nil {
		return x.Updated
	}
	return false
}

// Represents an input for this operation.
type XRTChainedExecuteOp_Input struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The index within the XRTChainedExecutePlan.ops post-order of the source
	// operation for this input.
	OpIndex int64 `protobuf:"varint,1,opt,name=op_index,json=opIndex,proto3" json:"op_index,omitempty"`
	// The output index of the value generated by the operation at op_index.
	// Zero (default value) means no index ({}) while if an indexing is
	// required, output_index needs to be set to index+1.
	// Thanks proto3!
	OutputIndex int64 `protobuf:"varint,2,opt,name=output_index,json=outputIndex,proto3" json:"output_index,omitempty"`
}

func (x *XRTChainedExecuteOp_Input) Reset() {
	*x = XRTChainedExecuteOp_Input{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_xrt_xrt_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XRTChainedExecuteOp_Input) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XRTChainedExecuteOp_Input) ProtoMessage() {}

func (x *XRTChainedExecuteOp_Input) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_xrt_xrt_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XRTChainedExecuteOp_Input.ProtoReflect.Descriptor instead.
func (*XRTChainedExecuteOp_Input) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_xrt_xrt_proto_rawDescGZIP(), []int{8, 0}
}

func (x *XRTChainedExecuteOp_Input) GetOpIndex() int64 {
	if x != nil {
		return x.OpIndex
	}
	return 0
}

func (x *XRTChainedExecuteOp_Input) GetOutputIndex() int64 {
	if x != nil {
		return x.OutputIndex
	}
	return 0
}

// Represents an output of the XRTChainedExecute operation, which should
// originate by the output of this operation.
type XRTChainedExecuteOp_Output struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The index in the value generated by this operation, which should be
	// forwarded as XRTChainedExecute output. If output_index is zero (default
	// value) the whole output will be used as result. This means that if the
	// output shape is a tuple, the result will be the full tuple. Otherwise the
	// real sub-tuple index will be output_index - 1.
	OutputIndex int64 `protobuf:"varint,1,opt,name=output_index,json=outputIndex,proto3" json:"output_index,omitempty"`
	// The index in the vector of the results returned by the XRTChainedExecute
	// operation, where this output should be forwarded.
	ResultIndex int64 `protobuf:"varint,2,opt,name=result_index,json=resultIndex,proto3" json:"result_index,omitempty"`
}

func (x *XRTChainedExecuteOp_Output) Reset() {
	*x = XRTChainedExecuteOp_Output{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_xrt_xrt_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XRTChainedExecuteOp_Output) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XRTChainedExecuteOp_Output) ProtoMessage() {}

func (x *XRTChainedExecuteOp_Output) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_xrt_xrt_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XRTChainedExecuteOp_Output.ProtoReflect.Descriptor instead.
func (*XRTChainedExecuteOp_Output) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_xrt_xrt_proto_rawDescGZIP(), []int{8, 1}
}

func (x *XRTChainedExecuteOp_Output) GetOutputIndex() int64 {
	if x != nil {
		return x.OutputIndex
	}
	return 0
}

func (x *XRTChainedExecuteOp_Output) GetResultIndex() int64 {
	if x != nil {
		return x.ResultIndex
	}
	return 0
}

type Percentiles_Point struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// In the [0, 100] range.
	Percentile float64 `protobuf:"fixed64,1,opt,name=percentile,proto3" json:"percentile,omitempty"`
	Value      float64 `protobuf:"fixed64,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Percentiles_Point) Reset() {
	*x = Percentiles_Point{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_xrt_xrt_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Percentiles_Point) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Percentiles_Point) ProtoMessage() {}

func (x *Percentiles_Point) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_xrt_xrt_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Percentiles_Point.ProtoReflect.Descriptor instead.
func (*Percentiles_Point) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_xrt_xrt_proto_rawDescGZIP(), []int{11, 0}
}

func (x *Percentiles_Point) GetPercentile() float64 {
	if x != nil {
		return x.Percentile
	}
	return 0
}

func (x *Percentiles_Point) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

var File_tensorflow_compiler_xrt_xrt_proto protoreflect.FileDescriptor

var file_tensorflow_compiler_xrt_xrt_proto_rawDesc = []byte{
	0x0a, 0x21, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x6d,
	0x70, 0x69, 0x6c, 0x65, 0x72, 0x2f, 0x78, 0x72, 0x74, 0x2f, 0x78, 0x72, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x03, 0x78, 0x72, 0x74, 0x1a, 0x36, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x2f, 0x74, 0x66,
	0x32, 0x78, 0x6c, 0x61, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x29, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x6d,
	0x70, 0x69, 0x6c, 0x65, 0x72, 0x2f, 0x78, 0x6c, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x68, 0x6c, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x74, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72,
	0x2f, 0x78, 0x6c, 0x61, 0x2f, 0x78, 0x6c, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26,
	0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x69,
	0x6c, 0x65, 0x72, 0x2f, 0x78, 0x6c, 0x61, 0x2f, 0x78, 0x6c, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x99, 0x02, 0x0a, 0x10, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x58, 0x0a, 0x13, 0x63,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x78, 0x72, 0x74, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x1a, 0xaa, 0x01, 0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x66, 0x0a, 0x0f, 0x72,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x78, 0x72, 0x74, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x68, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x1a, 0x2d, 0x0a, 0x15, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x73,
	0x68, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0xdc, 0x05, 0x0a, 0x14, 0x58, 0x4c, 0x41, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x6e,
	0x75, 0x6d, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x31,
	0x0a, 0x15, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6e,
	0x75, 0x6d, 0x43, 0x6f, 0x72, 0x65, 0x73, 0x50, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x12, 0x5a, 0x0a, 0x15, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x74, 0x66,
	0x32, 0x78, 0x6c, 0x61, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x13, 0x68, 0x6f, 0x73, 0x74, 0x43, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3b, 0x0a,
	0x0d, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x73, 0x68, 0x61, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x53, 0x68, 0x61, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0c, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x53, 0x68, 0x61, 0x70, 0x65, 0x12, 0x4b, 0x0a, 0x16, 0x70, 0x65,
	0x72, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x73,
	0x68, 0x61, 0x70, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x78, 0x6c, 0x61,
	0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x53, 0x68, 0x61, 0x70, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x52, 0x13, 0x70, 0x65, 0x72, 0x43, 0x6f, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x53, 0x68, 0x61, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x11, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x78, 0x72, 0x74, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x10, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x0d, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x78, 0x6c, 0x61, 0x2e, 0x44, 0x65, 0x62, 0x75, 0x67, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0c, 0x64, 0x65, 0x62, 0x75, 0x67, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x4a, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x78, 0x72, 0x74, 0x2e,
	0x58, 0x4c, 0x41, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x6c, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x1a,
	0xbf, 0x01, 0x0a, 0x0c, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c,
	0x12, 0x6c, 0x0a, 0x16, 0x73, 0x74, 0x61, 0x74, 0x65, 0x66, 0x75, 0x6c, 0x5f, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x78, 0x72, 0x74, 0x2e, 0x58, 0x4c, 0x41, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x50, 0x61, 0x69, 0x72, 0x52, 0x14, 0x73, 0x74, 0x61, 0x74, 0x65, 0x66,
	0x75, 0x6c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x65, 0x73, 0x1a, 0x41,
	0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x61, 0x69,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x22, 0x78, 0x0a, 0x0e, 0x58, 0x4c, 0x41, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x78, 0x72, 0x74, 0x2e, 0x58, 0x4c, 0x41, 0x43, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x33, 0x0a, 0x0c, 0x68, 0x6c, 0x6f, 0x5f, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x78,
	0x6c, 0x61, 0x2e, 0x48, 0x6c, 0x6f, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x0b,
	0x68, 0x6c, 0x6f, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x22, 0x3e, 0x0a, 0x0d, 0x58,
	0x4c, 0x41, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x78, 0x6c,
	0x61, 0x2e, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0x8c, 0x01, 0x0a, 0x0c,
	0x58, 0x4c, 0x41, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x30, 0x0a,
	0x14, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x68,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12,
	0x29, 0x0a, 0x06, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x78, 0x72, 0x74, 0x2e, 0x58, 0x4c, 0x41, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x06, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x73, 0x22, 0x81, 0x01, 0x0a, 0x15, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x13, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x22, 0xac,
	0x03, 0x0a, 0x12, 0x58, 0x52, 0x54, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x31, 0x0a, 0x15,
	0x63, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x69, 0x6e, 0x5f, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x63, 0x6f, 0x72,
	0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x12,
	0x34, 0x0a, 0x16, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x6e, 0x67, 0x53, 0x65, 0x65, 0x64,
	0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x13, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x1a, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x65, 0x78, 0x70,
	0x6c, 0x6f, 0x64, 0x65, 0x64, 0x5f, 0x74, 0x75, 0x70, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x64, 0x65,
	0x64, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x78, 0x72, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4a, 0x04, 0x08, 0x08, 0x10, 0x09, 0x22, 0xe4, 0x01,
	0x0a, 0x17, 0x58, 0x52, 0x54, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6e, 0x67,
	0x5f, 0x73, 0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x6e, 0x67,
	0x53, 0x65, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x15, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x5f, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x12, 0x63, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x12, 0x34, 0x0a, 0x16, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x3f, 0x0a,
	0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x78, 0x72, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4a, 0x04,
	0x08, 0x04, 0x10, 0x05, 0x22, 0xff, 0x02, 0x0a, 0x13, 0x58, 0x52, 0x54, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x65, 0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x4f, 0x70, 0x12, 0x21, 0x0a, 0x0b,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12,
	0x2f, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x11, 0x63,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x12, 0x39, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x78, 0x72, 0x74, 0x2e, 0x58, 0x52, 0x54, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x65, 0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x4f, 0x70, 0x2e, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x06, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x78, 0x72,
	0x74, 0x2e, 0x58, 0x52, 0x54, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x4f, 0x70, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x06, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x1a, 0x45, 0x0a, 0x05, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x6f, 0x70, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x6f, 0x70, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x1a, 0x4e, 0x0a, 0x06, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x0a, 0x0a, 0x08, 0x6f, 0x70,
	0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x22, 0x43, 0x0a, 0x15, 0x58, 0x52, 0x54, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x65, 0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x12,
	0x2a, 0x0a, 0x03, 0x6f, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x78,
	0x72, 0x74, 0x2e, 0x58, 0x52, 0x54, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x4f, 0x70, 0x52, 0x03, 0x6f, 0x70, 0x73, 0x22, 0x38, 0x0a, 0x11, 0x58,
	0x52, 0x54, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x5f, 0x72, 0x65, 0x67, 0x65,
	0x78, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x52, 0x65, 0x67, 0x65, 0x78, 0x22, 0x8c, 0x03, 0x0a, 0x0b, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6e,
	0x73, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x4e, 0x73, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x5f,
	0x6e, 0x73, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x65, 0x6e,
	0x64, 0x4e, 0x73, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x61, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x04, 0x6d, 0x65, 0x61, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x64, 0x64, 0x65, 0x76, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x73, 0x74, 0x64, 0x64, 0x65, 0x76, 0x12, 0x1f, 0x0a,
	0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x75, 0x6d, 0x75,
	0x6c, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x78, 0x72, 0x74, 0x2e, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x06, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x1a, 0x3d, 0x0a, 0x05, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x9e, 0x02, 0x0a, 0x0c, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x11, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x78, 0x72, 0x74, 0x2e, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x69, 0x6c, 0x65, 0x73, 0x48, 0x00, 0x52, 0x10, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x69, 0x6c, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x00, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x47, 0x0a,
	0x0f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x78, 0x72, 0x74, 0x2e, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x4f, 0x66,
	0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x0d, 0x75, 0x6e, 0x69, 0x74, 0x4f, 0x66, 0x4d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x22, 0x3d, 0x0a, 0x0d, 0x55, 0x6e, 0x69, 0x74, 0x4f, 0x66,
	0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x01,
	0x12, 0x08, 0x0a, 0x04, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x59,
	0x54, 0x45, 0x53, 0x10, 0x03, 0x42, 0x0e, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x5f,
	0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x22, 0x3c, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2b, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x78, 0x72, 0x74, 0x2e, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x22, 0x40, 0x0a, 0x0a, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x19, 0x0a, 0x08, 0x6b, 0x62, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x6b, 0x62, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x17, 0x0a, 0x07,
	0x6b, 0x62, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6b,
	0x62, 0x46, 0x72, 0x65, 0x65, 0x42, 0x79, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x2e, 0x78, 0x72, 0x74,
	0x42, 0x08, 0x58, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x02, 0x50, 0x01, 0x5a, 0x36,
	0x67, 0x69, 0x74, 0x65, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x71, 0x63, 0x69, 0x69, 0x70, 0x2d,
	0x69, 0x63, 0x70, 0x2f, 0x74, 0x66, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2f, 0x74,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c,
	0x65, 0x72, 0x2f, 0x78, 0x72, 0x74, 0xa2, 0x02, 0x03, 0x58, 0x58, 0x58, 0xaa, 0x02, 0x03, 0x58,
	0x72, 0x74, 0xca, 0x02, 0x03, 0x58, 0x72, 0x74, 0xe2, 0x02, 0x0f, 0x58, 0x72, 0x74, 0x5c, 0x47,
	0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x03, 0x58, 0x72, 0x74,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tensorflow_compiler_xrt_xrt_proto_rawDescOnce sync.Once
	file_tensorflow_compiler_xrt_xrt_proto_rawDescData = file_tensorflow_compiler_xrt_xrt_proto_rawDesc
)

func file_tensorflow_compiler_xrt_xrt_proto_rawDescGZIP() []byte {
	file_tensorflow_compiler_xrt_xrt_proto_rawDescOnce.Do(func() {
		file_tensorflow_compiler_xrt_xrt_proto_rawDescData = protoimpl.X.CompressGZIP(file_tensorflow_compiler_xrt_xrt_proto_rawDescData)
	})
	return file_tensorflow_compiler_xrt_xrt_proto_rawDescData
}

var file_tensorflow_compiler_xrt_xrt_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_tensorflow_compiler_xrt_xrt_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_tensorflow_compiler_xrt_xrt_proto_goTypes = []interface{}{
	(MetricValues_UnitOfMeasure)(0),            // 0: xrt.MetricValues.UnitOfMeasure
	(*DeviceAssignment)(nil),                   // 1: xrt.DeviceAssignment
	(*XLAComputationConfig)(nil),               // 2: xrt.XLAComputationConfig
	(*XLAComputation)(nil),                     // 3: xrt.XLAComputation
	(*XLAAllocation)(nil),                      // 4: xrt.XLAAllocation
	(*XLATupleNode)(nil),                       // 5: xrt.XLATupleNode
	(*CommonExecutionConfig)(nil),              // 6: xrt.CommonExecutionConfig
	(*XRTExecutionConfig)(nil),                 // 7: xrt.XRTExecutionConfig
	(*XRTChainedExecuteConfig)(nil),            // 8: xrt.XRTChainedExecuteConfig
	(*XRTChainedExecuteOp)(nil),                // 9: xrt.XRTChainedExecuteOp
	(*XRTChainedExecutePlan)(nil),              // 10: xrt.XRTChainedExecutePlan
	(*XRTMetricsCollect)(nil),                  // 11: xrt.XRTMetricsCollect
	(*Percentiles)(nil),                        // 12: xrt.Percentiles
	(*MetricValues)(nil),                       // 13: xrt.MetricValues
	(*MetricsReport)(nil),                      // 14: xrt.MetricsReport
	(*MemoryInfo)(nil),                         // 15: xrt.MemoryInfo
	(*DeviceAssignment_ComputationDevice)(nil), // 16: xrt.DeviceAssignment.ComputationDevice
	(*DeviceAssignment_ComputationDevice_DeviceMeshCoordinates)(nil), // 17: xrt.DeviceAssignment.ComputationDevice.DeviceMeshCoordinates
	(*XLAComputationConfig_Experimental)(nil),                        // 18: xrt.XLAComputationConfig.Experimental
	(*XLAComputationConfig_Experimental_UpdateIndexPair)(nil),        // 19: xrt.XLAComputationConfig.Experimental.UpdateIndexPair
	(*XRTChainedExecuteOp_Input)(nil),                                // 20: xrt.XRTChainedExecuteOp.Input
	(*XRTChainedExecuteOp_Output)(nil),                               // 21: xrt.XRTChainedExecuteOp.Output
	(*Percentiles_Point)(nil),                                        // 22: xrt.Percentiles.Point
	(*tf2xla.HostComputeMetadata)(nil),                               // 23: tensorflow.tf2xla.HostComputeMetadata
	(*xla.ProgramShapeProto)(nil),                                    // 24: xla.ProgramShapeProto
	(*xla.DebugOptions)(nil),                                         // 25: xla.DebugOptions
	(*service.HloSnapshot)(nil),                                      // 26: xla.HloSnapshot
	(*xla.LiteralProto)(nil),                                         // 27: xla.LiteralProto
}
var file_tensorflow_compiler_xrt_xrt_proto_depIdxs = []int32{
	16, // 0: xrt.DeviceAssignment.computation_devices:type_name -> xrt.DeviceAssignment.ComputationDevice
	23, // 1: xrt.XLAComputationConfig.host_compute_metadata:type_name -> tensorflow.tf2xla.HostComputeMetadata
	24, // 2: xrt.XLAComputationConfig.program_shape:type_name -> xla.ProgramShapeProto
	24, // 3: xrt.XLAComputationConfig.per_core_program_shape:type_name -> xla.ProgramShapeProto
	1,  // 4: xrt.XLAComputationConfig.device_assignment:type_name -> xrt.DeviceAssignment
	25, // 5: xrt.XLAComputationConfig.debug_options:type_name -> xla.DebugOptions
	18, // 6: xrt.XLAComputationConfig.experimental:type_name -> xrt.XLAComputationConfig.Experimental
	2,  // 7: xrt.XLAComputation.config:type_name -> xrt.XLAComputationConfig
	26, // 8: xrt.XLAComputation.hlo_snapshot:type_name -> xla.HloSnapshot
	27, // 9: xrt.XLAAllocation.value:type_name -> xla.LiteralProto
	5,  // 10: xrt.XLATupleNode.tuples:type_name -> xrt.XLATupleNode
	6,  // 11: xrt.XRTExecutionConfig.common_config:type_name -> xrt.CommonExecutionConfig
	6,  // 12: xrt.XRTChainedExecuteConfig.common_config:type_name -> xrt.CommonExecutionConfig
	21, // 13: xrt.XRTChainedExecuteOp.outputs:type_name -> xrt.XRTChainedExecuteOp.Output
	20, // 14: xrt.XRTChainedExecuteOp.inputs:type_name -> xrt.XRTChainedExecuteOp.Input
	9,  // 15: xrt.XRTChainedExecutePlan.ops:type_name -> xrt.XRTChainedExecuteOp
	22, // 16: xrt.Percentiles.points:type_name -> xrt.Percentiles.Point
	12, // 17: xrt.MetricValues.percentiles_value:type_name -> xrt.Percentiles
	0,  // 18: xrt.MetricValues.unit_of_measure:type_name -> xrt.MetricValues.UnitOfMeasure
	13, // 19: xrt.MetricsReport.metrics:type_name -> xrt.MetricValues
	17, // 20: xrt.DeviceAssignment.ComputationDevice.replica_devices:type_name -> xrt.DeviceAssignment.ComputationDevice.DeviceMeshCoordinates
	19, // 21: xrt.XLAComputationConfig.Experimental.stateful_input_indices:type_name -> xrt.XLAComputationConfig.Experimental.UpdateIndexPair
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_tensorflow_compiler_xrt_xrt_proto_init() }
func file_tensorflow_compiler_xrt_xrt_proto_init() {
	if File_tensorflow_compiler_xrt_xrt_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tensorflow_compiler_xrt_xrt_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceAssignment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_xrt_xrt_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XLAComputationConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_xrt_xrt_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XLAComputation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_xrt_xrt_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XLAAllocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_xrt_xrt_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XLATupleNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_xrt_xrt_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonExecutionConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_xrt_xrt_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XRTExecutionConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_xrt_xrt_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XRTChainedExecuteConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_xrt_xrt_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XRTChainedExecuteOp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_xrt_xrt_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XRTChainedExecutePlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_xrt_xrt_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XRTMetricsCollect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_xrt_xrt_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Percentiles); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_xrt_xrt_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricValues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_xrt_xrt_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetricsReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_xrt_xrt_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemoryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_xrt_xrt_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceAssignment_ComputationDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_xrt_xrt_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceAssignment_ComputationDevice_DeviceMeshCoordinates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_xrt_xrt_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XLAComputationConfig_Experimental); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_xrt_xrt_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XLAComputationConfig_Experimental_UpdateIndexPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_xrt_xrt_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XRTChainedExecuteOp_Input); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_xrt_xrt_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XRTChainedExecuteOp_Output); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_xrt_xrt_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Percentiles_Point); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_tensorflow_compiler_xrt_xrt_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*XRTChainedExecuteOp_DataHandle)(nil),
		(*XRTChainedExecuteOp_ComputationHandle)(nil),
	}
	file_tensorflow_compiler_xrt_xrt_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*MetricValues_PercentilesValue)(nil),
		(*MetricValues_Int64Value)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tensorflow_compiler_xrt_xrt_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tensorflow_compiler_xrt_xrt_proto_goTypes,
		DependencyIndexes: file_tensorflow_compiler_xrt_xrt_proto_depIdxs,
		EnumInfos:         file_tensorflow_compiler_xrt_xrt_proto_enumTypes,
		MessageInfos:      file_tensorflow_compiler_xrt_xrt_proto_msgTypes,
	}.Build()
	File_tensorflow_compiler_xrt_xrt_proto = out.File
	file_tensorflow_compiler_xrt_xrt_proto_rawDesc = nil
	file_tensorflow_compiler_xrt_xrt_proto_goTypes = nil
	file_tensorflow_compiler_xrt_xrt_proto_depIdxs = nil
}
