// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: tensorflow/compiler/tf2xla/tf2xla.proto

package tf2xla

import (
	framework "gitee.com/qciip-icp/tf-serving/tensorflow/core/framework"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// TensorId identifies a tensor in a TensorFlow graph, by specifying the output
// index of a particular node in the graph.  If the output of the named node
// feeds into other node(s), this corresponds to one or more edges.  Otherwise
// it doesn't correspond to any existing edges at all, e.g. for output nodes.
type TensorId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeName    string `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	OutputIndex int64  `protobuf:"varint,2,opt,name=output_index,json=outputIndex,proto3" json:"output_index,omitempty"`
}

func (x *TensorId) Reset() {
	*x = TensorId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_tf2xla_tf2xla_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TensorId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TensorId) ProtoMessage() {}

func (x *TensorId) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_tf2xla_tf2xla_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TensorId.ProtoReflect.Descriptor instead.
func (*TensorId) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_tf2xla_tf2xla_proto_rawDescGZIP(), []int{0}
}

func (x *TensorId) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *TensorId) GetOutputIndex() int64 {
	if x != nil {
		return x.OutputIndex
	}
	return 0
}

// Feed represents a single feed tensor in the graph, which corresponds to an
// input argument for the generated computation.
type Feed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    *TensorId                   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Shape *framework.TensorShapeProto `protobuf:"bytes,2,opt,name=shape,proto3" json:"shape,omitempty"`
	Name  string                      `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"` // Optional name for generated code.
	// Optional data type. This is not normally required, as the graph itself
	// contains this information. However, if the node being fed is an op that is
	// not linked into the binary, then the type cannot be inferred from the node;
	// in this case, the type should be set here.
	Type framework.DataType `protobuf:"varint,4,opt,name=type,proto3,enum=tensorflow.DataType" json:"type,omitempty"`
}

func (x *Feed) Reset() {
	*x = Feed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_tf2xla_tf2xla_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Feed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Feed) ProtoMessage() {}

func (x *Feed) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_tf2xla_tf2xla_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Feed.ProtoReflect.Descriptor instead.
func (*Feed) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_tf2xla_tf2xla_proto_rawDescGZIP(), []int{1}
}

func (x *Feed) GetId() *TensorId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Feed) GetShape() *framework.TensorShapeProto {
	if x != nil {
		return x.Shape
	}
	return nil
}

func (x *Feed) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Feed) GetType() framework.DataType {
	if x != nil {
		return x.Type
	}
	return framework.DataType(0)
}

// Fetch represents a single fetch tensor in the graph, which corresponds to an
// output argument for the generated computation.
type Fetch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   *TensorId `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"` // Optional name for generated code.
	// Optional shape and data type. If specified, may be used for validation.
	Shape *framework.TensorShapeProto `protobuf:"bytes,3,opt,name=shape,proto3" json:"shape,omitempty"`
	Type  framework.DataType          `protobuf:"varint,4,opt,name=type,proto3,enum=tensorflow.DataType" json:"type,omitempty"`
}

func (x *Fetch) Reset() {
	*x = Fetch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_tf2xla_tf2xla_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fetch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fetch) ProtoMessage() {}

func (x *Fetch) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_tf2xla_tf2xla_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fetch.ProtoReflect.Descriptor instead.
func (*Fetch) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_tf2xla_tf2xla_proto_rawDescGZIP(), []int{2}
}

func (x *Fetch) GetId() *TensorId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Fetch) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Fetch) GetShape() *framework.TensorShapeProto {
	if x != nil {
		return x.Shape
	}
	return nil
}

func (x *Fetch) GetType() framework.DataType {
	if x != nil {
		return x.Type
	}
	return framework.DataType(0)
}

// Variable represents a resource variable with the given name, shape and type.
type Variable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeName string                      `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	Name     string                      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"` // Optional name for generated code. If empty, node_name will be used.
	Shape    *framework.TensorShapeProto `protobuf:"bytes,3,opt,name=shape,proto3" json:"shape,omitempty"`
	Type     framework.DataType          `protobuf:"varint,4,opt,name=type,proto3,enum=tensorflow.DataType" json:"type,omitempty"`
	// Flag for variables that are never assigned. Assignments to a read-only
	// variable or unassigned variables that are not read-only are invalid.
	Readonly bool `protobuf:"varint,5,opt,name=readonly,proto3" json:"readonly,omitempty"`
}

func (x *Variable) Reset() {
	*x = Variable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_tf2xla_tf2xla_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Variable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Variable) ProtoMessage() {}

func (x *Variable) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_tf2xla_tf2xla_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Variable.ProtoReflect.Descriptor instead.
func (*Variable) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_tf2xla_tf2xla_proto_rawDescGZIP(), []int{3}
}

func (x *Variable) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *Variable) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Variable) GetShape() *framework.TensorShapeProto {
	if x != nil {
		return x.Shape
	}
	return nil
}

func (x *Variable) GetType() framework.DataType {
	if x != nil {
		return x.Type
	}
	return framework.DataType(0)
}

func (x *Variable) GetReadonly() bool {
	if x != nil {
		return x.Readonly
	}
	return false
}

// Config represents configuration information for tf2xla conversion.
type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Each feed is a positional input argument for the generated computation.
	// The order of each entry matches the order of each input argument.
	Feed []*Feed `protobuf:"bytes,1,rep,name=feed,proto3" json:"feed,omitempty"`
	// Each fetch is a positional output argument for the generated computation.
	// The order of each entry matches the order of each output argument.
	Fetch []*Fetch `protobuf:"bytes,2,rep,name=fetch,proto3" json:"fetch,omitempty"`
	// Each variable is a named input and output of the generated computation.
	Variable []*Variable `protobuf:"bytes,3,rep,name=variable,proto3" json:"variable,omitempty"`
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_compiler_tf2xla_tf2xla_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_compiler_tf2xla_tf2xla_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_tensorflow_compiler_tf2xla_tf2xla_proto_rawDescGZIP(), []int{4}
}

func (x *Config) GetFeed() []*Feed {
	if x != nil {
		return x.Feed
	}
	return nil
}

func (x *Config) GetFetch() []*Fetch {
	if x != nil {
		return x.Fetch
	}
	return nil
}

func (x *Config) GetVariable() []*Variable {
	if x != nil {
		return x.Variable
	}
	return nil
}

var File_tensorflow_compiler_tf2xla_tf2xla_proto protoreflect.FileDescriptor

var file_tensorflow_compiler_tf2xla_tf2xla_proto_rawDesc = []byte{
	0x0a, 0x27, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x6d,
	0x70, 0x69, 0x6c, 0x65, 0x72, 0x2f, 0x74, 0x66, 0x32, 0x78, 0x6c, 0x61, 0x2f, 0x74, 0x66, 0x32,
	0x78, 0x6c, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x74, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x74, 0x66, 0x32, 0x78, 0x6c, 0x61, 0x1a, 0x2c, 0x74, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x73,
	0x68, 0x61, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x74, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x4a, 0x0a, 0x08, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xa5, 0x01,
	0x0a, 0x04, 0x46, 0x65, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x74, 0x66, 0x32, 0x78, 0x6c, 0x61, 0x2e, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x53, 0x68, 0x61, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x05, 0x73, 0x68, 0x61, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x74, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xa6, 0x01, 0x0a, 0x05, 0x46, 0x65, 0x74, 0x63, 0x68, 0x12,
	0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x74, 0x66, 0x32, 0x78, 0x6c, 0x61, 0x2e,
	0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x32, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x54, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x53, 0x68, 0x61, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x05, 0x73,
	0x68, 0x61, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x14, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xb5,
	0x01, 0x0a, 0x08, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x05,
	0x73, 0x68, 0x61, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x53,
	0x68, 0x61, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x05, 0x73, 0x68, 0x61, 0x70, 0x65,
	0x12, 0x28, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14,
	0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65,
	0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65,
	0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x22, 0x9e, 0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x2b, 0x0a, 0x04, 0x66, 0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x74, 0x66, 0x32,
	0x78, 0x6c, 0x61, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x52, 0x04, 0x66, 0x65, 0x65, 0x64, 0x12, 0x2e,
	0x0a, 0x05, 0x66, 0x65, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x74, 0x66, 0x32, 0x78, 0x6c,
	0x61, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x05, 0x66, 0x65, 0x74, 0x63, 0x68, 0x12, 0x37,
	0x0a, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x74, 0x66,
	0x32, 0x78, 0x6c, 0x61, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x08, 0x76,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x42, 0xc9, 0x01, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x2e,
	0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x74, 0x66, 0x32, 0x78, 0x6c,
	0x61, 0x42, 0x0b, 0x54, 0x66, 0x32, 0x78, 0x6c, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x02,
	0x50, 0x01, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x65, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x71, 0x63,
	0x69, 0x69, 0x70, 0x2d, 0x69, 0x63, 0x70, 0x2f, 0x74, 0x66, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x6e, 0x67, 0x2f, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f,
	0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x2f, 0x74, 0x66, 0x32, 0x78, 0x6c, 0x61, 0xf8, 0x01, 0x01,
	0xa2, 0x02, 0x03, 0x54, 0x54, 0x58, 0xaa, 0x02, 0x11, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x54, 0x66, 0x32, 0x78, 0x6c, 0x61, 0xca, 0x02, 0x11, 0x54, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5c, 0x54, 0x66, 0x32, 0x78, 0x6c, 0x61, 0xe2, 0x02,
	0x1d, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5c, 0x54, 0x66, 0x32, 0x78,
	0x6c, 0x61, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
	0x12, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x3a, 0x3a, 0x54, 0x66, 0x32,
	0x78, 0x6c, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tensorflow_compiler_tf2xla_tf2xla_proto_rawDescOnce sync.Once
	file_tensorflow_compiler_tf2xla_tf2xla_proto_rawDescData = file_tensorflow_compiler_tf2xla_tf2xla_proto_rawDesc
)

func file_tensorflow_compiler_tf2xla_tf2xla_proto_rawDescGZIP() []byte {
	file_tensorflow_compiler_tf2xla_tf2xla_proto_rawDescOnce.Do(func() {
		file_tensorflow_compiler_tf2xla_tf2xla_proto_rawDescData = protoimpl.X.CompressGZIP(file_tensorflow_compiler_tf2xla_tf2xla_proto_rawDescData)
	})
	return file_tensorflow_compiler_tf2xla_tf2xla_proto_rawDescData
}

var file_tensorflow_compiler_tf2xla_tf2xla_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_tensorflow_compiler_tf2xla_tf2xla_proto_goTypes = []interface{}{
	(*TensorId)(nil),                   // 0: tensorflow.tf2xla.TensorId
	(*Feed)(nil),                       // 1: tensorflow.tf2xla.Feed
	(*Fetch)(nil),                      // 2: tensorflow.tf2xla.Fetch
	(*Variable)(nil),                   // 3: tensorflow.tf2xla.Variable
	(*Config)(nil),                     // 4: tensorflow.tf2xla.Config
	(*framework.TensorShapeProto)(nil), // 5: tensorflow.TensorShapeProto
	(framework.DataType)(0),            // 6: tensorflow.DataType
}
var file_tensorflow_compiler_tf2xla_tf2xla_proto_depIdxs = []int32{
	0,  // 0: tensorflow.tf2xla.Feed.id:type_name -> tensorflow.tf2xla.TensorId
	5,  // 1: tensorflow.tf2xla.Feed.shape:type_name -> tensorflow.TensorShapeProto
	6,  // 2: tensorflow.tf2xla.Feed.type:type_name -> tensorflow.DataType
	0,  // 3: tensorflow.tf2xla.Fetch.id:type_name -> tensorflow.tf2xla.TensorId
	5,  // 4: tensorflow.tf2xla.Fetch.shape:type_name -> tensorflow.TensorShapeProto
	6,  // 5: tensorflow.tf2xla.Fetch.type:type_name -> tensorflow.DataType
	5,  // 6: tensorflow.tf2xla.Variable.shape:type_name -> tensorflow.TensorShapeProto
	6,  // 7: tensorflow.tf2xla.Variable.type:type_name -> tensorflow.DataType
	1,  // 8: tensorflow.tf2xla.Config.feed:type_name -> tensorflow.tf2xla.Feed
	2,  // 9: tensorflow.tf2xla.Config.fetch:type_name -> tensorflow.tf2xla.Fetch
	3,  // 10: tensorflow.tf2xla.Config.variable:type_name -> tensorflow.tf2xla.Variable
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_tensorflow_compiler_tf2xla_tf2xla_proto_init() }
func file_tensorflow_compiler_tf2xla_tf2xla_proto_init() {
	if File_tensorflow_compiler_tf2xla_tf2xla_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tensorflow_compiler_tf2xla_tf2xla_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TensorId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_tf2xla_tf2xla_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Feed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_tf2xla_tf2xla_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fetch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_tf2xla_tf2xla_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Variable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_compiler_tf2xla_tf2xla_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tensorflow_compiler_tf2xla_tf2xla_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tensorflow_compiler_tf2xla_tf2xla_proto_goTypes,
		DependencyIndexes: file_tensorflow_compiler_tf2xla_tf2xla_proto_depIdxs,
		MessageInfos:      file_tensorflow_compiler_tf2xla_tf2xla_proto_msgTypes,
	}.Build()
	File_tensorflow_compiler_tf2xla_tf2xla_proto = out.File
	file_tensorflow_compiler_tf2xla_tf2xla_proto_rawDesc = nil
	file_tensorflow_compiler_tf2xla_tf2xla_proto_goTypes = nil
	file_tensorflow_compiler_tf2xla_tf2xla_proto_depIdxs = nil
}
