// Copyright 2020 The TensorFlow Authors. All Rights Reserved.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//==============================================================================

// This file is a copy of the TensorBoard ProjectorConfig proto.
// Keep this file in sync with the source proto definition at
// https://github.com/tensorflow/tensorboard/blob/master/tensorboard/plugins/projector/projector_config.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: tensorflow/python/keras/protobuf/projector_config.proto

package protobuf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SpriteMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImagePath string `protobuf:"bytes,1,opt,name=image_path,json=imagePath,proto3" json:"image_path,omitempty"`
	// [width, height] of a single image in the sprite.
	SingleImageDim []uint32 `protobuf:"varint,2,rep,packed,name=single_image_dim,json=singleImageDim,proto3" json:"single_image_dim,omitempty"`
}

func (x *SpriteMetadata) Reset() {
	*x = SpriteMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_python_keras_protobuf_projector_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpriteMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpriteMetadata) ProtoMessage() {}

func (x *SpriteMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_python_keras_protobuf_projector_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpriteMetadata.ProtoReflect.Descriptor instead.
func (*SpriteMetadata) Descriptor() ([]byte, []int) {
	return file_tensorflow_python_keras_protobuf_projector_config_proto_rawDescGZIP(), []int{0}
}

func (x *SpriteMetadata) GetImagePath() string {
	if x != nil {
		return x.ImagePath
	}
	return ""
}

func (x *SpriteMetadata) GetSingleImageDim() []uint32 {
	if x != nil {
		return x.SingleImageDim
	}
	return nil
}

type EmbeddingInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TensorName    string `protobuf:"bytes,1,opt,name=tensor_name,json=tensorName,proto3" json:"tensor_name,omitempty"`
	MetadataPath  string `protobuf:"bytes,2,opt,name=metadata_path,json=metadataPath,proto3" json:"metadata_path,omitempty"`
	BookmarksPath string `protobuf:"bytes,3,opt,name=bookmarks_path,json=bookmarksPath,proto3" json:"bookmarks_path,omitempty"`
	// Shape of the 2D tensor [N x D]. If missing, it will be inferred from the
	// model checkpoint.
	TensorShape []uint32        `protobuf:"varint,4,rep,packed,name=tensor_shape,json=tensorShape,proto3" json:"tensor_shape,omitempty"`
	Sprite      *SpriteMetadata `protobuf:"bytes,5,opt,name=sprite,proto3" json:"sprite,omitempty"`
	// Path to the TSV file holding the tensor values. If missing, the tensor
	// is assumed to be stored in the model checkpoint.
	TensorPath string `protobuf:"bytes,6,opt,name=tensor_path,json=tensorPath,proto3" json:"tensor_path,omitempty"`
}

func (x *EmbeddingInfo) Reset() {
	*x = EmbeddingInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_python_keras_protobuf_projector_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmbeddingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmbeddingInfo) ProtoMessage() {}

func (x *EmbeddingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_python_keras_protobuf_projector_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmbeddingInfo.ProtoReflect.Descriptor instead.
func (*EmbeddingInfo) Descriptor() ([]byte, []int) {
	return file_tensorflow_python_keras_protobuf_projector_config_proto_rawDescGZIP(), []int{1}
}

func (x *EmbeddingInfo) GetTensorName() string {
	if x != nil {
		return x.TensorName
	}
	return ""
}

func (x *EmbeddingInfo) GetMetadataPath() string {
	if x != nil {
		return x.MetadataPath
	}
	return ""
}

func (x *EmbeddingInfo) GetBookmarksPath() string {
	if x != nil {
		return x.BookmarksPath
	}
	return ""
}

func (x *EmbeddingInfo) GetTensorShape() []uint32 {
	if x != nil {
		return x.TensorShape
	}
	return nil
}

func (x *EmbeddingInfo) GetSprite() *SpriteMetadata {
	if x != nil {
		return x.Sprite
	}
	return nil
}

func (x *EmbeddingInfo) GetTensorPath() string {
	if x != nil {
		return x.TensorPath
	}
	return ""
}

type ProjectorConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Path to the checkpoint file. Use either this or model_checkpoint_dir.
	ModelCheckpointPath string           `protobuf:"bytes,1,opt,name=model_checkpoint_path,json=modelCheckpointPath,proto3" json:"model_checkpoint_path,omitempty"`
	Embeddings          []*EmbeddingInfo `protobuf:"bytes,2,rep,name=embeddings,proto3" json:"embeddings,omitempty"`
	// Path to the checkpoint directory. The directory will be scanned for the
	// latest checkpoint file.
	ModelCheckpointDir string `protobuf:"bytes,3,opt,name=model_checkpoint_dir,json=modelCheckpointDir,proto3" json:"model_checkpoint_dir,omitempty"`
}

func (x *ProjectorConfig) Reset() {
	*x = ProjectorConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_python_keras_protobuf_projector_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectorConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectorConfig) ProtoMessage() {}

func (x *ProjectorConfig) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_python_keras_protobuf_projector_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectorConfig.ProtoReflect.Descriptor instead.
func (*ProjectorConfig) Descriptor() ([]byte, []int) {
	return file_tensorflow_python_keras_protobuf_projector_config_proto_rawDescGZIP(), []int{2}
}

func (x *ProjectorConfig) GetModelCheckpointPath() string {
	if x != nil {
		return x.ModelCheckpointPath
	}
	return ""
}

func (x *ProjectorConfig) GetEmbeddings() []*EmbeddingInfo {
	if x != nil {
		return x.Embeddings
	}
	return nil
}

func (x *ProjectorConfig) GetModelCheckpointDir() string {
	if x != nil {
		return x.ModelCheckpointDir
	}
	return ""
}

var File_tensorflow_python_keras_protobuf_projector_config_proto protoreflect.FileDescriptor

var file_tensorflow_python_keras_protobuf_projector_config_proto_rawDesc = []byte{
	0x0a, 0x37, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x70, 0x79, 0x74,
	0x68, 0x6f, 0x6e, 0x2f, 0x6b, 0x65, 0x72, 0x61, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2c, 0x74, 0x68, 0x69, 0x72, 0x64,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x65, 0x72, 0x61, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x22, 0x59, 0x0a, 0x0e, 0x53, 0x70, 0x72, 0x69, 0x74,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x69, 0x6d, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x0e, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44,
	0x69, 0x6d, 0x22, 0x96, 0x02, 0x0a, 0x0d, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x61, 0x74, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x6f,
	0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x73, 0x68, 0x61, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x53,
	0x68, 0x61, 0x70, 0x65, 0x12, 0x54, 0x0a, 0x06, 0x73, 0x70, 0x72, 0x69, 0x74, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x79,
	0x74, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x65, 0x72, 0x61, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x70, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x06, 0x73, 0x70, 0x72, 0x69, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x50, 0x61, 0x74, 0x68, 0x22, 0xd4, 0x01, 0x0a, 0x0f,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x32, 0x0a, 0x15, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x5b, 0x0a, 0x0a, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x65, 0x72, 0x61, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x30, 0x0a, 0x14, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x44,
	0x69, 0x72, 0x42, 0xdd, 0x02, 0x0a, 0x30, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x68, 0x69, 0x72, 0x64,
	0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2e, 0x6b, 0x65, 0x72, 0x61, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x42, 0x14, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x02, 0x50,
	0x01, 0x5a, 0x3f, 0x67, 0x69, 0x74, 0x65, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x71, 0x63, 0x69,
	0x69, 0x70, 0x2d, 0x69, 0x63, 0x70, 0x2f, 0x74, 0x66, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e,
	0x67, 0x2f, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x70, 0x79, 0x74,
	0x68, 0x6f, 0x6e, 0x2f, 0x6b, 0x65, 0x72, 0x61, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0xa2, 0x02, 0x05, 0x54, 0x54, 0x50, 0x4b, 0x50, 0xaa, 0x02, 0x2b, 0x54, 0x68, 0x69,
	0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x2e, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2e, 0x4b, 0x65, 0x72, 0x61, 0x73, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0xca, 0x02, 0x2b, 0x54, 0x68, 0x69, 0x72, 0x64,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x5c, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77,
	0x5c, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x5c, 0x4b, 0x65, 0x72, 0x61, 0x73, 0x5c, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0xe2, 0x02, 0x37, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x5c, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5c, 0x50,
	0x79, 0x74, 0x68, 0x6f, 0x6e, 0x5c, 0x4b, 0x65, 0x72, 0x61, 0x73, 0x5c, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0xea, 0x02, 0x2f, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x3a, 0x3a, 0x54,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x3a, 0x3a, 0x50, 0x79, 0x74, 0x68, 0x6f,
	0x6e, 0x3a, 0x3a, 0x4b, 0x65, 0x72, 0x61, 0x73, 0x3a, 0x3a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tensorflow_python_keras_protobuf_projector_config_proto_rawDescOnce sync.Once
	file_tensorflow_python_keras_protobuf_projector_config_proto_rawDescData = file_tensorflow_python_keras_protobuf_projector_config_proto_rawDesc
)

func file_tensorflow_python_keras_protobuf_projector_config_proto_rawDescGZIP() []byte {
	file_tensorflow_python_keras_protobuf_projector_config_proto_rawDescOnce.Do(func() {
		file_tensorflow_python_keras_protobuf_projector_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_tensorflow_python_keras_protobuf_projector_config_proto_rawDescData)
	})
	return file_tensorflow_python_keras_protobuf_projector_config_proto_rawDescData
}

var file_tensorflow_python_keras_protobuf_projector_config_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_tensorflow_python_keras_protobuf_projector_config_proto_goTypes = []interface{}{
	(*SpriteMetadata)(nil),  // 0: third_party.tensorflow.python.keras.protobuf.SpriteMetadata
	(*EmbeddingInfo)(nil),   // 1: third_party.tensorflow.python.keras.protobuf.EmbeddingInfo
	(*ProjectorConfig)(nil), // 2: third_party.tensorflow.python.keras.protobuf.ProjectorConfig
}
var file_tensorflow_python_keras_protobuf_projector_config_proto_depIdxs = []int32{
	0, // 0: third_party.tensorflow.python.keras.protobuf.EmbeddingInfo.sprite:type_name -> third_party.tensorflow.python.keras.protobuf.SpriteMetadata
	1, // 1: third_party.tensorflow.python.keras.protobuf.ProjectorConfig.embeddings:type_name -> third_party.tensorflow.python.keras.protobuf.EmbeddingInfo
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_tensorflow_python_keras_protobuf_projector_config_proto_init() }
func file_tensorflow_python_keras_protobuf_projector_config_proto_init() {
	if File_tensorflow_python_keras_protobuf_projector_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tensorflow_python_keras_protobuf_projector_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpriteMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_python_keras_protobuf_projector_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmbeddingInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_python_keras_protobuf_projector_config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectorConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tensorflow_python_keras_protobuf_projector_config_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tensorflow_python_keras_protobuf_projector_config_proto_goTypes,
		DependencyIndexes: file_tensorflow_python_keras_protobuf_projector_config_proto_depIdxs,
		MessageInfos:      file_tensorflow_python_keras_protobuf_projector_config_proto_msgTypes,
	}.Build()
	File_tensorflow_python_keras_protobuf_projector_config_proto = out.File
	file_tensorflow_python_keras_protobuf_projector_config_proto_rawDesc = nil
	file_tensorflow_python_keras_protobuf_projector_config_proto_goTypes = nil
	file_tensorflow_python_keras_protobuf_projector_config_proto_depIdxs = nil
}
