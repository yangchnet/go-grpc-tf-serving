// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: tensorflow/python/tpu/tensor_tracer.proto

package tpu

import (
	framework "github.com/yangchnet/tf-serving/tensorflow/core/framework"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Tensor Tracer Report proto gives information about the trace including:
// - TensorTracerConfig: version, device, num replicas, trace mode.
// - Graphdef, e.g., list of operations, tensors
// - TracedTensorDef:
//   - Name of the tensor
//   - Tracepoint name if provided.
//   - Index of the tensor in the compact cache if traced.
//   - Explanation for why the tensor is traced or not.
type TensorTracerReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *TensorTracerReport_TensorTracerConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
	// Tensorflow graph.
	Graphdef *framework.GraphDef `protobuf:"bytes,2,opt,name=graphdef,proto3" json:"graphdef,omitempty"`
	// A map from tensor name to its TracedTensorDef.
	Tensordef map[string]*TensorTracerReport_TracedTensorDef `protobuf:"bytes,3,rep,name=tensordef,proto3" json:"tensordef,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The fingerprint of the TensorTracerReport (fingerprint calculation excludes
	// this field and graphdef).
	Fingerprint string `protobuf:"bytes,4,opt,name=fingerprint,proto3" json:"fingerprint,omitempty"`
	// The function_name passed to the function_callback
	// that produced this TensorTracerReport
	ConcreteFunctionName string `protobuf:"bytes,5,opt,name=concrete_function_name,json=concreteFunctionName,proto3" json:"concrete_function_name,omitempty"`
	// The index of the last stack frame where the stack traces for all output
	// operations in the graph have the same value.
	LastCommonFrameNo int32 `protobuf:"varint,6,opt,name=last_common_frame_no,json=lastCommonFrameNo,proto3" json:"last_common_frame_no,omitempty"`
	// List of names of output tensors of the function being traced.
	Outputs []string `protobuf:"bytes,7,rep,name=outputs,proto3" json:"outputs,omitempty"`
	// Information about the number of tensors traced and skipped.
	TracingStats *TensorTracerReport_TracingStats `protobuf:"bytes,8,opt,name=tracing_stats,json=tracingStats,proto3" json:"tracing_stats,omitempty"`
}

func (x *TensorTracerReport) Reset() {
	*x = TensorTracerReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_python_tpu_tensor_tracer_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TensorTracerReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TensorTracerReport) ProtoMessage() {}

func (x *TensorTracerReport) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_python_tpu_tensor_tracer_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TensorTracerReport.ProtoReflect.Descriptor instead.
func (*TensorTracerReport) Descriptor() ([]byte, []int) {
	return file_tensorflow_python_tpu_tensor_tracer_proto_rawDescGZIP(), []int{0}
}

func (x *TensorTracerReport) GetConfig() *TensorTracerReport_TensorTracerConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *TensorTracerReport) GetGraphdef() *framework.GraphDef {
	if x != nil {
		return x.Graphdef
	}
	return nil
}

func (x *TensorTracerReport) GetTensordef() map[string]*TensorTracerReport_TracedTensorDef {
	if x != nil {
		return x.Tensordef
	}
	return nil
}

func (x *TensorTracerReport) GetFingerprint() string {
	if x != nil {
		return x.Fingerprint
	}
	return ""
}

func (x *TensorTracerReport) GetConcreteFunctionName() string {
	if x != nil {
		return x.ConcreteFunctionName
	}
	return ""
}

func (x *TensorTracerReport) GetLastCommonFrameNo() int32 {
	if x != nil {
		return x.LastCommonFrameNo
	}
	return 0
}

func (x *TensorTracerReport) GetOutputs() []string {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *TensorTracerReport) GetTracingStats() *TensorTracerReport_TracingStats {
	if x != nil {
		return x.TracingStats
	}
	return nil
}

type TensorTracerReport_TensorTracerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Tensor tracer version, e.g. hostcall, outside compilation.
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// Traced device, CPU, TPU...
	Device string `protobuf:"bytes,2,opt,name=device,proto3" json:"device,omitempty"`
	// Trace mode, norm, summary, full-trace.
	TraceMode string `protobuf:"bytes,3,opt,name=trace_mode,json=traceMode,proto3" json:"trace_mode,omitempty"`
	// Number of cores, e.g. TPU cores, in the system.
	NumCores int32 `protobuf:"varint,4,opt,name=num_cores,json=numCores,proto3" json:"num_cores,omitempty"`
	// Number of hosts, e.g. compute nodes in the system.
	NumHosts int32 `protobuf:"varint,5,opt,name=num_hosts,json=numHosts,proto3" json:"num_hosts,omitempty"`
	// Keep submode as string for backward compatibility.
	Submode string `protobuf:"bytes,6,opt,name=submode,proto3" json:"submode,omitempty"`
	// Keep num cores per host for backward compatibility.
	NumCoresPerHost int32 `protobuf:"varint,7,opt,name=num_cores_per_host,json=numCoresPerHost,proto3" json:"num_cores_per_host,omitempty"`
	// Id of the included cores, if a subset of cores are traced.
	IncludedCores []int32 `protobuf:"varint,8,rep,packed,name=included_cores,json=includedCores,proto3" json:"included_cores,omitempty"`
	// The names of the signatures corresponding to the cache indices.
	Signatures []string `protobuf:"bytes,9,rep,name=signatures,proto3" json:"signatures,omitempty"`
}

func (x *TensorTracerReport_TensorTracerConfig) Reset() {
	*x = TensorTracerReport_TensorTracerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_python_tpu_tensor_tracer_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TensorTracerReport_TensorTracerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TensorTracerReport_TensorTracerConfig) ProtoMessage() {}

func (x *TensorTracerReport_TensorTracerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_python_tpu_tensor_tracer_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TensorTracerReport_TensorTracerConfig.ProtoReflect.Descriptor instead.
func (*TensorTracerReport_TensorTracerConfig) Descriptor() ([]byte, []int) {
	return file_tensorflow_python_tpu_tensor_tracer_proto_rawDescGZIP(), []int{0, 1}
}

func (x *TensorTracerReport_TensorTracerConfig) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *TensorTracerReport_TensorTracerConfig) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *TensorTracerReport_TensorTracerConfig) GetTraceMode() string {
	if x != nil {
		return x.TraceMode
	}
	return ""
}

func (x *TensorTracerReport_TensorTracerConfig) GetNumCores() int32 {
	if x != nil {
		return x.NumCores
	}
	return 0
}

func (x *TensorTracerReport_TensorTracerConfig) GetNumHosts() int32 {
	if x != nil {
		return x.NumHosts
	}
	return 0
}

func (x *TensorTracerReport_TensorTracerConfig) GetSubmode() string {
	if x != nil {
		return x.Submode
	}
	return ""
}

func (x *TensorTracerReport_TensorTracerConfig) GetNumCoresPerHost() int32 {
	if x != nil {
		return x.NumCoresPerHost
	}
	return 0
}

func (x *TensorTracerReport_TensorTracerConfig) GetIncludedCores() []int32 {
	if x != nil {
		return x.IncludedCores
	}
	return nil
}

func (x *TensorTracerReport_TensorTracerConfig) GetSignatures() []string {
	if x != nil {
		return x.Signatures
	}
	return nil
}

type TensorTracerReport_TracingStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The total number of tensors in the function.
	TotalTensors int32 `protobuf:"varint,1,opt,name=total_tensors,json=totalTensors,proto3" json:"total_tensors,omitempty"`
	// The number of traced tensors in the function.
	TracedTensors int32 `protobuf:"varint,2,opt,name=traced_tensors,json=tracedTensors,proto3" json:"traced_tensors,omitempty"`
	// Counts of traced tensors by op type.
	TracedTensorTypes map[string]int32 `protobuf:"bytes,3,rep,name=traced_tensor_types,json=tracedTensorTypes,proto3" json:"traced_tensor_types,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// The number of tensors added by Tensor Tracer.
	AddedTensors int32 `protobuf:"varint,4,opt,name=added_tensors,json=addedTensors,proto3" json:"added_tensors,omitempty"`
}

func (x *TensorTracerReport_TracingStats) Reset() {
	*x = TensorTracerReport_TracingStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_python_tpu_tensor_tracer_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TensorTracerReport_TracingStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TensorTracerReport_TracingStats) ProtoMessage() {}

func (x *TensorTracerReport_TracingStats) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_python_tpu_tensor_tracer_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TensorTracerReport_TracingStats.ProtoReflect.Descriptor instead.
func (*TensorTracerReport_TracingStats) Descriptor() ([]byte, []int) {
	return file_tensorflow_python_tpu_tensor_tracer_proto_rawDescGZIP(), []int{0, 2}
}

func (x *TensorTracerReport_TracingStats) GetTotalTensors() int32 {
	if x != nil {
		return x.TotalTensors
	}
	return 0
}

func (x *TensorTracerReport_TracingStats) GetTracedTensors() int32 {
	if x != nil {
		return x.TracedTensors
	}
	return 0
}

func (x *TensorTracerReport_TracingStats) GetTracedTensorTypes() map[string]int32 {
	if x != nil {
		return x.TracedTensorTypes
	}
	return nil
}

func (x *TensorTracerReport_TracingStats) GetAddedTensors() int32 {
	if x != nil {
		return x.AddedTensors
	}
	return 0
}

type TensorTracerReport_TracedTensorDef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the tensor as appears in tf graph.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Cache index of the tensor. This may be different than topological index.
	CacheIndex int32 `protobuf:"varint,2,opt,name=cache_index,json=cacheIndex,proto3" json:"cache_index,omitempty"`
	// If trace points are provided, corresponding tracepoint name of the
	// tensor. Trace points are placed on the edges (tensors) in the tensorflow
	// graph, and they force tensor tracer to trace the corresponding tensor.
	// Tracepoints can be added using the programatic interface
	// tensor_tracer.tensor_tracepoint(tensor, trace_point_name) function.
	// This will add a trace point with the given trace_point_name for the given
	// tensor. If a trace_point is provided for the tensor,
	// trace_point name will be used for the rest of the analysis instead of
	// tensor names. One can use trace_point_name's to compare two models with
	// arbitrary tensor names by providing the same trace point name for the
	// tensors that are comparable.
	TracePointName string `protobuf:"bytes,3,opt,name=trace_point_name,json=tracePointName,proto3" json:"trace_point_name,omitempty"`
	// Whether the tensor is traced or not.
	IsTraced bool `protobuf:"varint,4,opt,name=is_traced,json=isTraced,proto3" json:"is_traced,omitempty"`
	// Detailed explanation why the tensor is traced or not.
	Explanation string `protobuf:"bytes,5,opt,name=explanation,proto3" json:"explanation,omitempty"`
	// Detailed stack of operation
	OpStackInfo *TensorTracerReport_TracedTensorDef_Stack `protobuf:"bytes,6,opt,name=op_stack_info,json=opStackInfo,proto3" json:"op_stack_info,omitempty"`
}

func (x *TensorTracerReport_TracedTensorDef) Reset() {
	*x = TensorTracerReport_TracedTensorDef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_python_tpu_tensor_tracer_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TensorTracerReport_TracedTensorDef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TensorTracerReport_TracedTensorDef) ProtoMessage() {}

func (x *TensorTracerReport_TracedTensorDef) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_python_tpu_tensor_tracer_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TensorTracerReport_TracedTensorDef.ProtoReflect.Descriptor instead.
func (*TensorTracerReport_TracedTensorDef) Descriptor() ([]byte, []int) {
	return file_tensorflow_python_tpu_tensor_tracer_proto_rawDescGZIP(), []int{0, 3}
}

func (x *TensorTracerReport_TracedTensorDef) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TensorTracerReport_TracedTensorDef) GetCacheIndex() int32 {
	if x != nil {
		return x.CacheIndex
	}
	return 0
}

func (x *TensorTracerReport_TracedTensorDef) GetTracePointName() string {
	if x != nil {
		return x.TracePointName
	}
	return ""
}

func (x *TensorTracerReport_TracedTensorDef) GetIsTraced() bool {
	if x != nil {
		return x.IsTraced
	}
	return false
}

func (x *TensorTracerReport_TracedTensorDef) GetExplanation() string {
	if x != nil {
		return x.Explanation
	}
	return ""
}

func (x *TensorTracerReport_TracedTensorDef) GetOpStackInfo() *TensorTracerReport_TracedTensorDef_Stack {
	if x != nil {
		return x.OpStackInfo
	}
	return nil
}

type TensorTracerReport_TracedTensorDef_Stack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Function names from stack
	StackFnNames []string `protobuf:"bytes,1,rep,name=stack_fn_names,json=stackFnNames,proto3" json:"stack_fn_names,omitempty"`
	// Line in stack
	StackLines []string `protobuf:"bytes,2,rep,name=stack_lines,json=stackLines,proto3" json:"stack_lines,omitempty"`
	// Filenames from stack
	StackFilenames []string `protobuf:"bytes,3,rep,name=stack_filenames,json=stackFilenames,proto3" json:"stack_filenames,omitempty"`
	// Line number in file from stack
	StackLinenos []int32 `protobuf:"varint,4,rep,packed,name=stack_linenos,json=stackLinenos,proto3" json:"stack_linenos,omitempty"`
}

func (x *TensorTracerReport_TracedTensorDef_Stack) Reset() {
	*x = TensorTracerReport_TracedTensorDef_Stack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_python_tpu_tensor_tracer_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TensorTracerReport_TracedTensorDef_Stack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TensorTracerReport_TracedTensorDef_Stack) ProtoMessage() {}

func (x *TensorTracerReport_TracedTensorDef_Stack) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_python_tpu_tensor_tracer_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TensorTracerReport_TracedTensorDef_Stack.ProtoReflect.Descriptor instead.
func (*TensorTracerReport_TracedTensorDef_Stack) Descriptor() ([]byte, []int) {
	return file_tensorflow_python_tpu_tensor_tracer_proto_rawDescGZIP(), []int{0, 3, 0}
}

func (x *TensorTracerReport_TracedTensorDef_Stack) GetStackFnNames() []string {
	if x != nil {
		return x.StackFnNames
	}
	return nil
}

func (x *TensorTracerReport_TracedTensorDef_Stack) GetStackLines() []string {
	if x != nil {
		return x.StackLines
	}
	return nil
}

func (x *TensorTracerReport_TracedTensorDef_Stack) GetStackFilenames() []string {
	if x != nil {
		return x.StackFilenames
	}
	return nil
}

func (x *TensorTracerReport_TracedTensorDef_Stack) GetStackLinenos() []int32 {
	if x != nil {
		return x.StackLinenos
	}
	return nil
}

var File_tensorflow_python_tpu_tensor_tracer_proto protoreflect.FileDescriptor

var file_tensorflow_python_tpu_tensor_tracer_proto_rawDesc = []byte{
	0x0a, 0x29, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x70, 0x79, 0x74,
	0x68, 0x6f, 0x6e, 0x2f, 0x74, 0x70, 0x75, 0x2f, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x74, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x1a, 0x25, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66,
	0x6c, 0x6f, 0x77, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f,
	0x72, 0x6b, 0x2f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd8,
	0x0c, 0x0a, 0x12, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x54, 0x72, 0x61, 0x63, 0x65, 0x72, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x49, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x54, 0x72, 0x61, 0x63, 0x65, 0x72, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x30, 0x0a, 0x08, 0x67, 0x72, 0x61, 0x70, 0x68, 0x64, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x47, 0x72, 0x61, 0x70, 0x68, 0x44, 0x65, 0x66, 0x52, 0x08, 0x67, 0x72, 0x61, 0x70, 0x68, 0x64,
	0x65, 0x66, 0x12, 0x4b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x64, 0x65, 0x66, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x54, 0x72, 0x61, 0x63, 0x65, 0x72, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x64, 0x65, 0x66, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x64, 0x65, 0x66, 0x12,
	0x20, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e,
	0x74, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x63, 0x72, 0x65, 0x74, 0x65, 0x5f, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x63, 0x72, 0x65, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x6f, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x4e, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x73, 0x12, 0x50, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x74, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x1a, 0x6c, 0x0a, 0x0e, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x64, 0x65,
	0x66, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x44, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x64, 0x54, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x44, 0x65, 0x66, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0xad, 0x02, 0x0a, 0x12, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x74, 0x72, 0x61, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x75,
	0x6d, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6e,
	0x75, 0x6d, 0x43, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x5f, 0x68,
	0x6f, 0x73, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6e, 0x75, 0x6d, 0x48,
	0x6f, 0x73, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x2b,
	0x0a, 0x12, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f,
	0x68, 0x6f, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x43,
	0x6f, 0x72, 0x65, 0x73, 0x50, 0x65, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x69,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x43, 0x6f, 0x72,
	0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x1a, 0xb9, 0x02, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x64, 0x5f, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x74, 0x72, 0x61, 0x63, 0x65, 0x64, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x12,
	0x72, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x63, 0x65, 0x64, 0x5f, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x74,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x54, 0x72, 0x61, 0x63, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x54, 0x72, 0x61,
	0x63, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x64,
	0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x11, 0x74, 0x72, 0x61, 0x63, 0x65, 0x64, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x64, 0x64, 0x65, 0x64, 0x5f, 0x74, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61, 0x64, 0x64, 0x65,
	0x64, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x73, 0x1a, 0x44, 0x0a, 0x16, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x64, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xa8,
	0x03, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x63, 0x65, 0x64, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x44,
	0x65, 0x66, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x61, 0x63,
	0x68, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x63, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x54, 0x72, 0x61, 0x63, 0x65, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x6c, 0x61, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x58, 0x0a, 0x0d, 0x6f, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x64, 0x54, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x44, 0x65, 0x66, 0x2e, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x52, 0x0b, 0x6f,
	0x70, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x9c, 0x01, 0x0a, 0x05, 0x53,
	0x74, 0x61, 0x63, 0x6b, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x66, 0x6e,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x74,
	0x61, 0x63, 0x6b, 0x46, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74,
	0x61, 0x63, 0x6b, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x73,
	0x74, 0x61, 0x63, 0x6b, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x46, 0x69, 0x6c, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x6c, 0x69,
	0x6e, 0x65, 0x6e, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x4c, 0x69, 0x6e, 0x65, 0x6e, 0x6f, 0x73, 0x42, 0xa3, 0x01, 0x0a, 0x0e, 0x63, 0x6f,
	0x6d, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x42, 0x11, 0x54, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x54, 0x72, 0x61, 0x63, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48,
	0x02, 0x50, 0x01, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x65, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x71,
	0x63, 0x69, 0x69, 0x70, 0x2d, 0x69, 0x63, 0x70, 0x2f, 0x74, 0x66, 0x2d, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x6e, 0x67, 0x2f, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x70,
	0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x74, 0x70, 0x75, 0xa2, 0x02, 0x03, 0x54, 0x58, 0x58, 0xaa,
	0x02, 0x0a, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0xca, 0x02, 0x0a, 0x54,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0xe2, 0x02, 0x16, 0x54, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0xea, 0x02, 0x0a, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tensorflow_python_tpu_tensor_tracer_proto_rawDescOnce sync.Once
	file_tensorflow_python_tpu_tensor_tracer_proto_rawDescData = file_tensorflow_python_tpu_tensor_tracer_proto_rawDesc
)

func file_tensorflow_python_tpu_tensor_tracer_proto_rawDescGZIP() []byte {
	file_tensorflow_python_tpu_tensor_tracer_proto_rawDescOnce.Do(func() {
		file_tensorflow_python_tpu_tensor_tracer_proto_rawDescData = protoimpl.X.CompressGZIP(file_tensorflow_python_tpu_tensor_tracer_proto_rawDescData)
	})
	return file_tensorflow_python_tpu_tensor_tracer_proto_rawDescData
}

var file_tensorflow_python_tpu_tensor_tracer_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_tensorflow_python_tpu_tensor_tracer_proto_goTypes = []interface{}{
	(*TensorTracerReport)(nil), // 0: tensorflow.TensorTracerReport
	nil,                        // 1: tensorflow.TensorTracerReport.TensordefEntry
	(*TensorTracerReport_TensorTracerConfig)(nil), // 2: tensorflow.TensorTracerReport.TensorTracerConfig
	(*TensorTracerReport_TracingStats)(nil),       // 3: tensorflow.TensorTracerReport.TracingStats
	(*TensorTracerReport_TracedTensorDef)(nil),    // 4: tensorflow.TensorTracerReport.TracedTensorDef
	nil, // 5: tensorflow.TensorTracerReport.TracingStats.TracedTensorTypesEntry
	(*TensorTracerReport_TracedTensorDef_Stack)(nil), // 6: tensorflow.TensorTracerReport.TracedTensorDef.Stack
	(*framework.GraphDef)(nil),                       // 7: tensorflow.GraphDef
}
var file_tensorflow_python_tpu_tensor_tracer_proto_depIdxs = []int32{
	2, // 0: tensorflow.TensorTracerReport.config:type_name -> tensorflow.TensorTracerReport.TensorTracerConfig
	7, // 1: tensorflow.TensorTracerReport.graphdef:type_name -> tensorflow.GraphDef
	1, // 2: tensorflow.TensorTracerReport.tensordef:type_name -> tensorflow.TensorTracerReport.TensordefEntry
	3, // 3: tensorflow.TensorTracerReport.tracing_stats:type_name -> tensorflow.TensorTracerReport.TracingStats
	4, // 4: tensorflow.TensorTracerReport.TensordefEntry.value:type_name -> tensorflow.TensorTracerReport.TracedTensorDef
	5, // 5: tensorflow.TensorTracerReport.TracingStats.traced_tensor_types:type_name -> tensorflow.TensorTracerReport.TracingStats.TracedTensorTypesEntry
	6, // 6: tensorflow.TensorTracerReport.TracedTensorDef.op_stack_info:type_name -> tensorflow.TensorTracerReport.TracedTensorDef.Stack
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_tensorflow_python_tpu_tensor_tracer_proto_init() }
func file_tensorflow_python_tpu_tensor_tracer_proto_init() {
	if File_tensorflow_python_tpu_tensor_tracer_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tensorflow_python_tpu_tensor_tracer_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TensorTracerReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_python_tpu_tensor_tracer_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TensorTracerReport_TensorTracerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_python_tpu_tensor_tracer_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TensorTracerReport_TracingStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_python_tpu_tensor_tracer_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TensorTracerReport_TracedTensorDef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_python_tpu_tensor_tracer_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TensorTracerReport_TracedTensorDef_Stack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tensorflow_python_tpu_tensor_tracer_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tensorflow_python_tpu_tensor_tracer_proto_goTypes,
		DependencyIndexes: file_tensorflow_python_tpu_tensor_tracer_proto_depIdxs,
		MessageInfos:      file_tensorflow_python_tpu_tensor_tracer_proto_msgTypes,
	}.Build()
	File_tensorflow_python_tpu_tensor_tracer_proto = out.File
	file_tensorflow_python_tpu_tensor_tracer_proto_rawDesc = nil
	file_tensorflow_python_tpu_tensor_tracer_proto_goTypes = nil
	file_tensorflow_python_tpu_tensor_tracer_proto_depIdxs = nil
}
