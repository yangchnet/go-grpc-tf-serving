// Test description and protos to work with it.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: tensorflow/python/kernel_tests/proto/test_example.proto

package proto

import (
	framework "github.com/yangchnet/tf-serving/tensorflow/core/framework"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Color int32

const (
	Color_RED    Color = 0
	Color_ORANGE Color = 1
	Color_YELLOW Color = 2
	Color_GREEN  Color = 3
	Color_BLUE   Color = 4
	Color_INDIGO Color = 5
	Color_VIOLET Color = 6
)

// Enum value maps for Color.
var (
	Color_name = map[int32]string{
		0: "RED",
		1: "ORANGE",
		2: "YELLOW",
		3: "GREEN",
		4: "BLUE",
		5: "INDIGO",
		6: "VIOLET",
	}
	Color_value = map[string]int32{
		"RED":    0,
		"ORANGE": 1,
		"YELLOW": 2,
		"GREEN":  3,
		"BLUE":   4,
		"INDIGO": 5,
		"VIOLET": 6,
	}
)

func (x Color) Enum() *Color {
	p := new(Color)
	*p = x
	return p
}

func (x Color) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Color) Descriptor() protoreflect.EnumDescriptor {
	return file_tensorflow_python_kernel_tests_proto_test_example_proto_enumTypes[0].Descriptor()
}

func (Color) Type() protoreflect.EnumType {
	return &file_tensorflow_python_kernel_tests_proto_test_example_proto_enumTypes[0]
}

func (x Color) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Color) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Color(num)
	return nil
}

// Deprecated: Use Color.Descriptor instead.
func (Color) EnumDescriptor() ([]byte, []int) {
	return file_tensorflow_python_kernel_tests_proto_test_example_proto_rawDescGZIP(), []int{0}
}

// A TestCase holds a proto and assertions about how it should decode.
type TestCase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Batches of primitive values.
	Values []*TestValue `protobuf:"bytes,1,rep,name=values" json:"values,omitempty"`
	// The batch shapes.
	Shapes []int32 `protobuf:"varint,2,rep,name=shapes" json:"shapes,omitempty"`
	// Expected sizes for each field.
	Sizes []int32 `protobuf:"varint,3,rep,name=sizes" json:"sizes,omitempty"`
	// Expected values for each field.
	Fields []*FieldSpec `protobuf:"bytes,4,rep,name=fields" json:"fields,omitempty"`
}

func (x *TestCase) Reset() {
	*x = TestCase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_python_kernel_tests_proto_test_example_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestCase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestCase) ProtoMessage() {}

func (x *TestCase) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_python_kernel_tests_proto_test_example_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestCase.ProtoReflect.Descriptor instead.
func (*TestCase) Descriptor() ([]byte, []int) {
	return file_tensorflow_python_kernel_tests_proto_test_example_proto_rawDescGZIP(), []int{0}
}

func (x *TestCase) GetValues() []*TestValue {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *TestCase) GetShapes() []int32 {
	if x != nil {
		return x.Shapes
	}
	return nil
}

func (x *TestCase) GetSizes() []int32 {
	if x != nil {
		return x.Sizes
	}
	return nil
}

func (x *TestCase) GetFields() []*FieldSpec {
	if x != nil {
		return x.Fields
	}
	return nil
}

// FieldSpec describes the expected output for a single field.
type FieldSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  *string             `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Dtype *framework.DataType `protobuf:"varint,2,opt,name=dtype,enum=tensorflow.DataType" json:"dtype,omitempty"`
	Value *TestValue          `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
}

func (x *FieldSpec) Reset() {
	*x = FieldSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_python_kernel_tests_proto_test_example_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldSpec) ProtoMessage() {}

func (x *FieldSpec) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_python_kernel_tests_proto_test_example_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldSpec.ProtoReflect.Descriptor instead.
func (*FieldSpec) Descriptor() ([]byte, []int) {
	return file_tensorflow_python_kernel_tests_proto_test_example_proto_rawDescGZIP(), []int{1}
}

func (x *FieldSpec) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *FieldSpec) GetDtype() framework.DataType {
	if x != nil && x.Dtype != nil {
		return *x.Dtype
	}
	return framework.DataType(0)
}

func (x *FieldSpec) GetValue() *TestValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// NOTE: This definition must be kept in sync with PackedTestValue.
type TestValue struct {
	state           protoimpl.MessageState
	sizeCache       protoimpl.SizeCache
	unknownFields   protoimpl.UnknownFields
	extensionFields protoimpl.ExtensionFields

	DoubleValue   []float64         `protobuf:"fixed64,1,rep,name=double_value,json=doubleValue" json:"double_value,omitempty"`
	FloatValue    []float32         `protobuf:"fixed32,2,rep,name=float_value,json=floatValue" json:"float_value,omitempty"`
	Int64Value    []int64           `protobuf:"varint,3,rep,name=int64_value,json=int64Value" json:"int64_value,omitempty"`
	Uint64Value   []uint64          `protobuf:"varint,4,rep,name=uint64_value,json=uint64Value" json:"uint64_value,omitempty"`
	Int32Value    []int32           `protobuf:"varint,5,rep,name=int32_value,json=int32Value" json:"int32_value,omitempty"`
	Fixed64Value  []uint64          `protobuf:"fixed64,6,rep,name=fixed64_value,json=fixed64Value" json:"fixed64_value,omitempty"`
	Fixed32Value  []uint32          `protobuf:"fixed32,7,rep,name=fixed32_value,json=fixed32Value" json:"fixed32_value,omitempty"`
	BoolValue     []bool            `protobuf:"varint,8,rep,name=bool_value,json=boolValue" json:"bool_value,omitempty"`
	StringValue   []string          `protobuf:"bytes,9,rep,name=string_value,json=stringValue" json:"string_value,omitempty"`
	BytesValue    [][]byte          `protobuf:"bytes,12,rep,name=bytes_value,json=bytesValue" json:"bytes_value,omitempty"`
	Uint32Value   []uint32          `protobuf:"varint,13,rep,name=uint32_value,json=uint32Value" json:"uint32_value,omitempty"`
	Sfixed32Value []int32           `protobuf:"fixed32,15,rep,name=sfixed32_value,json=sfixed32Value" json:"sfixed32_value,omitempty"`
	Sfixed64Value []int64           `protobuf:"fixed64,16,rep,name=sfixed64_value,json=sfixed64Value" json:"sfixed64_value,omitempty"`
	Sint32Value   []int32           `protobuf:"zigzag32,17,rep,name=sint32_value,json=sint32Value" json:"sint32_value,omitempty"`
	Sint64Value   []int64           `protobuf:"zigzag64,18,rep,name=sint64_value,json=sint64Value" json:"sint64_value,omitempty"`
	MessageValue  []*PrimitiveValue `protobuf:"bytes,19,rep,name=message_value,json=messageValue" json:"message_value,omitempty"`
	EnumValue     []Color           `protobuf:"varint,35,rep,name=enum_value,json=enumValue,enum=tensorflow.contrib.proto.Color" json:"enum_value,omitempty"`
	// Optional fields with explicitly-specified defaults.
	DoubleValueWithDefault   *float64 `protobuf:"fixed64,20,opt,name=double_value_with_default,json=doubleValueWithDefault,def=1" json:"double_value_with_default,omitempty"`
	FloatValueWithDefault    *float32 `protobuf:"fixed32,21,opt,name=float_value_with_default,json=floatValueWithDefault,def=2" json:"float_value_with_default,omitempty"`
	Int64ValueWithDefault    *int64   `protobuf:"varint,22,opt,name=int64_value_with_default,json=int64ValueWithDefault,def=3" json:"int64_value_with_default,omitempty"`
	Uint64ValueWithDefault   *uint64  `protobuf:"varint,23,opt,name=uint64_value_with_default,json=uint64ValueWithDefault,def=4" json:"uint64_value_with_default,omitempty"`
	Int32ValueWithDefault    *int32   `protobuf:"varint,24,opt,name=int32_value_with_default,json=int32ValueWithDefault,def=5" json:"int32_value_with_default,omitempty"`
	Fixed64ValueWithDefault  *uint64  `protobuf:"fixed64,25,opt,name=fixed64_value_with_default,json=fixed64ValueWithDefault,def=6" json:"fixed64_value_with_default,omitempty"`
	Fixed32ValueWithDefault  *uint32  `protobuf:"fixed32,26,opt,name=fixed32_value_with_default,json=fixed32ValueWithDefault,def=7" json:"fixed32_value_with_default,omitempty"`
	BoolValueWithDefault     *bool    `protobuf:"varint,27,opt,name=bool_value_with_default,json=boolValueWithDefault,def=1" json:"bool_value_with_default,omitempty"`
	StringValueWithDefault   *string  `protobuf:"bytes,28,opt,name=string_value_with_default,json=stringValueWithDefault,def=a" json:"string_value_with_default,omitempty"`
	BytesValueWithDefault    []byte   `protobuf:"bytes,29,opt,name=bytes_value_with_default,json=bytesValueWithDefault,def=a longer default string" json:"bytes_value_with_default,omitempty"`
	Uint32ValueWithDefault   *uint32  `protobuf:"varint,30,opt,name=uint32_value_with_default,json=uint32ValueWithDefault,def=9" json:"uint32_value_with_default,omitempty"`
	Sfixed32ValueWithDefault *int32   `protobuf:"fixed32,31,opt,name=sfixed32_value_with_default,json=sfixed32ValueWithDefault,def=10" json:"sfixed32_value_with_default,omitempty"`
	Sfixed64ValueWithDefault *int64   `protobuf:"fixed64,32,opt,name=sfixed64_value_with_default,json=sfixed64ValueWithDefault,def=11" json:"sfixed64_value_with_default,omitempty"`
	Sint32ValueWithDefault   *int32   `protobuf:"zigzag32,33,opt,name=sint32_value_with_default,json=sint32ValueWithDefault,def=12" json:"sint32_value_with_default,omitempty"`
	Sint64ValueWithDefault   *int64   `protobuf:"zigzag64,34,opt,name=sint64_value_with_default,json=sint64ValueWithDefault,def=13" json:"sint64_value_with_default,omitempty"`
	EnumValueWithDefault     *Color   `protobuf:"varint,36,opt,name=enum_value_with_default,json=enumValueWithDefault,enum=tensorflow.contrib.proto.Color,def=3" json:"enum_value_with_default,omitempty"`
}

// Default values for TestValue fields.
const (
	Default_TestValue_DoubleValueWithDefault   = float64(1)
	Default_TestValue_FloatValueWithDefault    = float32(2)
	Default_TestValue_Int64ValueWithDefault    = int64(3)
	Default_TestValue_Uint64ValueWithDefault   = uint64(4)
	Default_TestValue_Int32ValueWithDefault    = int32(5)
	Default_TestValue_Fixed64ValueWithDefault  = uint64(6)
	Default_TestValue_Fixed32ValueWithDefault  = uint32(7)
	Default_TestValue_BoolValueWithDefault     = bool(true)
	Default_TestValue_StringValueWithDefault   = string("a")
	Default_TestValue_Uint32ValueWithDefault   = uint32(9)
	Default_TestValue_Sfixed32ValueWithDefault = int32(10)
	Default_TestValue_Sfixed64ValueWithDefault = int64(11)
	Default_TestValue_Sint32ValueWithDefault   = int32(12)
	Default_TestValue_Sint64ValueWithDefault   = int64(13)
	Default_TestValue_EnumValueWithDefault     = Color_GREEN
)

// Default values for TestValue fields.
var (
	Default_TestValue_BytesValueWithDefault = []byte("a longer default string")
)

func (x *TestValue) Reset() {
	*x = TestValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_python_kernel_tests_proto_test_example_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestValue) ProtoMessage() {}

func (x *TestValue) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_python_kernel_tests_proto_test_example_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestValue.ProtoReflect.Descriptor instead.
func (*TestValue) Descriptor() ([]byte, []int) {
	return file_tensorflow_python_kernel_tests_proto_test_example_proto_rawDescGZIP(), []int{2}
}

func (x *TestValue) GetDoubleValue() []float64 {
	if x != nil {
		return x.DoubleValue
	}
	return nil
}

func (x *TestValue) GetFloatValue() []float32 {
	if x != nil {
		return x.FloatValue
	}
	return nil
}

func (x *TestValue) GetInt64Value() []int64 {
	if x != nil {
		return x.Int64Value
	}
	return nil
}

func (x *TestValue) GetUint64Value() []uint64 {
	if x != nil {
		return x.Uint64Value
	}
	return nil
}

func (x *TestValue) GetInt32Value() []int32 {
	if x != nil {
		return x.Int32Value
	}
	return nil
}

func (x *TestValue) GetFixed64Value() []uint64 {
	if x != nil {
		return x.Fixed64Value
	}
	return nil
}

func (x *TestValue) GetFixed32Value() []uint32 {
	if x != nil {
		return x.Fixed32Value
	}
	return nil
}

func (x *TestValue) GetBoolValue() []bool {
	if x != nil {
		return x.BoolValue
	}
	return nil
}

func (x *TestValue) GetStringValue() []string {
	if x != nil {
		return x.StringValue
	}
	return nil
}

func (x *TestValue) GetBytesValue() [][]byte {
	if x != nil {
		return x.BytesValue
	}
	return nil
}

func (x *TestValue) GetUint32Value() []uint32 {
	if x != nil {
		return x.Uint32Value
	}
	return nil
}

func (x *TestValue) GetSfixed32Value() []int32 {
	if x != nil {
		return x.Sfixed32Value
	}
	return nil
}

func (x *TestValue) GetSfixed64Value() []int64 {
	if x != nil {
		return x.Sfixed64Value
	}
	return nil
}

func (x *TestValue) GetSint32Value() []int32 {
	if x != nil {
		return x.Sint32Value
	}
	return nil
}

func (x *TestValue) GetSint64Value() []int64 {
	if x != nil {
		return x.Sint64Value
	}
	return nil
}

func (x *TestValue) GetMessageValue() []*PrimitiveValue {
	if x != nil {
		return x.MessageValue
	}
	return nil
}

func (x *TestValue) GetEnumValue() []Color {
	if x != nil {
		return x.EnumValue
	}
	return nil
}

func (x *TestValue) GetDoubleValueWithDefault() float64 {
	if x != nil && x.DoubleValueWithDefault != nil {
		return *x.DoubleValueWithDefault
	}
	return Default_TestValue_DoubleValueWithDefault
}

func (x *TestValue) GetFloatValueWithDefault() float32 {
	if x != nil && x.FloatValueWithDefault != nil {
		return *x.FloatValueWithDefault
	}
	return Default_TestValue_FloatValueWithDefault
}

func (x *TestValue) GetInt64ValueWithDefault() int64 {
	if x != nil && x.Int64ValueWithDefault != nil {
		return *x.Int64ValueWithDefault
	}
	return Default_TestValue_Int64ValueWithDefault
}

func (x *TestValue) GetUint64ValueWithDefault() uint64 {
	if x != nil && x.Uint64ValueWithDefault != nil {
		return *x.Uint64ValueWithDefault
	}
	return Default_TestValue_Uint64ValueWithDefault
}

func (x *TestValue) GetInt32ValueWithDefault() int32 {
	if x != nil && x.Int32ValueWithDefault != nil {
		return *x.Int32ValueWithDefault
	}
	return Default_TestValue_Int32ValueWithDefault
}

func (x *TestValue) GetFixed64ValueWithDefault() uint64 {
	if x != nil && x.Fixed64ValueWithDefault != nil {
		return *x.Fixed64ValueWithDefault
	}
	return Default_TestValue_Fixed64ValueWithDefault
}

func (x *TestValue) GetFixed32ValueWithDefault() uint32 {
	if x != nil && x.Fixed32ValueWithDefault != nil {
		return *x.Fixed32ValueWithDefault
	}
	return Default_TestValue_Fixed32ValueWithDefault
}

func (x *TestValue) GetBoolValueWithDefault() bool {
	if x != nil && x.BoolValueWithDefault != nil {
		return *x.BoolValueWithDefault
	}
	return Default_TestValue_BoolValueWithDefault
}

func (x *TestValue) GetStringValueWithDefault() string {
	if x != nil && x.StringValueWithDefault != nil {
		return *x.StringValueWithDefault
	}
	return Default_TestValue_StringValueWithDefault
}

func (x *TestValue) GetBytesValueWithDefault() []byte {
	if x != nil && x.BytesValueWithDefault != nil {
		return x.BytesValueWithDefault
	}
	return append([]byte(nil), Default_TestValue_BytesValueWithDefault...)
}

func (x *TestValue) GetUint32ValueWithDefault() uint32 {
	if x != nil && x.Uint32ValueWithDefault != nil {
		return *x.Uint32ValueWithDefault
	}
	return Default_TestValue_Uint32ValueWithDefault
}

func (x *TestValue) GetSfixed32ValueWithDefault() int32 {
	if x != nil && x.Sfixed32ValueWithDefault != nil {
		return *x.Sfixed32ValueWithDefault
	}
	return Default_TestValue_Sfixed32ValueWithDefault
}

func (x *TestValue) GetSfixed64ValueWithDefault() int64 {
	if x != nil && x.Sfixed64ValueWithDefault != nil {
		return *x.Sfixed64ValueWithDefault
	}
	return Default_TestValue_Sfixed64ValueWithDefault
}

func (x *TestValue) GetSint32ValueWithDefault() int32 {
	if x != nil && x.Sint32ValueWithDefault != nil {
		return *x.Sint32ValueWithDefault
	}
	return Default_TestValue_Sint32ValueWithDefault
}

func (x *TestValue) GetSint64ValueWithDefault() int64 {
	if x != nil && x.Sint64ValueWithDefault != nil {
		return *x.Sint64ValueWithDefault
	}
	return Default_TestValue_Sint64ValueWithDefault
}

func (x *TestValue) GetEnumValueWithDefault() Color {
	if x != nil && x.EnumValueWithDefault != nil {
		return *x.EnumValueWithDefault
	}
	return Default_TestValue_EnumValueWithDefault
}

// A PackedTestValue looks exactly the same as a TestValue in the text format,
// but the binary serializion is different. We test the packed representations
// by loading the same test cases using this definition instead of TestValue.
//
// NOTE: This definition must be kept in sync with TestValue in every way except
// the packed=true declaration and the lack of extensions.
type PackedTestValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DoubleValue              []float64         `protobuf:"fixed64,1,rep,packed,name=double_value,json=doubleValue" json:"double_value,omitempty"`
	FloatValue               []float32         `protobuf:"fixed32,2,rep,packed,name=float_value,json=floatValue" json:"float_value,omitempty"`
	Int64Value               []int64           `protobuf:"varint,3,rep,packed,name=int64_value,json=int64Value" json:"int64_value,omitempty"`
	Uint64Value              []uint64          `protobuf:"varint,4,rep,packed,name=uint64_value,json=uint64Value" json:"uint64_value,omitempty"`
	Int32Value               []int32           `protobuf:"varint,5,rep,packed,name=int32_value,json=int32Value" json:"int32_value,omitempty"`
	Fixed64Value             []uint64          `protobuf:"fixed64,6,rep,packed,name=fixed64_value,json=fixed64Value" json:"fixed64_value,omitempty"`
	Fixed32Value             []uint32          `protobuf:"fixed32,7,rep,packed,name=fixed32_value,json=fixed32Value" json:"fixed32_value,omitempty"`
	BoolValue                []bool            `protobuf:"varint,8,rep,packed,name=bool_value,json=boolValue" json:"bool_value,omitempty"`
	StringValue              []string          `protobuf:"bytes,9,rep,name=string_value,json=stringValue" json:"string_value,omitempty"`
	BytesValue               [][]byte          `protobuf:"bytes,12,rep,name=bytes_value,json=bytesValue" json:"bytes_value,omitempty"`
	Uint32Value              []uint32          `protobuf:"varint,13,rep,packed,name=uint32_value,json=uint32Value" json:"uint32_value,omitempty"`
	Sfixed32Value            []int32           `protobuf:"fixed32,15,rep,packed,name=sfixed32_value,json=sfixed32Value" json:"sfixed32_value,omitempty"`
	Sfixed64Value            []int64           `protobuf:"fixed64,16,rep,packed,name=sfixed64_value,json=sfixed64Value" json:"sfixed64_value,omitempty"`
	Sint32Value              []int32           `protobuf:"zigzag32,17,rep,packed,name=sint32_value,json=sint32Value" json:"sint32_value,omitempty"`
	Sint64Value              []int64           `protobuf:"zigzag64,18,rep,packed,name=sint64_value,json=sint64Value" json:"sint64_value,omitempty"`
	MessageValue             []*PrimitiveValue `protobuf:"bytes,19,rep,name=message_value,json=messageValue" json:"message_value,omitempty"`
	EnumValue                []Color           `protobuf:"varint,35,rep,name=enum_value,json=enumValue,enum=tensorflow.contrib.proto.Color" json:"enum_value,omitempty"`
	DoubleValueWithDefault   *float64          `protobuf:"fixed64,20,opt,name=double_value_with_default,json=doubleValueWithDefault,def=1" json:"double_value_with_default,omitempty"`
	FloatValueWithDefault    *float32          `protobuf:"fixed32,21,opt,name=float_value_with_default,json=floatValueWithDefault,def=2" json:"float_value_with_default,omitempty"`
	Int64ValueWithDefault    *int64            `protobuf:"varint,22,opt,name=int64_value_with_default,json=int64ValueWithDefault,def=3" json:"int64_value_with_default,omitempty"`
	Uint64ValueWithDefault   *uint64           `protobuf:"varint,23,opt,name=uint64_value_with_default,json=uint64ValueWithDefault,def=4" json:"uint64_value_with_default,omitempty"`
	Int32ValueWithDefault    *int32            `protobuf:"varint,24,opt,name=int32_value_with_default,json=int32ValueWithDefault,def=5" json:"int32_value_with_default,omitempty"`
	Fixed64ValueWithDefault  *uint64           `protobuf:"fixed64,25,opt,name=fixed64_value_with_default,json=fixed64ValueWithDefault,def=6" json:"fixed64_value_with_default,omitempty"`
	Fixed32ValueWithDefault  *uint32           `protobuf:"fixed32,26,opt,name=fixed32_value_with_default,json=fixed32ValueWithDefault,def=7" json:"fixed32_value_with_default,omitempty"`
	BoolValueWithDefault     *bool             `protobuf:"varint,27,opt,name=bool_value_with_default,json=boolValueWithDefault,def=1" json:"bool_value_with_default,omitempty"`
	StringValueWithDefault   *string           `protobuf:"bytes,28,opt,name=string_value_with_default,json=stringValueWithDefault,def=a" json:"string_value_with_default,omitempty"`
	BytesValueWithDefault    []byte            `protobuf:"bytes,29,opt,name=bytes_value_with_default,json=bytesValueWithDefault,def=a longer default string" json:"bytes_value_with_default,omitempty"`
	Uint32ValueWithDefault   *uint32           `protobuf:"varint,30,opt,name=uint32_value_with_default,json=uint32ValueWithDefault,def=9" json:"uint32_value_with_default,omitempty"`
	Sfixed32ValueWithDefault *int32            `protobuf:"fixed32,31,opt,name=sfixed32_value_with_default,json=sfixed32ValueWithDefault,def=10" json:"sfixed32_value_with_default,omitempty"`
	Sfixed64ValueWithDefault *int64            `protobuf:"fixed64,32,opt,name=sfixed64_value_with_default,json=sfixed64ValueWithDefault,def=11" json:"sfixed64_value_with_default,omitempty"`
	Sint32ValueWithDefault   *int32            `protobuf:"zigzag32,33,opt,name=sint32_value_with_default,json=sint32ValueWithDefault,def=12" json:"sint32_value_with_default,omitempty"`
	Sint64ValueWithDefault   *int64            `protobuf:"zigzag64,34,opt,name=sint64_value_with_default,json=sint64ValueWithDefault,def=13" json:"sint64_value_with_default,omitempty"`
	EnumValueWithDefault     *Color            `protobuf:"varint,36,opt,name=enum_value_with_default,json=enumValueWithDefault,enum=tensorflow.contrib.proto.Color,def=3" json:"enum_value_with_default,omitempty"`
}

// Default values for PackedTestValue fields.
const (
	Default_PackedTestValue_DoubleValueWithDefault   = float64(1)
	Default_PackedTestValue_FloatValueWithDefault    = float32(2)
	Default_PackedTestValue_Int64ValueWithDefault    = int64(3)
	Default_PackedTestValue_Uint64ValueWithDefault   = uint64(4)
	Default_PackedTestValue_Int32ValueWithDefault    = int32(5)
	Default_PackedTestValue_Fixed64ValueWithDefault  = uint64(6)
	Default_PackedTestValue_Fixed32ValueWithDefault  = uint32(7)
	Default_PackedTestValue_BoolValueWithDefault     = bool(true)
	Default_PackedTestValue_StringValueWithDefault   = string("a")
	Default_PackedTestValue_Uint32ValueWithDefault   = uint32(9)
	Default_PackedTestValue_Sfixed32ValueWithDefault = int32(10)
	Default_PackedTestValue_Sfixed64ValueWithDefault = int64(11)
	Default_PackedTestValue_Sint32ValueWithDefault   = int32(12)
	Default_PackedTestValue_Sint64ValueWithDefault   = int64(13)
	Default_PackedTestValue_EnumValueWithDefault     = Color_GREEN
)

// Default values for PackedTestValue fields.
var (
	Default_PackedTestValue_BytesValueWithDefault = []byte("a longer default string")
)

func (x *PackedTestValue) Reset() {
	*x = PackedTestValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_python_kernel_tests_proto_test_example_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackedTestValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackedTestValue) ProtoMessage() {}

func (x *PackedTestValue) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_python_kernel_tests_proto_test_example_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackedTestValue.ProtoReflect.Descriptor instead.
func (*PackedTestValue) Descriptor() ([]byte, []int) {
	return file_tensorflow_python_kernel_tests_proto_test_example_proto_rawDescGZIP(), []int{3}
}

func (x *PackedTestValue) GetDoubleValue() []float64 {
	if x != nil {
		return x.DoubleValue
	}
	return nil
}

func (x *PackedTestValue) GetFloatValue() []float32 {
	if x != nil {
		return x.FloatValue
	}
	return nil
}

func (x *PackedTestValue) GetInt64Value() []int64 {
	if x != nil {
		return x.Int64Value
	}
	return nil
}

func (x *PackedTestValue) GetUint64Value() []uint64 {
	if x != nil {
		return x.Uint64Value
	}
	return nil
}

func (x *PackedTestValue) GetInt32Value() []int32 {
	if x != nil {
		return x.Int32Value
	}
	return nil
}

func (x *PackedTestValue) GetFixed64Value() []uint64 {
	if x != nil {
		return x.Fixed64Value
	}
	return nil
}

func (x *PackedTestValue) GetFixed32Value() []uint32 {
	if x != nil {
		return x.Fixed32Value
	}
	return nil
}

func (x *PackedTestValue) GetBoolValue() []bool {
	if x != nil {
		return x.BoolValue
	}
	return nil
}

func (x *PackedTestValue) GetStringValue() []string {
	if x != nil {
		return x.StringValue
	}
	return nil
}

func (x *PackedTestValue) GetBytesValue() [][]byte {
	if x != nil {
		return x.BytesValue
	}
	return nil
}

func (x *PackedTestValue) GetUint32Value() []uint32 {
	if x != nil {
		return x.Uint32Value
	}
	return nil
}

func (x *PackedTestValue) GetSfixed32Value() []int32 {
	if x != nil {
		return x.Sfixed32Value
	}
	return nil
}

func (x *PackedTestValue) GetSfixed64Value() []int64 {
	if x != nil {
		return x.Sfixed64Value
	}
	return nil
}

func (x *PackedTestValue) GetSint32Value() []int32 {
	if x != nil {
		return x.Sint32Value
	}
	return nil
}

func (x *PackedTestValue) GetSint64Value() []int64 {
	if x != nil {
		return x.Sint64Value
	}
	return nil
}

func (x *PackedTestValue) GetMessageValue() []*PrimitiveValue {
	if x != nil {
		return x.MessageValue
	}
	return nil
}

func (x *PackedTestValue) GetEnumValue() []Color {
	if x != nil {
		return x.EnumValue
	}
	return nil
}

func (x *PackedTestValue) GetDoubleValueWithDefault() float64 {
	if x != nil && x.DoubleValueWithDefault != nil {
		return *x.DoubleValueWithDefault
	}
	return Default_PackedTestValue_DoubleValueWithDefault
}

func (x *PackedTestValue) GetFloatValueWithDefault() float32 {
	if x != nil && x.FloatValueWithDefault != nil {
		return *x.FloatValueWithDefault
	}
	return Default_PackedTestValue_FloatValueWithDefault
}

func (x *PackedTestValue) GetInt64ValueWithDefault() int64 {
	if x != nil && x.Int64ValueWithDefault != nil {
		return *x.Int64ValueWithDefault
	}
	return Default_PackedTestValue_Int64ValueWithDefault
}

func (x *PackedTestValue) GetUint64ValueWithDefault() uint64 {
	if x != nil && x.Uint64ValueWithDefault != nil {
		return *x.Uint64ValueWithDefault
	}
	return Default_PackedTestValue_Uint64ValueWithDefault
}

func (x *PackedTestValue) GetInt32ValueWithDefault() int32 {
	if x != nil && x.Int32ValueWithDefault != nil {
		return *x.Int32ValueWithDefault
	}
	return Default_PackedTestValue_Int32ValueWithDefault
}

func (x *PackedTestValue) GetFixed64ValueWithDefault() uint64 {
	if x != nil && x.Fixed64ValueWithDefault != nil {
		return *x.Fixed64ValueWithDefault
	}
	return Default_PackedTestValue_Fixed64ValueWithDefault
}

func (x *PackedTestValue) GetFixed32ValueWithDefault() uint32 {
	if x != nil && x.Fixed32ValueWithDefault != nil {
		return *x.Fixed32ValueWithDefault
	}
	return Default_PackedTestValue_Fixed32ValueWithDefault
}

func (x *PackedTestValue) GetBoolValueWithDefault() bool {
	if x != nil && x.BoolValueWithDefault != nil {
		return *x.BoolValueWithDefault
	}
	return Default_PackedTestValue_BoolValueWithDefault
}

func (x *PackedTestValue) GetStringValueWithDefault() string {
	if x != nil && x.StringValueWithDefault != nil {
		return *x.StringValueWithDefault
	}
	return Default_PackedTestValue_StringValueWithDefault
}

func (x *PackedTestValue) GetBytesValueWithDefault() []byte {
	if x != nil && x.BytesValueWithDefault != nil {
		return x.BytesValueWithDefault
	}
	return append([]byte(nil), Default_PackedTestValue_BytesValueWithDefault...)
}

func (x *PackedTestValue) GetUint32ValueWithDefault() uint32 {
	if x != nil && x.Uint32ValueWithDefault != nil {
		return *x.Uint32ValueWithDefault
	}
	return Default_PackedTestValue_Uint32ValueWithDefault
}

func (x *PackedTestValue) GetSfixed32ValueWithDefault() int32 {
	if x != nil && x.Sfixed32ValueWithDefault != nil {
		return *x.Sfixed32ValueWithDefault
	}
	return Default_PackedTestValue_Sfixed32ValueWithDefault
}

func (x *PackedTestValue) GetSfixed64ValueWithDefault() int64 {
	if x != nil && x.Sfixed64ValueWithDefault != nil {
		return *x.Sfixed64ValueWithDefault
	}
	return Default_PackedTestValue_Sfixed64ValueWithDefault
}

func (x *PackedTestValue) GetSint32ValueWithDefault() int32 {
	if x != nil && x.Sint32ValueWithDefault != nil {
		return *x.Sint32ValueWithDefault
	}
	return Default_PackedTestValue_Sint32ValueWithDefault
}

func (x *PackedTestValue) GetSint64ValueWithDefault() int64 {
	if x != nil && x.Sint64ValueWithDefault != nil {
		return *x.Sint64ValueWithDefault
	}
	return Default_PackedTestValue_Sint64ValueWithDefault
}

func (x *PackedTestValue) GetEnumValueWithDefault() Color {
	if x != nil && x.EnumValueWithDefault != nil {
		return *x.EnumValueWithDefault
	}
	return Default_PackedTestValue_EnumValueWithDefault
}

type PrimitiveValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DoubleValue   *float64 `protobuf:"fixed64,1,opt,name=double_value,json=doubleValue" json:"double_value,omitempty"`
	FloatValue    *float32 `protobuf:"fixed32,2,opt,name=float_value,json=floatValue" json:"float_value,omitempty"`
	Int64Value    *int64   `protobuf:"varint,3,opt,name=int64_value,json=int64Value" json:"int64_value,omitempty"`
	Uint64Value   *uint64  `protobuf:"varint,4,opt,name=uint64_value,json=uint64Value" json:"uint64_value,omitempty"`
	Int32Value    *int32   `protobuf:"varint,5,opt,name=int32_value,json=int32Value" json:"int32_value,omitempty"`
	Fixed64Value  *uint64  `protobuf:"fixed64,6,opt,name=fixed64_value,json=fixed64Value" json:"fixed64_value,omitempty"`
	Fixed32Value  *uint32  `protobuf:"fixed32,7,opt,name=fixed32_value,json=fixed32Value" json:"fixed32_value,omitempty"`
	BoolValue     *bool    `protobuf:"varint,8,opt,name=bool_value,json=boolValue" json:"bool_value,omitempty"`
	StringValue   *string  `protobuf:"bytes,9,opt,name=string_value,json=stringValue" json:"string_value,omitempty"`
	BytesValue    []byte   `protobuf:"bytes,12,opt,name=bytes_value,json=bytesValue" json:"bytes_value,omitempty"`
	Uint32Value   *uint32  `protobuf:"varint,13,opt,name=uint32_value,json=uint32Value" json:"uint32_value,omitempty"`
	Sfixed32Value *int32   `protobuf:"fixed32,15,opt,name=sfixed32_value,json=sfixed32Value" json:"sfixed32_value,omitempty"`
	Sfixed64Value *int64   `protobuf:"fixed64,16,opt,name=sfixed64_value,json=sfixed64Value" json:"sfixed64_value,omitempty"`
	Sint32Value   *int32   `protobuf:"zigzag32,17,opt,name=sint32_value,json=sint32Value" json:"sint32_value,omitempty"`
	Sint64Value   *int64   `protobuf:"zigzag64,18,opt,name=sint64_value,json=sint64Value" json:"sint64_value,omitempty"`
}

func (x *PrimitiveValue) Reset() {
	*x = PrimitiveValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_python_kernel_tests_proto_test_example_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrimitiveValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrimitiveValue) ProtoMessage() {}

func (x *PrimitiveValue) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_python_kernel_tests_proto_test_example_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrimitiveValue.ProtoReflect.Descriptor instead.
func (*PrimitiveValue) Descriptor() ([]byte, []int) {
	return file_tensorflow_python_kernel_tests_proto_test_example_proto_rawDescGZIP(), []int{4}
}

func (x *PrimitiveValue) GetDoubleValue() float64 {
	if x != nil && x.DoubleValue != nil {
		return *x.DoubleValue
	}
	return 0
}

func (x *PrimitiveValue) GetFloatValue() float32 {
	if x != nil && x.FloatValue != nil {
		return *x.FloatValue
	}
	return 0
}

func (x *PrimitiveValue) GetInt64Value() int64 {
	if x != nil && x.Int64Value != nil {
		return *x.Int64Value
	}
	return 0
}

func (x *PrimitiveValue) GetUint64Value() uint64 {
	if x != nil && x.Uint64Value != nil {
		return *x.Uint64Value
	}
	return 0
}

func (x *PrimitiveValue) GetInt32Value() int32 {
	if x != nil && x.Int32Value != nil {
		return *x.Int32Value
	}
	return 0
}

func (x *PrimitiveValue) GetFixed64Value() uint64 {
	if x != nil && x.Fixed64Value != nil {
		return *x.Fixed64Value
	}
	return 0
}

func (x *PrimitiveValue) GetFixed32Value() uint32 {
	if x != nil && x.Fixed32Value != nil {
		return *x.Fixed32Value
	}
	return 0
}

func (x *PrimitiveValue) GetBoolValue() bool {
	if x != nil && x.BoolValue != nil {
		return *x.BoolValue
	}
	return false
}

func (x *PrimitiveValue) GetStringValue() string {
	if x != nil && x.StringValue != nil {
		return *x.StringValue
	}
	return ""
}

func (x *PrimitiveValue) GetBytesValue() []byte {
	if x != nil {
		return x.BytesValue
	}
	return nil
}

func (x *PrimitiveValue) GetUint32Value() uint32 {
	if x != nil && x.Uint32Value != nil {
		return *x.Uint32Value
	}
	return 0
}

func (x *PrimitiveValue) GetSfixed32Value() int32 {
	if x != nil && x.Sfixed32Value != nil {
		return *x.Sfixed32Value
	}
	return 0
}

func (x *PrimitiveValue) GetSfixed64Value() int64 {
	if x != nil && x.Sfixed64Value != nil {
		return *x.Sfixed64Value
	}
	return 0
}

func (x *PrimitiveValue) GetSint32Value() int32 {
	if x != nil && x.Sint32Value != nil {
		return *x.Sint32Value
	}
	return 0
}

func (x *PrimitiveValue) GetSint64Value() int64 {
	if x != nil && x.Sint64Value != nil {
		return *x.Sint64Value
	}
	return 0
}

// Message containing fields with field numbers higher than any field above.
// An instance of this message is prepended to each binary message in the test
// to exercise the code path that handles fields encoded out of order of field
// number.
type ExtraFields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StringValue *string `protobuf:"bytes,1776,opt,name=string_value,json=stringValue" json:"string_value,omitempty"`
	BoolValue   *bool   `protobuf:"varint,1777,opt,name=bool_value,json=boolValue" json:"bool_value,omitempty"`
}

func (x *ExtraFields) Reset() {
	*x = ExtraFields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_python_kernel_tests_proto_test_example_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtraFields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtraFields) ProtoMessage() {}

func (x *ExtraFields) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_python_kernel_tests_proto_test_example_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtraFields.ProtoReflect.Descriptor instead.
func (*ExtraFields) Descriptor() ([]byte, []int) {
	return file_tensorflow_python_kernel_tests_proto_test_example_proto_rawDescGZIP(), []int{5}
}

func (x *ExtraFields) GetStringValue() string {
	if x != nil && x.StringValue != nil {
		return *x.StringValue
	}
	return ""
}

func (x *ExtraFields) GetBoolValue() bool {
	if x != nil && x.BoolValue != nil {
		return *x.BoolValue
	}
	return false
}

type InnerMessageValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FloatValue  *float32 `protobuf:"fixed32,2,opt,name=float_value,json=floatValue" json:"float_value,omitempty"`
	BytesValues [][]byte `protobuf:"bytes,8,rep,name=bytes_values,json=bytesValues" json:"bytes_values,omitempty"`
}

func (x *InnerMessageValue) Reset() {
	*x = InnerMessageValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_python_kernel_tests_proto_test_example_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InnerMessageValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InnerMessageValue) ProtoMessage() {}

func (x *InnerMessageValue) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_python_kernel_tests_proto_test_example_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InnerMessageValue.ProtoReflect.Descriptor instead.
func (*InnerMessageValue) Descriptor() ([]byte, []int) {
	return file_tensorflow_python_kernel_tests_proto_test_example_proto_rawDescGZIP(), []int{6}
}

func (x *InnerMessageValue) GetFloatValue() float32 {
	if x != nil && x.FloatValue != nil {
		return *x.FloatValue
	}
	return 0
}

func (x *InnerMessageValue) GetBytesValues() [][]byte {
	if x != nil {
		return x.BytesValues
	}
	return nil
}

type MiddleMessageValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Int32Values  []int32            `protobuf:"varint,5,rep,name=int32_values,json=int32Values" json:"int32_values,omitempty"`
	MessageValue *InnerMessageValue `protobuf:"bytes,11,opt,name=message_value,json=messageValue" json:"message_value,omitempty"`
	Uint32Value  *uint32            `protobuf:"varint,13,opt,name=uint32_value,json=uint32Value" json:"uint32_value,omitempty"`
}

func (x *MiddleMessageValue) Reset() {
	*x = MiddleMessageValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_python_kernel_tests_proto_test_example_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiddleMessageValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiddleMessageValue) ProtoMessage() {}

func (x *MiddleMessageValue) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_python_kernel_tests_proto_test_example_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiddleMessageValue.ProtoReflect.Descriptor instead.
func (*MiddleMessageValue) Descriptor() ([]byte, []int) {
	return file_tensorflow_python_kernel_tests_proto_test_example_proto_rawDescGZIP(), []int{7}
}

func (x *MiddleMessageValue) GetInt32Values() []int32 {
	if x != nil {
		return x.Int32Values
	}
	return nil
}

func (x *MiddleMessageValue) GetMessageValue() *InnerMessageValue {
	if x != nil {
		return x.MessageValue
	}
	return nil
}

func (x *MiddleMessageValue) GetUint32Value() uint32 {
	if x != nil && x.Uint32Value != nil {
		return *x.Uint32Value
	}
	return 0
}

type MessageValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DoubleValue  *float64            `protobuf:"fixed64,1,opt,name=double_value,json=doubleValue" json:"double_value,omitempty"`
	MessageValue *MiddleMessageValue `protobuf:"bytes,11,opt,name=message_value,json=messageValue" json:"message_value,omitempty"`
}

func (x *MessageValue) Reset() {
	*x = MessageValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_python_kernel_tests_proto_test_example_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageValue) ProtoMessage() {}

func (x *MessageValue) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_python_kernel_tests_proto_test_example_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageValue.ProtoReflect.Descriptor instead.
func (*MessageValue) Descriptor() ([]byte, []int) {
	return file_tensorflow_python_kernel_tests_proto_test_example_proto_rawDescGZIP(), []int{8}
}

func (x *MessageValue) GetDoubleValue() float64 {
	if x != nil && x.DoubleValue != nil {
		return *x.DoubleValue
	}
	return 0
}

func (x *MessageValue) GetMessageValue() *MiddleMessageValue {
	if x != nil {
		return x.MessageValue
	}
	return nil
}

type RepeatedMessageValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageValues []*RepeatedMessageValue_NestedMessageValue `protobuf:"bytes,11,rep,name=message_values,json=messageValues" json:"message_values,omitempty"`
}

func (x *RepeatedMessageValue) Reset() {
	*x = RepeatedMessageValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_python_kernel_tests_proto_test_example_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepeatedMessageValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepeatedMessageValue) ProtoMessage() {}

func (x *RepeatedMessageValue) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_python_kernel_tests_proto_test_example_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepeatedMessageValue.ProtoReflect.Descriptor instead.
func (*RepeatedMessageValue) Descriptor() ([]byte, []int) {
	return file_tensorflow_python_kernel_tests_proto_test_example_proto_rawDescGZIP(), []int{9}
}

func (x *RepeatedMessageValue) GetMessageValues() []*RepeatedMessageValue_NestedMessageValue {
	if x != nil {
		return x.MessageValues
	}
	return nil
}

type RepeatedMessageValue_NestedMessageValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FloatValue  *float32 `protobuf:"fixed32,2,opt,name=float_value,json=floatValue" json:"float_value,omitempty"`
	BytesValues [][]byte `protobuf:"bytes,8,rep,name=bytes_values,json=bytesValues" json:"bytes_values,omitempty"`
}

func (x *RepeatedMessageValue_NestedMessageValue) Reset() {
	*x = RepeatedMessageValue_NestedMessageValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_python_kernel_tests_proto_test_example_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepeatedMessageValue_NestedMessageValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepeatedMessageValue_NestedMessageValue) ProtoMessage() {}

func (x *RepeatedMessageValue_NestedMessageValue) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_python_kernel_tests_proto_test_example_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepeatedMessageValue_NestedMessageValue.ProtoReflect.Descriptor instead.
func (*RepeatedMessageValue_NestedMessageValue) Descriptor() ([]byte, []int) {
	return file_tensorflow_python_kernel_tests_proto_test_example_proto_rawDescGZIP(), []int{9, 0}
}

func (x *RepeatedMessageValue_NestedMessageValue) GetFloatValue() float32 {
	if x != nil && x.FloatValue != nil {
		return *x.FloatValue
	}
	return 0
}

func (x *RepeatedMessageValue_NestedMessageValue) GetBytesValues() [][]byte {
	if x != nil {
		return x.BytesValues
	}
	return nil
}

var file_tensorflow_python_kernel_tests_proto_test_example_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*TestValue)(nil),
		ExtensionType: ([]*PrimitiveValue)(nil),
		Field:         100,
		Name:          "tensorflow.contrib.proto.ext_value",
		Tag:           "bytes,100,rep,name=ext_value",
		Filename:      "tensorflow/python/kernel_tests/proto/test_example.proto",
	},
}

// Extension fields to TestValue.
var (
	// repeated tensorflow.contrib.proto.PrimitiveValue ext_value = 100;
	E_ExtValue = &file_tensorflow_python_kernel_tests_proto_test_example_proto_extTypes[0]
)

var File_tensorflow_python_kernel_tests_proto_test_example_proto protoreflect.FileDescriptor

var file_tensorflow_python_kernel_tests_proto_test_example_proto_rawDesc = []byte{
	0x0a, 0x37, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x70, 0x79, 0x74,
	0x68, 0x6f, 0x6e, 0x2f, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x73,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x74, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f,
	0x63, 0x6f, 0x72, 0x65, 0x2f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb2, 0x01, 0x0a, 0x08, 0x54,
	0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x70, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x73, 0x68, 0x61, 0x70, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x69, 0x7a, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x73, 0x69, 0x7a,
	0x65, 0x73, 0x12, 0x3b, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x53, 0x70, 0x65, 0x63, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22,
	0x86, 0x01, 0x0a, 0x09, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x70, 0x65, 0x63, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x2a, 0x0a, 0x05, 0x64, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x14, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x64, 0x74, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69,
	0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xcc, 0x0d, 0x0a, 0x09, 0x54, 0x65, 0x73,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x01, 0x52, 0x0b, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6c, 0x6f,
	0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0a,
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x0a, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x75,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x04, 0x52, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x06, 0x52, 0x0c, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x07, 0x52, 0x0c, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6f, 0x6f,
	0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x08, 0x52, 0x09, 0x62,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0c,
	0x52, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0d, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0f, 0x52, 0x0d, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x10, 0x20, 0x03, 0x28, 0x10, 0x52, 0x0d,
	0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x11, 0x20,
	0x03, 0x28, 0x11, 0x52, 0x0b, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x12, 0x20, 0x03, 0x28, 0x12, 0x52, 0x0b, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x4d, 0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x74, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x3e, 0x0a, 0x0a, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x23, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x09, 0x65, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x3c, 0x0a, 0x19, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x01, 0x3a, 0x01, 0x31, 0x52, 0x16, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x12, 0x3a, 0x0a, 0x18, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f,
	0x77, 0x69, 0x74, 0x68, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x02, 0x3a, 0x01, 0x32, 0x52, 0x15, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x3a, 0x0a, 0x18,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68,
	0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x3a, 0x01,
	0x33, 0x52, 0x15, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x57, 0x69, 0x74,
	0x68, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x3c, 0x0a, 0x19, 0x75, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x34, 0x52, 0x16,
	0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x57, 0x69, 0x74, 0x68, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x3a, 0x0a, 0x18, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x35, 0x52, 0x15, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x12, 0x3e, 0x0a, 0x1a, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x06, 0x3a, 0x01, 0x36, 0x52, 0x17, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x12, 0x3e, 0x0a, 0x1a, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x07, 0x3a, 0x01, 0x37, 0x52, 0x17, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x12, 0x3b, 0x0a, 0x17, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x14, 0x62, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12,
	0x3c, 0x0a, 0x19, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f,
	0x77, 0x69, 0x74, 0x68, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x09, 0x3a, 0x01, 0x61, 0x52, 0x16, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x50, 0x0a,
	0x18, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x77, 0x69, 0x74,
	0x68, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0c, 0x3a,
	0x17, 0x61, 0x20, 0x6c, 0x6f, 0x6e, 0x67, 0x65, 0x72, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x15, 0x62, 0x79, 0x74, 0x65, 0x73, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12,
	0x3c, 0x0a, 0x19, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f,
	0x77, 0x69, 0x74, 0x68, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x0d, 0x3a, 0x01, 0x39, 0x52, 0x16, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x41, 0x0a,
	0x1b, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f,
	0x77, 0x69, 0x74, 0x68, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x0f, 0x3a, 0x02, 0x31, 0x30, 0x52, 0x18, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x12, 0x41, 0x0a, 0x1b, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x10, 0x3a, 0x02, 0x31, 0x31, 0x52, 0x18, 0x73, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x12, 0x3d, 0x0a, 0x19, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x18, 0x21, 0x20, 0x01, 0x28, 0x11, 0x3a, 0x02, 0x31, 0x32, 0x52, 0x16, 0x73, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x12, 0x3d, 0x0a, 0x19, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x12, 0x3a, 0x02, 0x31, 0x33, 0x52, 0x16, 0x73, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x12, 0x5d, 0x0a, 0x17, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f,
	0x77, 0x69, 0x74, 0x68, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x24, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x3a, 0x05, 0x47, 0x52, 0x45, 0x45, 0x4e, 0x52, 0x14, 0x65, 0x6e, 0x75, 0x6d,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x2a, 0x05, 0x08, 0x64, 0x10, 0xc8, 0x01, 0x22, 0xff, 0x0d, 0x0a, 0x0f, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x25, 0x0a, 0x0c, 0x64,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x01, 0x42, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x23, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x02, 0x42, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x66, 0x6c, 0x6f,
	0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x42, 0x02, 0x10, 0x01,
	0x52, 0x0a, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x25, 0x0a, 0x0c,
	0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x04, 0x42, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x42, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x27, 0x0a, 0x0d, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x06, 0x42,
	0x02, 0x10, 0x01, 0x52, 0x0c, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x27, 0x0a, 0x0d, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x07, 0x42, 0x02, 0x10, 0x01, 0x52, 0x0c, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0a, 0x62, 0x6f,
	0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x08, 0x42, 0x02,
	0x10, 0x01, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x25, 0x0a, 0x0c, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x75, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x29, 0x0a, 0x0e, 0x73, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0f,
	0x42, 0x02, 0x10, 0x01, 0x52, 0x0d, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x29, 0x0a, 0x0e, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x10, 0x20, 0x03, 0x28, 0x10, 0x42, 0x02, 0x10, 0x01, 0x52,
	0x0d, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x25,
	0x0a, 0x0c, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x11,
	0x20, 0x03, 0x28, 0x11, 0x42, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x25, 0x0a, 0x0c, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x12, 0x20, 0x03, 0x28, 0x12, 0x42, 0x02, 0x10, 0x01, 0x52,
	0x0b, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4d, 0x0a, 0x0d,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x13, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3e, 0x0a, 0x0a, 0x65,
	0x6e, 0x75, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x23, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x1f, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x69, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x52, 0x09, 0x65, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3c, 0x0a, 0x19, 0x64,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68,
	0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x3a, 0x01,
	0x31, 0x52, 0x16, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x57, 0x69,
	0x74, 0x68, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x3a, 0x0a, 0x18, 0x66, 0x6c, 0x6f,
	0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x02, 0x3a, 0x01, 0x32, 0x52, 0x15,
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x3a, 0x0a, 0x18, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x3a, 0x01, 0x33, 0x52, 0x15, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x12, 0x3c, 0x0a, 0x19, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x34, 0x52, 0x16, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12,
	0x3a, 0x0a, 0x18, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x77,
	0x69, 0x74, 0x68, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x05, 0x3a, 0x01, 0x35, 0x52, 0x15, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x3e, 0x0a, 0x1a, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x77, 0x69, 0x74,
	0x68, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x06, 0x3a,
	0x01, 0x36, 0x52, 0x17, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x3e, 0x0a, 0x1a, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x77, 0x69, 0x74,
	0x68, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x07, 0x3a,
	0x01, 0x37, 0x52, 0x17, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x3b, 0x0a, 0x17, 0x62,
	0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72,
	0x75, 0x65, 0x52, 0x14, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x57, 0x69, 0x74,
	0x68, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x3c, 0x0a, 0x19, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x01, 0x61, 0x52, 0x16,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x57, 0x69, 0x74, 0x68, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x50, 0x0a, 0x18, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0c, 0x3a, 0x17, 0x61, 0x20, 0x6c, 0x6f, 0x6e, 0x67,
	0x65, 0x72, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x15, 0x62, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x57, 0x69, 0x74,
	0x68, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x3c, 0x0a, 0x19, 0x75, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d, 0x3a, 0x01, 0x39, 0x52, 0x16,
	0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x57, 0x69, 0x74, 0x68, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x41, 0x0a, 0x1b, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0f, 0x3a, 0x02, 0x31, 0x30, 0x52,
	0x18, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x57, 0x69,
	0x74, 0x68, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x41, 0x0a, 0x1b, 0x73, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68,
	0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x10, 0x3a, 0x02,
	0x31, 0x31, 0x52, 0x18, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x3d, 0x0a, 0x19,
	0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x77, 0x69, 0x74,
	0x68, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x21, 0x20, 0x01, 0x28, 0x11, 0x3a,
	0x02, 0x31, 0x32, 0x52, 0x16, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x3d, 0x0a, 0x19, 0x73,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68,
	0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x22, 0x20, 0x01, 0x28, 0x12, 0x3a, 0x02,
	0x31, 0x33, 0x52, 0x16, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x57,
	0x69, 0x74, 0x68, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x5d, 0x0a, 0x17, 0x65, 0x6e,
	0x75, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x74, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3a, 0x05, 0x47, 0x52,
	0x45, 0x45, 0x4e, 0x52, 0x14, 0x65, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x57, 0x69,
	0x74, 0x68, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0x9d, 0x04, 0x0a, 0x0e, 0x50, 0x72,
	0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0c, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x07, 0x52, 0x0c, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33,
	0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x0d, 0x73,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x10, 0x52, 0x0d, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0b, 0x73, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0b, 0x73, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x51, 0x0a, 0x0b, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0xf0, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0xf1, 0x0d, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x57, 0x0a, 0x11,
	0x49, 0x6e, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xac, 0x01, 0x0a, 0x12, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12,
	0x50, 0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x0c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x51, 0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x69, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xda, 0x01, 0x0a, 0x14,
	0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x68, 0x0a, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x74,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69,
	0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x4e, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x58,
	0x0a, 0x12, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0b, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x2a, 0x55, 0x0a, 0x05, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x52,
	0x41, 0x4e, 0x47, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x59, 0x45, 0x4c, 0x4c, 0x4f, 0x57,
	0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x47, 0x52, 0x45, 0x45, 0x4e, 0x10, 0x03, 0x12, 0x08, 0x0a,
	0x04, 0x42, 0x4c, 0x55, 0x45, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x4e, 0x44, 0x49, 0x47,
	0x4f, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x56, 0x49, 0x4f, 0x4c, 0x45, 0x54, 0x10, 0x06, 0x3a,
	0x6a, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x2e, 0x74,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69,
	0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x64, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x08, 0x65, 0x78, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0xf9, 0x01, 0x0a, 0x1c,
	0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x10, 0x54, 0x65,
	0x73, 0x74, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x02,
	0x50, 0x01, 0x5a, 0x43, 0x67, 0x69, 0x74, 0x65, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x71, 0x63,
	0x69, 0x69, 0x70, 0x2d, 0x69, 0x63, 0x70, 0x2f, 0x74, 0x66, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x6e, 0x67, 0x2f, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x70, 0x79,
	0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x65, 0x73, 0x74,
	0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0xa2, 0x02, 0x03, 0x54, 0x43, 0x50, 0xaa, 0x02, 0x18,
	0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x69, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0xca, 0x02, 0x18, 0x54, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x66, 0x6c, 0x6f, 0x77, 0x5c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x5c, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0xe2, 0x02, 0x24, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77,
	0x5c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x5c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5c, 0x47,
	0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x1a, 0x54, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x3a, 0x3a, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62,
	0x3a, 0x3a, 0x50, 0x72, 0x6f, 0x74, 0x6f,
}

var (
	file_tensorflow_python_kernel_tests_proto_test_example_proto_rawDescOnce sync.Once
	file_tensorflow_python_kernel_tests_proto_test_example_proto_rawDescData = file_tensorflow_python_kernel_tests_proto_test_example_proto_rawDesc
)

func file_tensorflow_python_kernel_tests_proto_test_example_proto_rawDescGZIP() []byte {
	file_tensorflow_python_kernel_tests_proto_test_example_proto_rawDescOnce.Do(func() {
		file_tensorflow_python_kernel_tests_proto_test_example_proto_rawDescData = protoimpl.X.CompressGZIP(file_tensorflow_python_kernel_tests_proto_test_example_proto_rawDescData)
	})
	return file_tensorflow_python_kernel_tests_proto_test_example_proto_rawDescData
}

var file_tensorflow_python_kernel_tests_proto_test_example_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_tensorflow_python_kernel_tests_proto_test_example_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_tensorflow_python_kernel_tests_proto_test_example_proto_goTypes = []interface{}{
	(Color)(0),                                      // 0: tensorflow.contrib.proto.Color
	(*TestCase)(nil),                                // 1: tensorflow.contrib.proto.TestCase
	(*FieldSpec)(nil),                               // 2: tensorflow.contrib.proto.FieldSpec
	(*TestValue)(nil),                               // 3: tensorflow.contrib.proto.TestValue
	(*PackedTestValue)(nil),                         // 4: tensorflow.contrib.proto.PackedTestValue
	(*PrimitiveValue)(nil),                          // 5: tensorflow.contrib.proto.PrimitiveValue
	(*ExtraFields)(nil),                             // 6: tensorflow.contrib.proto.ExtraFields
	(*InnerMessageValue)(nil),                       // 7: tensorflow.contrib.proto.InnerMessageValue
	(*MiddleMessageValue)(nil),                      // 8: tensorflow.contrib.proto.MiddleMessageValue
	(*MessageValue)(nil),                            // 9: tensorflow.contrib.proto.MessageValue
	(*RepeatedMessageValue)(nil),                    // 10: tensorflow.contrib.proto.RepeatedMessageValue
	(*RepeatedMessageValue_NestedMessageValue)(nil), // 11: tensorflow.contrib.proto.RepeatedMessageValue.NestedMessageValue
	(framework.DataType)(0),                         // 12: tensorflow.DataType
}
var file_tensorflow_python_kernel_tests_proto_test_example_proto_depIdxs = []int32{
	3,  // 0: tensorflow.contrib.proto.TestCase.values:type_name -> tensorflow.contrib.proto.TestValue
	2,  // 1: tensorflow.contrib.proto.TestCase.fields:type_name -> tensorflow.contrib.proto.FieldSpec
	12, // 2: tensorflow.contrib.proto.FieldSpec.dtype:type_name -> tensorflow.DataType
	3,  // 3: tensorflow.contrib.proto.FieldSpec.value:type_name -> tensorflow.contrib.proto.TestValue
	5,  // 4: tensorflow.contrib.proto.TestValue.message_value:type_name -> tensorflow.contrib.proto.PrimitiveValue
	0,  // 5: tensorflow.contrib.proto.TestValue.enum_value:type_name -> tensorflow.contrib.proto.Color
	0,  // 6: tensorflow.contrib.proto.TestValue.enum_value_with_default:type_name -> tensorflow.contrib.proto.Color
	5,  // 7: tensorflow.contrib.proto.PackedTestValue.message_value:type_name -> tensorflow.contrib.proto.PrimitiveValue
	0,  // 8: tensorflow.contrib.proto.PackedTestValue.enum_value:type_name -> tensorflow.contrib.proto.Color
	0,  // 9: tensorflow.contrib.proto.PackedTestValue.enum_value_with_default:type_name -> tensorflow.contrib.proto.Color
	7,  // 10: tensorflow.contrib.proto.MiddleMessageValue.message_value:type_name -> tensorflow.contrib.proto.InnerMessageValue
	8,  // 11: tensorflow.contrib.proto.MessageValue.message_value:type_name -> tensorflow.contrib.proto.MiddleMessageValue
	11, // 12: tensorflow.contrib.proto.RepeatedMessageValue.message_values:type_name -> tensorflow.contrib.proto.RepeatedMessageValue.NestedMessageValue
	3,  // 13: tensorflow.contrib.proto.ext_value:extendee -> tensorflow.contrib.proto.TestValue
	5,  // 14: tensorflow.contrib.proto.ext_value:type_name -> tensorflow.contrib.proto.PrimitiveValue
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	14, // [14:15] is the sub-list for extension type_name
	13, // [13:14] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_tensorflow_python_kernel_tests_proto_test_example_proto_init() }
func file_tensorflow_python_kernel_tests_proto_test_example_proto_init() {
	if File_tensorflow_python_kernel_tests_proto_test_example_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tensorflow_python_kernel_tests_proto_test_example_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestCase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_python_kernel_tests_proto_test_example_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_python_kernel_tests_proto_test_example_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			case 3:
				return &v.extensionFields
			default:
				return nil
			}
		}
		file_tensorflow_python_kernel_tests_proto_test_example_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackedTestValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_python_kernel_tests_proto_test_example_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrimitiveValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_python_kernel_tests_proto_test_example_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtraFields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_python_kernel_tests_proto_test_example_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InnerMessageValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_python_kernel_tests_proto_test_example_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiddleMessageValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_python_kernel_tests_proto_test_example_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_python_kernel_tests_proto_test_example_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepeatedMessageValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_python_kernel_tests_proto_test_example_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepeatedMessageValue_NestedMessageValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tensorflow_python_kernel_tests_proto_test_example_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   11,
			NumExtensions: 1,
			NumServices:   0,
		},
		GoTypes:           file_tensorflow_python_kernel_tests_proto_test_example_proto_goTypes,
		DependencyIndexes: file_tensorflow_python_kernel_tests_proto_test_example_proto_depIdxs,
		EnumInfos:         file_tensorflow_python_kernel_tests_proto_test_example_proto_enumTypes,
		MessageInfos:      file_tensorflow_python_kernel_tests_proto_test_example_proto_msgTypes,
		ExtensionInfos:    file_tensorflow_python_kernel_tests_proto_test_example_proto_extTypes,
	}.Build()
	File_tensorflow_python_kernel_tests_proto_test_example_proto = out.File
	file_tensorflow_python_kernel_tests_proto_test_example_proto_rawDesc = nil
	file_tensorflow_python_kernel_tests_proto_test_example_proto_goTypes = nil
	file_tensorflow_python_kernel_tests_proto_test_example_proto_depIdxs = nil
}
