// Copyright 2019 The TensorFlow Authors. All Rights Reserved.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//==============================================================================

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: tensorflow/lite/tools/evaluation/proto/evaluation_stages.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TfliteInferenceParams_Delegate int32

const (
	TfliteInferenceParams_NONE    TfliteInferenceParams_Delegate = 0
	TfliteInferenceParams_NNAPI   TfliteInferenceParams_Delegate = 1
	TfliteInferenceParams_GPU     TfliteInferenceParams_Delegate = 2
	TfliteInferenceParams_HEXAGON TfliteInferenceParams_Delegate = 3
	TfliteInferenceParams_XNNPACK TfliteInferenceParams_Delegate = 4
	TfliteInferenceParams_COREML  TfliteInferenceParams_Delegate = 5
)

// Enum value maps for TfliteInferenceParams_Delegate.
var (
	TfliteInferenceParams_Delegate_name = map[int32]string{
		0: "NONE",
		1: "NNAPI",
		2: "GPU",
		3: "HEXAGON",
		4: "XNNPACK",
		5: "COREML",
	}
	TfliteInferenceParams_Delegate_value = map[string]int32{
		"NONE":    0,
		"NNAPI":   1,
		"GPU":     2,
		"HEXAGON": 3,
		"XNNPACK": 4,
		"COREML":  5,
	}
)

func (x TfliteInferenceParams_Delegate) Enum() *TfliteInferenceParams_Delegate {
	p := new(TfliteInferenceParams_Delegate)
	*p = x
	return p
}

func (x TfliteInferenceParams_Delegate) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TfliteInferenceParams_Delegate) Descriptor() protoreflect.EnumDescriptor {
	return file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_enumTypes[0].Descriptor()
}

func (TfliteInferenceParams_Delegate) Type() protoreflect.EnumType {
	return &file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_enumTypes[0]
}

func (x TfliteInferenceParams_Delegate) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TfliteInferenceParams_Delegate) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TfliteInferenceParams_Delegate(num)
	return nil
}

// Deprecated: Use TfliteInferenceParams_Delegate.Descriptor instead.
func (TfliteInferenceParams_Delegate) EnumDescriptor() ([]byte, []int) {
	return file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_rawDescGZIP(), []int{5, 0}
}

// Defines the functionality executed by an EvaluationStage.
//
// Next ID: 7
type ProcessSpecification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Params:
	//
	//	*ProcessSpecification_ImagePreprocessingParams
	//	*ProcessSpecification_TopkAccuracyEvalParams
	//	*ProcessSpecification_TfliteInferenceParams
	//	*ProcessSpecification_ImageClassificationParams
	//	*ProcessSpecification_ObjectDetectionAveragePrecisionParams
	//	*ProcessSpecification_ObjectDetectionParams
	Params isProcessSpecification_Params `protobuf_oneof:"params"`
}

func (x *ProcessSpecification) Reset() {
	*x = ProcessSpecification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessSpecification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessSpecification) ProtoMessage() {}

func (x *ProcessSpecification) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessSpecification.ProtoReflect.Descriptor instead.
func (*ProcessSpecification) Descriptor() ([]byte, []int) {
	return file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_rawDescGZIP(), []int{0}
}

func (m *ProcessSpecification) GetParams() isProcessSpecification_Params {
	if m != nil {
		return m.Params
	}
	return nil
}

func (x *ProcessSpecification) GetImagePreprocessingParams() *ImagePreprocessingParams {
	if x, ok := x.GetParams().(*ProcessSpecification_ImagePreprocessingParams); ok {
		return x.ImagePreprocessingParams
	}
	return nil
}

func (x *ProcessSpecification) GetTopkAccuracyEvalParams() *TopkAccuracyEvalParams {
	if x, ok := x.GetParams().(*ProcessSpecification_TopkAccuracyEvalParams); ok {
		return x.TopkAccuracyEvalParams
	}
	return nil
}

func (x *ProcessSpecification) GetTfliteInferenceParams() *TfliteInferenceParams {
	if x, ok := x.GetParams().(*ProcessSpecification_TfliteInferenceParams); ok {
		return x.TfliteInferenceParams
	}
	return nil
}

func (x *ProcessSpecification) GetImageClassificationParams() *ImageClassificationParams {
	if x, ok := x.GetParams().(*ProcessSpecification_ImageClassificationParams); ok {
		return x.ImageClassificationParams
	}
	return nil
}

func (x *ProcessSpecification) GetObjectDetectionAveragePrecisionParams() *ObjectDetectionAveragePrecisionParams {
	if x, ok := x.GetParams().(*ProcessSpecification_ObjectDetectionAveragePrecisionParams); ok {
		return x.ObjectDetectionAveragePrecisionParams
	}
	return nil
}

func (x *ProcessSpecification) GetObjectDetectionParams() *ObjectDetectionParams {
	if x, ok := x.GetParams().(*ProcessSpecification_ObjectDetectionParams); ok {
		return x.ObjectDetectionParams
	}
	return nil
}

type isProcessSpecification_Params interface {
	isProcessSpecification_Params()
}

type ProcessSpecification_ImagePreprocessingParams struct {
	ImagePreprocessingParams *ImagePreprocessingParams `protobuf:"bytes,1,opt,name=image_preprocessing_params,json=imagePreprocessingParams,oneof"`
}

type ProcessSpecification_TopkAccuracyEvalParams struct {
	TopkAccuracyEvalParams *TopkAccuracyEvalParams `protobuf:"bytes,2,opt,name=topk_accuracy_eval_params,json=topkAccuracyEvalParams,oneof"`
}

type ProcessSpecification_TfliteInferenceParams struct {
	TfliteInferenceParams *TfliteInferenceParams `protobuf:"bytes,3,opt,name=tflite_inference_params,json=tfliteInferenceParams,oneof"`
}

type ProcessSpecification_ImageClassificationParams struct {
	ImageClassificationParams *ImageClassificationParams `protobuf:"bytes,4,opt,name=image_classification_params,json=imageClassificationParams,oneof"`
}

type ProcessSpecification_ObjectDetectionAveragePrecisionParams struct {
	ObjectDetectionAveragePrecisionParams *ObjectDetectionAveragePrecisionParams `protobuf:"bytes,5,opt,name=object_detection_average_precision_params,json=objectDetectionAveragePrecisionParams,oneof"`
}

type ProcessSpecification_ObjectDetectionParams struct {
	ObjectDetectionParams *ObjectDetectionParams `protobuf:"bytes,6,opt,name=object_detection_params,json=objectDetectionParams,oneof"`
}

func (*ProcessSpecification_ImagePreprocessingParams) isProcessSpecification_Params() {}

func (*ProcessSpecification_TopkAccuracyEvalParams) isProcessSpecification_Params() {}

func (*ProcessSpecification_TfliteInferenceParams) isProcessSpecification_Params() {}

func (*ProcessSpecification_ImageClassificationParams) isProcessSpecification_Params() {}

func (*ProcessSpecification_ObjectDetectionAveragePrecisionParams) isProcessSpecification_Params() {}

func (*ProcessSpecification_ObjectDetectionParams) isProcessSpecification_Params() {}

// Latency numbers in microseconds, based on all EvaluationStage::Run() calls so
// far.
//
// Next ID: 7
type LatencyMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Latency for the last Run.
	LastUs *int64 `protobuf:"varint,1,opt,name=last_us,json=lastUs" json:"last_us,omitempty"`
	// Maximum latency observed for any Run.
	MaxUs *int64 `protobuf:"varint,2,opt,name=max_us,json=maxUs" json:"max_us,omitempty"`
	// Minimum latency observed for any Run.
	MinUs *int64 `protobuf:"varint,3,opt,name=min_us,json=minUs" json:"min_us,omitempty"`
	// Sum of all Run latencies.
	SumUs *int64 `protobuf:"varint,4,opt,name=sum_us,json=sumUs" json:"sum_us,omitempty"`
	// Average latency across all Runs.
	AvgUs *float64 `protobuf:"fixed64,5,opt,name=avg_us,json=avgUs" json:"avg_us,omitempty"`
	// Standard deviation for latency across all Runs.
	StdDeviationUs *int64 `protobuf:"varint,6,opt,name=std_deviation_us,json=stdDeviationUs" json:"std_deviation_us,omitempty"`
}

func (x *LatencyMetrics) Reset() {
	*x = LatencyMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LatencyMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LatencyMetrics) ProtoMessage() {}

func (x *LatencyMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LatencyMetrics.ProtoReflect.Descriptor instead.
func (*LatencyMetrics) Descriptor() ([]byte, []int) {
	return file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_rawDescGZIP(), []int{1}
}

func (x *LatencyMetrics) GetLastUs() int64 {
	if x != nil && x.LastUs != nil {
		return *x.LastUs
	}
	return 0
}

func (x *LatencyMetrics) GetMaxUs() int64 {
	if x != nil && x.MaxUs != nil {
		return *x.MaxUs
	}
	return 0
}

func (x *LatencyMetrics) GetMinUs() int64 {
	if x != nil && x.MinUs != nil {
		return *x.MinUs
	}
	return 0
}

func (x *LatencyMetrics) GetSumUs() int64 {
	if x != nil && x.SumUs != nil {
		return *x.SumUs
	}
	return 0
}

func (x *LatencyMetrics) GetAvgUs() float64 {
	if x != nil && x.AvgUs != nil {
		return *x.AvgUs
	}
	return 0
}

func (x *LatencyMetrics) GetStdDeviationUs() int64 {
	if x != nil && x.StdDeviationUs != nil {
		return *x.StdDeviationUs
	}
	return 0
}

// Statistics for an accuracy value over multiple runs of evaluation.
//
// Next ID: 5
type AccuracyMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Maximum value observed for any Run.
	MaxValue *float32 `protobuf:"fixed32,1,opt,name=max_value,json=maxValue" json:"max_value,omitempty"`
	// Minimum value observed for any Run.
	MinValue *float32 `protobuf:"fixed32,2,opt,name=min_value,json=minValue" json:"min_value,omitempty"`
	// Average value across all Runs.
	AvgValue *float64 `protobuf:"fixed64,3,opt,name=avg_value,json=avgValue" json:"avg_value,omitempty"`
	// Standard deviation across all Runs.
	StdDeviation *float32 `protobuf:"fixed32,4,opt,name=std_deviation,json=stdDeviation" json:"std_deviation,omitempty"`
}

func (x *AccuracyMetrics) Reset() {
	*x = AccuracyMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccuracyMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccuracyMetrics) ProtoMessage() {}

func (x *AccuracyMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccuracyMetrics.ProtoReflect.Descriptor instead.
func (*AccuracyMetrics) Descriptor() ([]byte, []int) {
	return file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_rawDescGZIP(), []int{2}
}

func (x *AccuracyMetrics) GetMaxValue() float32 {
	if x != nil && x.MaxValue != nil {
		return *x.MaxValue
	}
	return 0
}

func (x *AccuracyMetrics) GetMinValue() float32 {
	if x != nil && x.MinValue != nil {
		return *x.MinValue
	}
	return 0
}

func (x *AccuracyMetrics) GetAvgValue() float64 {
	if x != nil && x.AvgValue != nil {
		return *x.AvgValue
	}
	return 0
}

func (x *AccuracyMetrics) GetStdDeviation() float32 {
	if x != nil && x.StdDeviation != nil {
		return *x.StdDeviation
	}
	return 0
}

// Contains process-specific metrics, which may differ based on what an
// EvaluationStage does.
//
// Next ID: 8
type ProcessMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalLatency *LatencyMetrics `protobuf:"bytes,1,opt,name=total_latency,json=totalLatency" json:"total_latency,omitempty"`
	// Types that are assignable to StageMetrics:
	//
	//	*ProcessMetrics_TopkAccuracyMetrics
	//	*ProcessMetrics_TfliteInferenceMetrics
	//	*ProcessMetrics_ImageClassificationMetrics
	//	*ProcessMetrics_InferenceProfilerMetrics
	//	*ProcessMetrics_ObjectDetectionAveragePrecisionMetrics
	//	*ProcessMetrics_ObjectDetectionMetrics
	StageMetrics isProcessMetrics_StageMetrics `protobuf_oneof:"stage_metrics"`
}

func (x *ProcessMetrics) Reset() {
	*x = ProcessMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessMetrics) ProtoMessage() {}

func (x *ProcessMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessMetrics.ProtoReflect.Descriptor instead.
func (*ProcessMetrics) Descriptor() ([]byte, []int) {
	return file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_rawDescGZIP(), []int{3}
}

func (x *ProcessMetrics) GetTotalLatency() *LatencyMetrics {
	if x != nil {
		return x.TotalLatency
	}
	return nil
}

func (m *ProcessMetrics) GetStageMetrics() isProcessMetrics_StageMetrics {
	if m != nil {
		return m.StageMetrics
	}
	return nil
}

func (x *ProcessMetrics) GetTopkAccuracyMetrics() *TopkAccuracyEvalMetrics {
	if x, ok := x.GetStageMetrics().(*ProcessMetrics_TopkAccuracyMetrics); ok {
		return x.TopkAccuracyMetrics
	}
	return nil
}

func (x *ProcessMetrics) GetTfliteInferenceMetrics() *TfliteInferenceMetrics {
	if x, ok := x.GetStageMetrics().(*ProcessMetrics_TfliteInferenceMetrics); ok {
		return x.TfliteInferenceMetrics
	}
	return nil
}

func (x *ProcessMetrics) GetImageClassificationMetrics() *ImageClassificationMetrics {
	if x, ok := x.GetStageMetrics().(*ProcessMetrics_ImageClassificationMetrics); ok {
		return x.ImageClassificationMetrics
	}
	return nil
}

func (x *ProcessMetrics) GetInferenceProfilerMetrics() *InferenceProfilerMetrics {
	if x, ok := x.GetStageMetrics().(*ProcessMetrics_InferenceProfilerMetrics); ok {
		return x.InferenceProfilerMetrics
	}
	return nil
}

func (x *ProcessMetrics) GetObjectDetectionAveragePrecisionMetrics() *ObjectDetectionAveragePrecisionMetrics {
	if x, ok := x.GetStageMetrics().(*ProcessMetrics_ObjectDetectionAveragePrecisionMetrics); ok {
		return x.ObjectDetectionAveragePrecisionMetrics
	}
	return nil
}

func (x *ProcessMetrics) GetObjectDetectionMetrics() *ObjectDetectionMetrics {
	if x, ok := x.GetStageMetrics().(*ProcessMetrics_ObjectDetectionMetrics); ok {
		return x.ObjectDetectionMetrics
	}
	return nil
}

type isProcessMetrics_StageMetrics interface {
	isProcessMetrics_StageMetrics()
}

type ProcessMetrics_TopkAccuracyMetrics struct {
	TopkAccuracyMetrics *TopkAccuracyEvalMetrics `protobuf:"bytes,2,opt,name=topk_accuracy_metrics,json=topkAccuracyMetrics,oneof"`
}

type ProcessMetrics_TfliteInferenceMetrics struct {
	TfliteInferenceMetrics *TfliteInferenceMetrics `protobuf:"bytes,3,opt,name=tflite_inference_metrics,json=tfliteInferenceMetrics,oneof"`
}

type ProcessMetrics_ImageClassificationMetrics struct {
	ImageClassificationMetrics *ImageClassificationMetrics `protobuf:"bytes,4,opt,name=image_classification_metrics,json=imageClassificationMetrics,oneof"`
}

type ProcessMetrics_InferenceProfilerMetrics struct {
	InferenceProfilerMetrics *InferenceProfilerMetrics `protobuf:"bytes,5,opt,name=inference_profiler_metrics,json=inferenceProfilerMetrics,oneof"`
}

type ProcessMetrics_ObjectDetectionAveragePrecisionMetrics struct {
	ObjectDetectionAveragePrecisionMetrics *ObjectDetectionAveragePrecisionMetrics `protobuf:"bytes,6,opt,name=object_detection_average_precision_metrics,json=objectDetectionAveragePrecisionMetrics,oneof"`
}

type ProcessMetrics_ObjectDetectionMetrics struct {
	ObjectDetectionMetrics *ObjectDetectionMetrics `protobuf:"bytes,7,opt,name=object_detection_metrics,json=objectDetectionMetrics,oneof"`
}

func (*ProcessMetrics_TopkAccuracyMetrics) isProcessMetrics_StageMetrics() {}

func (*ProcessMetrics_TfliteInferenceMetrics) isProcessMetrics_StageMetrics() {}

func (*ProcessMetrics_ImageClassificationMetrics) isProcessMetrics_StageMetrics() {}

func (*ProcessMetrics_InferenceProfilerMetrics) isProcessMetrics_StageMetrics() {}

func (*ProcessMetrics_ObjectDetectionAveragePrecisionMetrics) isProcessMetrics_StageMetrics() {}

func (*ProcessMetrics_ObjectDetectionMetrics) isProcessMetrics_StageMetrics() {}

// Parameters that define how images are preprocessed.
//
// Next ID: 3
type ImagePreprocessingParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required.
	Steps []*ImagePreprocessingStepParams `protobuf:"bytes,1,rep,name=steps" json:"steps,omitempty"`
	// Same as tflite::TfLiteType.
	OutputType *int32 `protobuf:"varint,2,req,name=output_type,json=outputType" json:"output_type,omitempty"`
}

func (x *ImagePreprocessingParams) Reset() {
	*x = ImagePreprocessingParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImagePreprocessingParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImagePreprocessingParams) ProtoMessage() {}

func (x *ImagePreprocessingParams) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImagePreprocessingParams.ProtoReflect.Descriptor instead.
func (*ImagePreprocessingParams) Descriptor() ([]byte, []int) {
	return file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_rawDescGZIP(), []int{4}
}

func (x *ImagePreprocessingParams) GetSteps() []*ImagePreprocessingStepParams {
	if x != nil {
		return x.Steps
	}
	return nil
}

func (x *ImagePreprocessingParams) GetOutputType() int32 {
	if x != nil && x.OutputType != nil {
		return *x.OutputType
	}
	return 0
}

// Parameters that control TFLite inference.
//
// Next ID: 5
type TfliteInferenceParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required
	ModelFilePath *string                         `protobuf:"bytes,1,opt,name=model_file_path,json=modelFilePath" json:"model_file_path,omitempty"`
	Delegate      *TfliteInferenceParams_Delegate `protobuf:"varint,2,opt,name=delegate,enum=tflite.evaluation.TfliteInferenceParams_Delegate" json:"delegate,omitempty"`
	// Number of threads available to the TFLite Interpreter.
	NumThreads *int32 `protobuf:"varint,3,opt,name=num_threads,json=numThreads,def=1" json:"num_threads,omitempty"`
	// Defines how many times the TFLite Interpreter is invoked for every input.
	// This helps benchmark cases where extensive pre-processing might not be
	// required for every input.
	InvocationsPerRun *int32 `protobuf:"varint,4,opt,name=invocations_per_run,json=invocationsPerRun,def=1" json:"invocations_per_run,omitempty"`
}

// Default values for TfliteInferenceParams fields.
const (
	Default_TfliteInferenceParams_NumThreads        = int32(1)
	Default_TfliteInferenceParams_InvocationsPerRun = int32(1)
)

func (x *TfliteInferenceParams) Reset() {
	*x = TfliteInferenceParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TfliteInferenceParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TfliteInferenceParams) ProtoMessage() {}

func (x *TfliteInferenceParams) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TfliteInferenceParams.ProtoReflect.Descriptor instead.
func (*TfliteInferenceParams) Descriptor() ([]byte, []int) {
	return file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_rawDescGZIP(), []int{5}
}

func (x *TfliteInferenceParams) GetModelFilePath() string {
	if x != nil && x.ModelFilePath != nil {
		return *x.ModelFilePath
	}
	return ""
}

func (x *TfliteInferenceParams) GetDelegate() TfliteInferenceParams_Delegate {
	if x != nil && x.Delegate != nil {
		return *x.Delegate
	}
	return TfliteInferenceParams_NONE
}

func (x *TfliteInferenceParams) GetNumThreads() int32 {
	if x != nil && x.NumThreads != nil {
		return *x.NumThreads
	}
	return Default_TfliteInferenceParams_NumThreads
}

func (x *TfliteInferenceParams) GetInvocationsPerRun() int32 {
	if x != nil && x.InvocationsPerRun != nil {
		return *x.InvocationsPerRun
	}
	return Default_TfliteInferenceParams_InvocationsPerRun
}

// Metrics specific to TFLite inference.
//
// Next ID: 2
type TfliteInferenceMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of times the interpreter is invoked.
	NumInferences *int32 `protobuf:"varint,1,opt,name=num_inferences,json=numInferences" json:"num_inferences,omitempty"`
}

func (x *TfliteInferenceMetrics) Reset() {
	*x = TfliteInferenceMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TfliteInferenceMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TfliteInferenceMetrics) ProtoMessage() {}

func (x *TfliteInferenceMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TfliteInferenceMetrics.ProtoReflect.Descriptor instead.
func (*TfliteInferenceMetrics) Descriptor() ([]byte, []int) {
	return file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_rawDescGZIP(), []int{6}
}

func (x *TfliteInferenceMetrics) GetNumInferences() int32 {
	if x != nil && x.NumInferences != nil {
		return *x.NumInferences
	}
	return 0
}

// Parameters that define how top-K accuracy is evaluated.
//
// Next ID: 2
type TopkAccuracyEvalParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required.
	K *int32 `protobuf:"varint,1,opt,name=k" json:"k,omitempty"`
}

func (x *TopkAccuracyEvalParams) Reset() {
	*x = TopkAccuracyEvalParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopkAccuracyEvalParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopkAccuracyEvalParams) ProtoMessage() {}

func (x *TopkAccuracyEvalParams) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopkAccuracyEvalParams.ProtoReflect.Descriptor instead.
func (*TopkAccuracyEvalParams) Descriptor() ([]byte, []int) {
	return file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_rawDescGZIP(), []int{7}
}

func (x *TopkAccuracyEvalParams) GetK() int32 {
	if x != nil && x.K != nil {
		return *x.K
	}
	return 0
}

// Metrics from top-K accuracy evaluation.
//
// Next ID: 2
type TopkAccuracyEvalMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A repeated field of size |k| where the ith element denotes the fraction of
	// samples for which the correct label was present in the top (i + 1) model
	// outputs.
	// For example, topk_accuracies(1) will contain the fraction of
	// samples for which the model returned the correct label as the top first or
	// second output.
	TopkAccuracies []float32 `protobuf:"fixed32,1,rep,name=topk_accuracies,json=topkAccuracies" json:"topk_accuracies,omitempty"`
}

func (x *TopkAccuracyEvalMetrics) Reset() {
	*x = TopkAccuracyEvalMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopkAccuracyEvalMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopkAccuracyEvalMetrics) ProtoMessage() {}

func (x *TopkAccuracyEvalMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopkAccuracyEvalMetrics.ProtoReflect.Descriptor instead.
func (*TopkAccuracyEvalMetrics) Descriptor() ([]byte, []int) {
	return file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_rawDescGZIP(), []int{8}
}

func (x *TopkAccuracyEvalMetrics) GetTopkAccuracies() []float32 {
	if x != nil {
		return x.TopkAccuracies
	}
	return nil
}

// Parameters that define how the Image Classification task is evaluated
// end-to-end.
//
// Next ID: 3
type ImageClassificationParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required.
	// TfLite model should have 1 input & 1 output tensor.
	// Input shape: {1, image_height, image_width, 3}
	// Output shape: {1, num_total_labels}
	InferenceParams *TfliteInferenceParams `protobuf:"bytes,1,opt,name=inference_params,json=inferenceParams" json:"inference_params,omitempty"`
	// Optional.
	// If not set, accuracy evaluation is not performed.
	TopkAccuracyEvalParams *TopkAccuracyEvalParams `protobuf:"bytes,2,opt,name=topk_accuracy_eval_params,json=topkAccuracyEvalParams" json:"topk_accuracy_eval_params,omitempty"`
}

func (x *ImageClassificationParams) Reset() {
	*x = ImageClassificationParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageClassificationParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageClassificationParams) ProtoMessage() {}

func (x *ImageClassificationParams) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageClassificationParams.ProtoReflect.Descriptor instead.
func (*ImageClassificationParams) Descriptor() ([]byte, []int) {
	return file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_rawDescGZIP(), []int{9}
}

func (x *ImageClassificationParams) GetInferenceParams() *TfliteInferenceParams {
	if x != nil {
		return x.InferenceParams
	}
	return nil
}

func (x *ImageClassificationParams) GetTopkAccuracyEvalParams() *TopkAccuracyEvalParams {
	if x != nil {
		return x.TopkAccuracyEvalParams
	}
	return nil
}

// Metrics from evaluation of the image classification task.
//
// Next ID: 5
type ImageClassificationMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PreProcessingLatency *LatencyMetrics         `protobuf:"bytes,1,opt,name=pre_processing_latency,json=preProcessingLatency" json:"pre_processing_latency,omitempty"`
	InferenceLatency     *LatencyMetrics         `protobuf:"bytes,2,opt,name=inference_latency,json=inferenceLatency" json:"inference_latency,omitempty"`
	InferenceMetrics     *TfliteInferenceMetrics `protobuf:"bytes,3,opt,name=inference_metrics,json=inferenceMetrics" json:"inference_metrics,omitempty"`
	// Not set if topk_accuracy_eval_params was not populated in
	// ImageClassificationParams.
	TopkAccuracyMetrics *TopkAccuracyEvalMetrics `protobuf:"bytes,4,opt,name=topk_accuracy_metrics,json=topkAccuracyMetrics" json:"topk_accuracy_metrics,omitempty"`
}

func (x *ImageClassificationMetrics) Reset() {
	*x = ImageClassificationMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageClassificationMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageClassificationMetrics) ProtoMessage() {}

func (x *ImageClassificationMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageClassificationMetrics.ProtoReflect.Descriptor instead.
func (*ImageClassificationMetrics) Descriptor() ([]byte, []int) {
	return file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_rawDescGZIP(), []int{10}
}

func (x *ImageClassificationMetrics) GetPreProcessingLatency() *LatencyMetrics {
	if x != nil {
		return x.PreProcessingLatency
	}
	return nil
}

func (x *ImageClassificationMetrics) GetInferenceLatency() *LatencyMetrics {
	if x != nil {
		return x.InferenceLatency
	}
	return nil
}

func (x *ImageClassificationMetrics) GetInferenceMetrics() *TfliteInferenceMetrics {
	if x != nil {
		return x.InferenceMetrics
	}
	return nil
}

func (x *ImageClassificationMetrics) GetTopkAccuracyMetrics() *TopkAccuracyEvalMetrics {
	if x != nil {
		return x.TopkAccuracyMetrics
	}
	return nil
}

// Metrics computed from comparing TFLite execution in two settings:
// 1. User-defined TfliteInferenceParams (The 'test' setting)
// 2. Default TfliteInferenceParams (The 'reference' setting)
//
// Next ID: 4
type InferenceProfilerMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Latency metrics from Single-thread CPU inference.
	ReferenceLatency *LatencyMetrics `protobuf:"bytes,1,opt,name=reference_latency,json=referenceLatency" json:"reference_latency,omitempty"`
	// Latency from TfliteInferenceParams under test.
	TestLatency *LatencyMetrics `protobuf:"bytes,2,opt,name=test_latency,json=testLatency" json:"test_latency,omitempty"`
	// For reference & test output vectors {R, T}, the error is computed as:
	// Mean([Abs(R[i] - T[i]) for i in num_elements])
	// output_errors[v] : statistics for the error value of the vth output vector
	//
	//	across all Runs.
	OutputErrors []*AccuracyMetrics `protobuf:"bytes,3,rep,name=output_errors,json=outputErrors" json:"output_errors,omitempty"`
}

func (x *InferenceProfilerMetrics) Reset() {
	*x = InferenceProfilerMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InferenceProfilerMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InferenceProfilerMetrics) ProtoMessage() {}

func (x *InferenceProfilerMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InferenceProfilerMetrics.ProtoReflect.Descriptor instead.
func (*InferenceProfilerMetrics) Descriptor() ([]byte, []int) {
	return file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_rawDescGZIP(), []int{11}
}

func (x *InferenceProfilerMetrics) GetReferenceLatency() *LatencyMetrics {
	if x != nil {
		return x.ReferenceLatency
	}
	return nil
}

func (x *InferenceProfilerMetrics) GetTestLatency() *LatencyMetrics {
	if x != nil {
		return x.TestLatency
	}
	return nil
}

func (x *InferenceProfilerMetrics) GetOutputErrors() []*AccuracyMetrics {
	if x != nil {
		return x.OutputErrors
	}
	return nil
}

// Proto containing information about all the objects (predicted or
// ground-truth) contained in an image.
//
// Next ID: 4
type ObjectDetectionResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Objects []*ObjectDetectionResult_ObjectInstance `protobuf:"bytes,1,rep,name=objects" json:"objects,omitempty"`
	// Filename of the image.
	ImageName *string `protobuf:"bytes,2,opt,name=image_name,json=imageName" json:"image_name,omitempty"`
	// Unique id for the image.
	ImageId *int64 `protobuf:"varint,3,opt,name=image_id,json=imageId" json:"image_id,omitempty"`
}

func (x *ObjectDetectionResult) Reset() {
	*x = ObjectDetectionResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectDetectionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectDetectionResult) ProtoMessage() {}

func (x *ObjectDetectionResult) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectDetectionResult.ProtoReflect.Descriptor instead.
func (*ObjectDetectionResult) Descriptor() ([]byte, []int) {
	return file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_rawDescGZIP(), []int{12}
}

func (x *ObjectDetectionResult) GetObjects() []*ObjectDetectionResult_ObjectInstance {
	if x != nil {
		return x.Objects
	}
	return nil
}

func (x *ObjectDetectionResult) GetImageName() string {
	if x != nil && x.ImageName != nil {
		return *x.ImageName
	}
	return ""
}

func (x *ObjectDetectionResult) GetImageId() int64 {
	if x != nil && x.ImageId != nil {
		return *x.ImageId
	}
	return 0
}

// Proto containing ground-truth ObjectsSets for all images in a COCO validation
// set.
//
// Next ID: 2
type ObjectDetectionGroundTruth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DetectionResults []*ObjectDetectionResult `protobuf:"bytes,1,rep,name=detection_results,json=detectionResults" json:"detection_results,omitempty"`
}

func (x *ObjectDetectionGroundTruth) Reset() {
	*x = ObjectDetectionGroundTruth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectDetectionGroundTruth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectDetectionGroundTruth) ProtoMessage() {}

func (x *ObjectDetectionGroundTruth) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectDetectionGroundTruth.ProtoReflect.Descriptor instead.
func (*ObjectDetectionGroundTruth) Descriptor() ([]byte, []int) {
	return file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_rawDescGZIP(), []int{13}
}

func (x *ObjectDetectionGroundTruth) GetDetectionResults() []*ObjectDetectionResult {
	if x != nil {
		return x.DetectionResults
	}
	return nil
}

// Parameters that define how Average Precision is computed for Object Detection
// task.
// Refer for details: http://cocodataset.org/#detection-eval
//
// Next ID: 4
type ObjectDetectionAveragePrecisionParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total object classes. The AP value returned for each IoU threshold is an
	// average over all classes encountered in predicted/ground truth sets.
	NumClasses *int32 `protobuf:"varint,1,opt,name=num_classes,json=numClasses" json:"num_classes,omitempty"`
	// A predicted box matches a ground truth box if and only if
	// IoU between these two are larger than an IoU threshold.
	// AP is computed for all relevant {IoU threshold, class} combinations and
	// averaged to get mAP.
	// If left empty, evaluation is done for all IoU threshods in the range
	// 0.5:0.05:0.95 (min:increment:max).
	IouThresholds []float32 `protobuf:"fixed32,2,rep,name=iou_thresholds,json=iouThresholds" json:"iou_thresholds,omitempty"`
	// AP is computed as the average of maximum precision at (1
	// + num_recall_points) recall levels. E.g., if num_recall_points is 10,
	// recall levels are 0., 0.1, 0.2, ..., 0.9, 1.0.
	// Default: 100
	NumRecallPoints *int32 `protobuf:"varint,3,opt,name=num_recall_points,json=numRecallPoints,def=100" json:"num_recall_points,omitempty"`
}

// Default values for ObjectDetectionAveragePrecisionParams fields.
const (
	Default_ObjectDetectionAveragePrecisionParams_NumRecallPoints = int32(100)
)

func (x *ObjectDetectionAveragePrecisionParams) Reset() {
	*x = ObjectDetectionAveragePrecisionParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectDetectionAveragePrecisionParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectDetectionAveragePrecisionParams) ProtoMessage() {}

func (x *ObjectDetectionAveragePrecisionParams) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectDetectionAveragePrecisionParams.ProtoReflect.Descriptor instead.
func (*ObjectDetectionAveragePrecisionParams) Descriptor() ([]byte, []int) {
	return file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_rawDescGZIP(), []int{14}
}

func (x *ObjectDetectionAveragePrecisionParams) GetNumClasses() int32 {
	if x != nil && x.NumClasses != nil {
		return *x.NumClasses
	}
	return 0
}

func (x *ObjectDetectionAveragePrecisionParams) GetIouThresholds() []float32 {
	if x != nil {
		return x.IouThresholds
	}
	return nil
}

func (x *ObjectDetectionAveragePrecisionParams) GetNumRecallPoints() int32 {
	if x != nil && x.NumRecallPoints != nil {
		return *x.NumRecallPoints
	}
	return Default_ObjectDetectionAveragePrecisionParams_NumRecallPoints
}

// Average Precision metrics from Object Detection task.
//
// Next ID: 3
type ObjectDetectionAveragePrecisionMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// One entry for each in
	// ObjectDetectionAveragePrecisionParams::iou_thresholds, averaged over all
	// classes.
	IndividualAveragePrecisions []*ObjectDetectionAveragePrecisionMetrics_AveragePrecision `protobuf:"bytes,1,rep,name=individual_average_precisions,json=individualAveragePrecisions" json:"individual_average_precisions,omitempty"`
	// Average of Average Precision across all IoU thresholds.
	OverallMeanAveragePrecision *float32 `protobuf:"fixed32,2,opt,name=overall_mean_average_precision,json=overallMeanAveragePrecision" json:"overall_mean_average_precision,omitempty"`
}

func (x *ObjectDetectionAveragePrecisionMetrics) Reset() {
	*x = ObjectDetectionAveragePrecisionMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectDetectionAveragePrecisionMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectDetectionAveragePrecisionMetrics) ProtoMessage() {}

func (x *ObjectDetectionAveragePrecisionMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectDetectionAveragePrecisionMetrics.ProtoReflect.Descriptor instead.
func (*ObjectDetectionAveragePrecisionMetrics) Descriptor() ([]byte, []int) {
	return file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_rawDescGZIP(), []int{15}
}

func (x *ObjectDetectionAveragePrecisionMetrics) GetIndividualAveragePrecisions() []*ObjectDetectionAveragePrecisionMetrics_AveragePrecision {
	if x != nil {
		return x.IndividualAveragePrecisions
	}
	return nil
}

func (x *ObjectDetectionAveragePrecisionMetrics) GetOverallMeanAveragePrecision() float32 {
	if x != nil && x.OverallMeanAveragePrecision != nil {
		return *x.OverallMeanAveragePrecision
	}
	return 0
}

// Parameters that define how the Object Detection task is evaluated
// end-to-end.
//
// Next ID: 4
type ObjectDetectionParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required.
	// Model's outputs should be same as a TFLite-compatible SSD model.
	// Refer:
	// https://www.tensorflow.org/lite/examples/object_detection/overview#output_signature
	InferenceParams *TfliteInferenceParams `protobuf:"bytes,1,opt,name=inference_params,json=inferenceParams" json:"inference_params,omitempty"`
	// Optional. Used to match ground-truth categories with model output.
	// SSD Mobilenet V1 Model trained on COCO assumes class 0 is background class
	// in the label file and class labels start from 1 to number_of_classes+1.
	// Therefore, default value is set as 1.
	ClassOffset *int32                                 `protobuf:"varint,2,opt,name=class_offset,json=classOffset,def=1" json:"class_offset,omitempty"`
	ApParams    *ObjectDetectionAveragePrecisionParams `protobuf:"bytes,3,opt,name=ap_params,json=apParams" json:"ap_params,omitempty"`
}

// Default values for ObjectDetectionParams fields.
const (
	Default_ObjectDetectionParams_ClassOffset = int32(1)
)

func (x *ObjectDetectionParams) Reset() {
	*x = ObjectDetectionParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectDetectionParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectDetectionParams) ProtoMessage() {}

func (x *ObjectDetectionParams) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectDetectionParams.ProtoReflect.Descriptor instead.
func (*ObjectDetectionParams) Descriptor() ([]byte, []int) {
	return file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_rawDescGZIP(), []int{16}
}

func (x *ObjectDetectionParams) GetInferenceParams() *TfliteInferenceParams {
	if x != nil {
		return x.InferenceParams
	}
	return nil
}

func (x *ObjectDetectionParams) GetClassOffset() int32 {
	if x != nil && x.ClassOffset != nil {
		return *x.ClassOffset
	}
	return Default_ObjectDetectionParams_ClassOffset
}

func (x *ObjectDetectionParams) GetApParams() *ObjectDetectionAveragePrecisionParams {
	if x != nil {
		return x.ApParams
	}
	return nil
}

// Metrics from evaluation of the object detection task.
//
// Next ID: 5
type ObjectDetectionMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PreProcessingLatency    *LatencyMetrics                         `protobuf:"bytes,1,opt,name=pre_processing_latency,json=preProcessingLatency" json:"pre_processing_latency,omitempty"`
	InferenceLatency        *LatencyMetrics                         `protobuf:"bytes,2,opt,name=inference_latency,json=inferenceLatency" json:"inference_latency,omitempty"`
	InferenceMetrics        *TfliteInferenceMetrics                 `protobuf:"bytes,3,opt,name=inference_metrics,json=inferenceMetrics" json:"inference_metrics,omitempty"`
	AveragePrecisionMetrics *ObjectDetectionAveragePrecisionMetrics `protobuf:"bytes,4,opt,name=average_precision_metrics,json=averagePrecisionMetrics" json:"average_precision_metrics,omitempty"`
}

func (x *ObjectDetectionMetrics) Reset() {
	*x = ObjectDetectionMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectDetectionMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectDetectionMetrics) ProtoMessage() {}

func (x *ObjectDetectionMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectDetectionMetrics.ProtoReflect.Descriptor instead.
func (*ObjectDetectionMetrics) Descriptor() ([]byte, []int) {
	return file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_rawDescGZIP(), []int{17}
}

func (x *ObjectDetectionMetrics) GetPreProcessingLatency() *LatencyMetrics {
	if x != nil {
		return x.PreProcessingLatency
	}
	return nil
}

func (x *ObjectDetectionMetrics) GetInferenceLatency() *LatencyMetrics {
	if x != nil {
		return x.InferenceLatency
	}
	return nil
}

func (x *ObjectDetectionMetrics) GetInferenceMetrics() *TfliteInferenceMetrics {
	if x != nil {
		return x.InferenceMetrics
	}
	return nil
}

func (x *ObjectDetectionMetrics) GetAveragePrecisionMetrics() *ObjectDetectionAveragePrecisionMetrics {
	if x != nil {
		return x.AveragePrecisionMetrics
	}
	return nil
}

// One instance of an object detected in an image.
// Next ID: 4
type ObjectDetectionResult_ObjectInstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required.
	ClassId *int32 `protobuf:"varint,1,opt,name=class_id,json=classId" json:"class_id,omitempty"`
	// Required
	BoundingBox *ObjectDetectionResult_ObjectInstance_NormalizedBoundingBox `protobuf:"bytes,2,opt,name=bounding_box,json=boundingBox" json:"bounding_box,omitempty"`
	// Value in (0, 1.0] denoting confidence in this prediction.
	// Default value of 1.0 for ground-truth data.
	Score *float32 `protobuf:"fixed32,3,opt,name=score,def=1" json:"score,omitempty"`
}

// Default values for ObjectDetectionResult_ObjectInstance fields.
const (
	Default_ObjectDetectionResult_ObjectInstance_Score = float32(1)
)

func (x *ObjectDetectionResult_ObjectInstance) Reset() {
	*x = ObjectDetectionResult_ObjectInstance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectDetectionResult_ObjectInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectDetectionResult_ObjectInstance) ProtoMessage() {}

func (x *ObjectDetectionResult_ObjectInstance) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectDetectionResult_ObjectInstance.ProtoReflect.Descriptor instead.
func (*ObjectDetectionResult_ObjectInstance) Descriptor() ([]byte, []int) {
	return file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_rawDescGZIP(), []int{12, 0}
}

func (x *ObjectDetectionResult_ObjectInstance) GetClassId() int32 {
	if x != nil && x.ClassId != nil {
		return *x.ClassId
	}
	return 0
}

func (x *ObjectDetectionResult_ObjectInstance) GetBoundingBox() *ObjectDetectionResult_ObjectInstance_NormalizedBoundingBox {
	if x != nil {
		return x.BoundingBox
	}
	return nil
}

func (x *ObjectDetectionResult_ObjectInstance) GetScore() float32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return Default_ObjectDetectionResult_ObjectInstance_Score
}

// Defines the bounding box for a detected object.
// Next ID: 5
type ObjectDetectionResult_ObjectInstance_NormalizedBoundingBox struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// All boundaries defined below are required.
	// Each boundary value should be normalized with respect to the image
	// dimensions. This helps evaluate detections independent of image size.
	// For example, normalized_top = top_boundary / image_height.
	NormalizedTop    *float32 `protobuf:"fixed32,1,opt,name=normalized_top,json=normalizedTop" json:"normalized_top,omitempty"`
	NormalizedBottom *float32 `protobuf:"fixed32,2,opt,name=normalized_bottom,json=normalizedBottom" json:"normalized_bottom,omitempty"`
	NormalizedLeft   *float32 `protobuf:"fixed32,3,opt,name=normalized_left,json=normalizedLeft" json:"normalized_left,omitempty"`
	NormalizedRight  *float32 `protobuf:"fixed32,4,opt,name=normalized_right,json=normalizedRight" json:"normalized_right,omitempty"`
}

func (x *ObjectDetectionResult_ObjectInstance_NormalizedBoundingBox) Reset() {
	*x = ObjectDetectionResult_ObjectInstance_NormalizedBoundingBox{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectDetectionResult_ObjectInstance_NormalizedBoundingBox) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectDetectionResult_ObjectInstance_NormalizedBoundingBox) ProtoMessage() {}

func (x *ObjectDetectionResult_ObjectInstance_NormalizedBoundingBox) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectDetectionResult_ObjectInstance_NormalizedBoundingBox.ProtoReflect.Descriptor instead.
func (*ObjectDetectionResult_ObjectInstance_NormalizedBoundingBox) Descriptor() ([]byte, []int) {
	return file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_rawDescGZIP(), []int{12, 0, 0}
}

func (x *ObjectDetectionResult_ObjectInstance_NormalizedBoundingBox) GetNormalizedTop() float32 {
	if x != nil && x.NormalizedTop != nil {
		return *x.NormalizedTop
	}
	return 0
}

func (x *ObjectDetectionResult_ObjectInstance_NormalizedBoundingBox) GetNormalizedBottom() float32 {
	if x != nil && x.NormalizedBottom != nil {
		return *x.NormalizedBottom
	}
	return 0
}

func (x *ObjectDetectionResult_ObjectInstance_NormalizedBoundingBox) GetNormalizedLeft() float32 {
	if x != nil && x.NormalizedLeft != nil {
		return *x.NormalizedLeft
	}
	return 0
}

func (x *ObjectDetectionResult_ObjectInstance_NormalizedBoundingBox) GetNormalizedRight() float32 {
	if x != nil && x.NormalizedRight != nil {
		return *x.NormalizedRight
	}
	return 0
}

// Average Precision value for a particular IoU threshold.
// Next ID: 3
type ObjectDetectionAveragePrecisionMetrics_AveragePrecision struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IouThreshold     *float32 `protobuf:"fixed32,1,opt,name=iou_threshold,json=iouThreshold" json:"iou_threshold,omitempty"`
	AveragePrecision *float32 `protobuf:"fixed32,2,opt,name=average_precision,json=averagePrecision" json:"average_precision,omitempty"`
}

func (x *ObjectDetectionAveragePrecisionMetrics_AveragePrecision) Reset() {
	*x = ObjectDetectionAveragePrecisionMetrics_AveragePrecision{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectDetectionAveragePrecisionMetrics_AveragePrecision) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectDetectionAveragePrecisionMetrics_AveragePrecision) ProtoMessage() {}

func (x *ObjectDetectionAveragePrecisionMetrics_AveragePrecision) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectDetectionAveragePrecisionMetrics_AveragePrecision.ProtoReflect.Descriptor instead.
func (*ObjectDetectionAveragePrecisionMetrics_AveragePrecision) Descriptor() ([]byte, []int) {
	return file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_rawDescGZIP(), []int{15, 0}
}

func (x *ObjectDetectionAveragePrecisionMetrics_AveragePrecision) GetIouThreshold() float32 {
	if x != nil && x.IouThreshold != nil {
		return *x.IouThreshold
	}
	return 0
}

func (x *ObjectDetectionAveragePrecisionMetrics_AveragePrecision) GetAveragePrecision() float32 {
	if x != nil && x.AveragePrecision != nil {
		return *x.AveragePrecision
	}
	return 0
}

var File_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto protoreflect.FileDescriptor

var file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_rawDesc = []byte{
	0x0a, 0x3e, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x6c, 0x69, 0x74,
	0x65, 0x2f, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x11, 0x74, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x2e, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x40, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f,
	0x6c, 0x69, 0x74, 0x65, 0x2f, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x65, 0x76, 0x61, 0x6c, 0x75,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x72, 0x65, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc4, 0x05, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6b,
	0x0a, 0x1a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x74, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x2e, 0x65, 0x76, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x72, 0x65, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x48,
	0x00, 0x52, 0x18, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x72, 0x65, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x66, 0x0a, 0x19, 0x74,
	0x6f, 0x70, 0x6b, 0x5f, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x5f, 0x65, 0x76, 0x61,
	0x6c, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x74, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x2e, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x54, 0x6f, 0x70, 0x6b, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x45,
	0x76, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x00, 0x52, 0x16, 0x74, 0x6f, 0x70,
	0x6b, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x45, 0x76, 0x61, 0x6c, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x62, 0x0a, 0x17, 0x74, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x74, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x2e, 0x65, 0x76,
	0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x49,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x00,
	0x52, 0x15, 0x74, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x6e, 0x0a, 0x1b, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x74,
	0x66, 0x6c, 0x69, 0x74, 0x65, 0x2e, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x00, 0x52, 0x19, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x94, 0x01, 0x0a, 0x29, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x76, 0x65,
	0x72, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x74, 0x66,
	0x6c, 0x69, 0x74, 0x65, 0x2e, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x00, 0x52, 0x25, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x50,
	0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x62,
	0x0a, 0x17, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x74, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x2e, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x00, 0x52, 0x15, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0xaf, 0x01, 0x0a,
	0x0e, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12,
	0x17, 0x0a, 0x07, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x61, 0x78, 0x5f,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x61, 0x78, 0x55, 0x73, 0x12,
	0x15, 0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x5f, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x6d, 0x69, 0x6e, 0x55, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x75, 0x6d, 0x5f, 0x75, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x75, 0x6d, 0x55, 0x73, 0x12, 0x15, 0x0a,
	0x06, 0x61, 0x76, 0x67, 0x5f, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x61,
	0x76, 0x67, 0x55, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x74, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x73, 0x74, 0x64, 0x44, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x22, 0x8d,
	0x01, 0x0a, 0x0f, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x61, 0x76, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x61, 0x76, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x64,
	0x5f, 0x64, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0c, 0x73, 0x74, 0x64, 0x44, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x93,
	0x06, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x12, 0x46, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x66, 0x6c, 0x69, 0x74,
	0x65, 0x2e, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x61, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x0c, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x60, 0x0a, 0x15, 0x74, 0x6f, 0x70,
	0x6b, 0x5f, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x74, 0x66, 0x6c, 0x69, 0x74,
	0x65, 0x2e, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x6f, 0x70,
	0x6b, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x45, 0x76, 0x61, 0x6c, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x13, 0x74, 0x6f, 0x70, 0x6b, 0x41, 0x63, 0x63, 0x75,
	0x72, 0x61, 0x63, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x65, 0x0a, 0x18, 0x74,
	0x66, 0x6c, 0x69, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x74, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x2e, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x54, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x16, 0x74, 0x66, 0x6c, 0x69,
	0x74, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x12, 0x71, 0x0a, 0x1c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x74, 0x66, 0x6c, 0x69, 0x74,
	0x65, 0x2e, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x1a, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x6b, 0x0a, 0x1a, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x74, 0x66, 0x6c, 0x69,
	0x74, 0x65, 0x2e, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x18, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x12, 0x97, 0x01, 0x0a, 0x2a, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x64, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f,
	0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x74, 0x66, 0x6c, 0x69, 0x74, 0x65,
	0x2e, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x48, 0x00, 0x52, 0x26, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x50, 0x72, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x65, 0x0a, 0x18,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x74, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x2e, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x16, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x22, 0x82, 0x01, 0x0a, 0x18, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x72,
	0x65, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x45, 0x0a, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x74, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x2e, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x72, 0x65, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x65, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x52, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0a, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0xb5, 0x02, 0x0a, 0x15, 0x54, 0x66,
	0x6c, 0x69, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x4d, 0x0a, 0x08, 0x64,
	0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e,
	0x74, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x2e, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x54, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x52, 0x08, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0b, 0x6e, 0x75,
	0x6d, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x3a,
	0x01, 0x31, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x12, 0x31,
	0x0a, 0x13, 0x69, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x65,
	0x72, 0x5f, 0x72, 0x75, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x31, 0x52, 0x11,
	0x69, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x65, 0x72, 0x52, 0x75,
	0x6e, 0x22, 0x4e, 0x0a, 0x08, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x08, 0x0a,
	0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x4e, 0x4e, 0x41, 0x50, 0x49,
	0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x50, 0x55, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x48,
	0x45, 0x58, 0x41, 0x47, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x58, 0x4e, 0x4e, 0x50,
	0x41, 0x43, 0x4b, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4f, 0x52, 0x45, 0x4d, 0x4c, 0x10,
	0x05, 0x22, 0x3f, 0x0a, 0x16, 0x54, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6e,
	0x75, 0x6d, 0x5f, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x22, 0x26, 0x0a, 0x16, 0x54, 0x6f, 0x70, 0x6b, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61,
	0x63, 0x79, 0x45, 0x76, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x0c, 0x0a, 0x01,
	0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x6b, 0x22, 0x42, 0x0a, 0x17, 0x54, 0x6f,
	0x70, 0x6b, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x45, 0x76, 0x61, 0x6c, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x6f, 0x70, 0x6b, 0x5f, 0x61, 0x63,
	0x63, 0x75, 0x72, 0x61, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0e,
	0x74, 0x6f, 0x70, 0x6b, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x69, 0x65, 0x73, 0x22, 0xd6,
	0x01, 0x0a, 0x19, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x53, 0x0a, 0x10,
	0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x74, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x2e,
	0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x66, 0x6c, 0x69, 0x74,
	0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x52, 0x0f, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x64, 0x0a, 0x19, 0x74, 0x6f, 0x70, 0x6b, 0x5f, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61,
	0x63, 0x79, 0x5f, 0x65, 0x76, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x2e, 0x65, 0x76,
	0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x6f, 0x70, 0x6b, 0x41, 0x63, 0x63,
	0x75, 0x72, 0x61, 0x63, 0x79, 0x45, 0x76, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52,
	0x16, 0x74, 0x6f, 0x70, 0x6b, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x45, 0x76, 0x61,
	0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0xfd, 0x02, 0x0a, 0x1a, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x57, 0x0a, 0x16, 0x70, 0x72, 0x65, 0x5f, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x2e,
	0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x61, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x14, 0x70, 0x72, 0x65, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x4e, 0x0a, 0x11, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x61, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x66, 0x6c,
	0x69, 0x74, 0x65, 0x2e, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c,
	0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x10, 0x69,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x56, 0x0a, 0x11, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74, 0x66, 0x6c,
	0x69, 0x74, 0x65, 0x2e, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54,
	0x66, 0x6c, 0x69, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x10, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x5e, 0x0a, 0x15, 0x74, 0x6f, 0x70, 0x6b, 0x5f,
	0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x74, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x2e,
	0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x6f, 0x70, 0x6b, 0x41,
	0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x45, 0x76, 0x61, 0x6c, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x52, 0x13, 0x74, 0x6f, 0x70, 0x6b, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22, 0xf9, 0x01, 0x0a, 0x18, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x72, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x12, 0x4e, 0x0a, 0x11, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x74, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x2e, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x52, 0x10, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x44, 0x0a, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6c, 0x61, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x66, 0x6c,
	0x69, 0x74, 0x65, 0x2e, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c,
	0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x0b, 0x74,
	0x65, 0x73, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x47, 0x0a, 0x0d, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x74, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x2e, 0x65, 0x76, 0x61, 0x6c, 0x75,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x22, 0x9f, 0x04, 0x0a, 0x15, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x51, 0x0a,
	0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37,
	0x2e, 0x74, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x2e, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x1a, 0xf8, 0x02, 0x0a, 0x0e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x12, 0x70, 0x0a, 0x0c, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x6f, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d,
	0x2e, 0x74, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x2e, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x78, 0x52, 0x0b, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x78, 0x12, 0x17, 0x0a, 0x05, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x3a, 0x01, 0x31, 0x52, 0x05, 0x73, 0x63,
	0x6f, 0x72, 0x65, 0x1a, 0xbf, 0x01, 0x0a, 0x15, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x78, 0x12, 0x25, 0x0a,
	0x0e, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x54, 0x6f, 0x70, 0x12, 0x2b, 0x0a, 0x11, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x5f, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x10, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x42, 0x6f, 0x74, 0x74, 0x6f,
	0x6d, 0x12, 0x27, 0x0a, 0x0f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f,
	0x6c, 0x65, 0x66, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x6e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4c, 0x65, 0x66, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x6e, 0x6f,
	0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x52, 0x69, 0x67, 0x68, 0x74, 0x22, 0x73, 0x0a, 0x1a, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72,
	0x75, 0x74, 0x68, 0x12, 0x55, 0x0a, 0x11, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x74, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x2e, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x10, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0xa0, 0x01, 0x0a, 0x25, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6f, 0x75, 0x5f, 0x74, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0d, 0x69,
	0x6f, 0x75, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x73, 0x12, 0x2f, 0x0a, 0x11,
	0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x03, 0x31, 0x30, 0x30, 0x52, 0x0f, 0x6e, 0x75,
	0x6d, 0x52, 0x65, 0x63, 0x61, 0x6c, 0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0xe4, 0x02,
	0x0a, 0x26, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x8e, 0x01, 0x0a, 0x1d, 0x69, 0x6e, 0x64,
	0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f,
	0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x4a, 0x2e, 0x74, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x2e, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x50, 0x72, 0x65, 0x63, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x41, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x1b, 0x69, 0x6e,
	0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x50,
	0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x43, 0x0a, 0x1e, 0x6f, 0x76, 0x65,
	0x72, 0x61, 0x6c, 0x6c, 0x5f, 0x6d, 0x65, 0x61, 0x6e, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x1b, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x4d, 0x65, 0x61, 0x6e, 0x41, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x64,
	0x0a, 0x10, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6f, 0x75, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x69, 0x6f, 0x75, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x10, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x50, 0x72, 0x65, 0x63, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0xe9, 0x01, 0x0a, 0x15, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x53,
	0x0a, 0x10, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x74, 0x66, 0x6c, 0x69, 0x74,
	0x65, 0x2e, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x66, 0x6c,
	0x69, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x52, 0x0f, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x24, 0x0a, 0x0c, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x31, 0x52, 0x0b, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x55, 0x0a, 0x09, 0x61, 0x70, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x74,
	0x66, 0x6c, 0x69, 0x74, 0x65, 0x2e, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x08, 0x61, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x22, 0x90, 0x03, 0x0a, 0x16, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x57, 0x0a, 0x16, 0x70,
	0x72, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x61,
	0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x66,
	0x6c, 0x69, 0x74, 0x65, 0x2e, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x14,
	0x70, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x4c, 0x61, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x4e, 0x0a, 0x11, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x74, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x2e, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x52, 0x10, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x61, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x56, 0x0a, 0x11, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x74, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x2e, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x10, 0x69, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x75, 0x0a, 0x19,
	0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x39, 0x2e, 0x74, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x2e, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x17, 0x61, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x42, 0xdf, 0x01, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x66, 0x6c, 0x69,
	0x74, 0x65, 0x2e, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x15, 0x45,
	0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x73, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x48, 0x02, 0x50, 0x01, 0x5a, 0x45, 0x67, 0x69, 0x74, 0x65, 0x65, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x71, 0x63, 0x69, 0x69, 0x70, 0x2d, 0x69, 0x63, 0x70, 0x2f, 0x74, 0x66,
	0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2f, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66,
	0x6c, 0x6f, 0x77, 0x2f, 0x6c, 0x69, 0x74, 0x65, 0x2f, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x65,
	0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0xf8,
	0x01, 0x01, 0xa2, 0x02, 0x03, 0x54, 0x45, 0x58, 0xaa, 0x02, 0x11, 0x54, 0x66, 0x6c, 0x69, 0x74,
	0x65, 0x2e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0xca, 0x02, 0x11, 0x54,
	0x66, 0x6c, 0x69, 0x74, 0x65, 0x5c, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0xe2, 0x02, 0x1d, 0x54, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x5c, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0xea, 0x02, 0x12, 0x54, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x3a, 0x3a, 0x45, 0x76, 0x61, 0x6c, 0x75,
	0x61, 0x74, 0x69, 0x6f, 0x6e,
}

var (
	file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_rawDescOnce sync.Once
	file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_rawDescData = file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_rawDesc
)

func file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_rawDescGZIP() []byte {
	file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_rawDescOnce.Do(func() {
		file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_rawDescData = protoimpl.X.CompressGZIP(file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_rawDescData)
	})
	return file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_rawDescData
}

var file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_goTypes = []interface{}{
	(TfliteInferenceParams_Delegate)(0),                                // 0: tflite.evaluation.TfliteInferenceParams.Delegate
	(*ProcessSpecification)(nil),                                       // 1: tflite.evaluation.ProcessSpecification
	(*LatencyMetrics)(nil),                                             // 2: tflite.evaluation.LatencyMetrics
	(*AccuracyMetrics)(nil),                                            // 3: tflite.evaluation.AccuracyMetrics
	(*ProcessMetrics)(nil),                                             // 4: tflite.evaluation.ProcessMetrics
	(*ImagePreprocessingParams)(nil),                                   // 5: tflite.evaluation.ImagePreprocessingParams
	(*TfliteInferenceParams)(nil),                                      // 6: tflite.evaluation.TfliteInferenceParams
	(*TfliteInferenceMetrics)(nil),                                     // 7: tflite.evaluation.TfliteInferenceMetrics
	(*TopkAccuracyEvalParams)(nil),                                     // 8: tflite.evaluation.TopkAccuracyEvalParams
	(*TopkAccuracyEvalMetrics)(nil),                                    // 9: tflite.evaluation.TopkAccuracyEvalMetrics
	(*ImageClassificationParams)(nil),                                  // 10: tflite.evaluation.ImageClassificationParams
	(*ImageClassificationMetrics)(nil),                                 // 11: tflite.evaluation.ImageClassificationMetrics
	(*InferenceProfilerMetrics)(nil),                                   // 12: tflite.evaluation.InferenceProfilerMetrics
	(*ObjectDetectionResult)(nil),                                      // 13: tflite.evaluation.ObjectDetectionResult
	(*ObjectDetectionGroundTruth)(nil),                                 // 14: tflite.evaluation.ObjectDetectionGroundTruth
	(*ObjectDetectionAveragePrecisionParams)(nil),                      // 15: tflite.evaluation.ObjectDetectionAveragePrecisionParams
	(*ObjectDetectionAveragePrecisionMetrics)(nil),                     // 16: tflite.evaluation.ObjectDetectionAveragePrecisionMetrics
	(*ObjectDetectionParams)(nil),                                      // 17: tflite.evaluation.ObjectDetectionParams
	(*ObjectDetectionMetrics)(nil),                                     // 18: tflite.evaluation.ObjectDetectionMetrics
	(*ObjectDetectionResult_ObjectInstance)(nil),                       // 19: tflite.evaluation.ObjectDetectionResult.ObjectInstance
	(*ObjectDetectionResult_ObjectInstance_NormalizedBoundingBox)(nil), // 20: tflite.evaluation.ObjectDetectionResult.ObjectInstance.NormalizedBoundingBox
	(*ObjectDetectionAveragePrecisionMetrics_AveragePrecision)(nil),    // 21: tflite.evaluation.ObjectDetectionAveragePrecisionMetrics.AveragePrecision
	(*ImagePreprocessingStepParams)(nil),                               // 22: tflite.evaluation.ImagePreprocessingStepParams
}
var file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_depIdxs = []int32{
	5,  // 0: tflite.evaluation.ProcessSpecification.image_preprocessing_params:type_name -> tflite.evaluation.ImagePreprocessingParams
	8,  // 1: tflite.evaluation.ProcessSpecification.topk_accuracy_eval_params:type_name -> tflite.evaluation.TopkAccuracyEvalParams
	6,  // 2: tflite.evaluation.ProcessSpecification.tflite_inference_params:type_name -> tflite.evaluation.TfliteInferenceParams
	10, // 3: tflite.evaluation.ProcessSpecification.image_classification_params:type_name -> tflite.evaluation.ImageClassificationParams
	15, // 4: tflite.evaluation.ProcessSpecification.object_detection_average_precision_params:type_name -> tflite.evaluation.ObjectDetectionAveragePrecisionParams
	17, // 5: tflite.evaluation.ProcessSpecification.object_detection_params:type_name -> tflite.evaluation.ObjectDetectionParams
	2,  // 6: tflite.evaluation.ProcessMetrics.total_latency:type_name -> tflite.evaluation.LatencyMetrics
	9,  // 7: tflite.evaluation.ProcessMetrics.topk_accuracy_metrics:type_name -> tflite.evaluation.TopkAccuracyEvalMetrics
	7,  // 8: tflite.evaluation.ProcessMetrics.tflite_inference_metrics:type_name -> tflite.evaluation.TfliteInferenceMetrics
	11, // 9: tflite.evaluation.ProcessMetrics.image_classification_metrics:type_name -> tflite.evaluation.ImageClassificationMetrics
	12, // 10: tflite.evaluation.ProcessMetrics.inference_profiler_metrics:type_name -> tflite.evaluation.InferenceProfilerMetrics
	16, // 11: tflite.evaluation.ProcessMetrics.object_detection_average_precision_metrics:type_name -> tflite.evaluation.ObjectDetectionAveragePrecisionMetrics
	18, // 12: tflite.evaluation.ProcessMetrics.object_detection_metrics:type_name -> tflite.evaluation.ObjectDetectionMetrics
	22, // 13: tflite.evaluation.ImagePreprocessingParams.steps:type_name -> tflite.evaluation.ImagePreprocessingStepParams
	0,  // 14: tflite.evaluation.TfliteInferenceParams.delegate:type_name -> tflite.evaluation.TfliteInferenceParams.Delegate
	6,  // 15: tflite.evaluation.ImageClassificationParams.inference_params:type_name -> tflite.evaluation.TfliteInferenceParams
	8,  // 16: tflite.evaluation.ImageClassificationParams.topk_accuracy_eval_params:type_name -> tflite.evaluation.TopkAccuracyEvalParams
	2,  // 17: tflite.evaluation.ImageClassificationMetrics.pre_processing_latency:type_name -> tflite.evaluation.LatencyMetrics
	2,  // 18: tflite.evaluation.ImageClassificationMetrics.inference_latency:type_name -> tflite.evaluation.LatencyMetrics
	7,  // 19: tflite.evaluation.ImageClassificationMetrics.inference_metrics:type_name -> tflite.evaluation.TfliteInferenceMetrics
	9,  // 20: tflite.evaluation.ImageClassificationMetrics.topk_accuracy_metrics:type_name -> tflite.evaluation.TopkAccuracyEvalMetrics
	2,  // 21: tflite.evaluation.InferenceProfilerMetrics.reference_latency:type_name -> tflite.evaluation.LatencyMetrics
	2,  // 22: tflite.evaluation.InferenceProfilerMetrics.test_latency:type_name -> tflite.evaluation.LatencyMetrics
	3,  // 23: tflite.evaluation.InferenceProfilerMetrics.output_errors:type_name -> tflite.evaluation.AccuracyMetrics
	19, // 24: tflite.evaluation.ObjectDetectionResult.objects:type_name -> tflite.evaluation.ObjectDetectionResult.ObjectInstance
	13, // 25: tflite.evaluation.ObjectDetectionGroundTruth.detection_results:type_name -> tflite.evaluation.ObjectDetectionResult
	21, // 26: tflite.evaluation.ObjectDetectionAveragePrecisionMetrics.individual_average_precisions:type_name -> tflite.evaluation.ObjectDetectionAveragePrecisionMetrics.AveragePrecision
	6,  // 27: tflite.evaluation.ObjectDetectionParams.inference_params:type_name -> tflite.evaluation.TfliteInferenceParams
	15, // 28: tflite.evaluation.ObjectDetectionParams.ap_params:type_name -> tflite.evaluation.ObjectDetectionAveragePrecisionParams
	2,  // 29: tflite.evaluation.ObjectDetectionMetrics.pre_processing_latency:type_name -> tflite.evaluation.LatencyMetrics
	2,  // 30: tflite.evaluation.ObjectDetectionMetrics.inference_latency:type_name -> tflite.evaluation.LatencyMetrics
	7,  // 31: tflite.evaluation.ObjectDetectionMetrics.inference_metrics:type_name -> tflite.evaluation.TfliteInferenceMetrics
	16, // 32: tflite.evaluation.ObjectDetectionMetrics.average_precision_metrics:type_name -> tflite.evaluation.ObjectDetectionAveragePrecisionMetrics
	20, // 33: tflite.evaluation.ObjectDetectionResult.ObjectInstance.bounding_box:type_name -> tflite.evaluation.ObjectDetectionResult.ObjectInstance.NormalizedBoundingBox
	34, // [34:34] is the sub-list for method output_type
	34, // [34:34] is the sub-list for method input_type
	34, // [34:34] is the sub-list for extension type_name
	34, // [34:34] is the sub-list for extension extendee
	0,  // [0:34] is the sub-list for field type_name
}

func init() { file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_init() }
func file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_init() {
	if File_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto != nil {
		return
	}
	file_tensorflow_lite_tools_evaluation_proto_preprocessing_steps_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessSpecification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LatencyMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccuracyMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImagePreprocessingParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TfliteInferenceParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TfliteInferenceMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopkAccuracyEvalParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopkAccuracyEvalMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageClassificationParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageClassificationMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InferenceProfilerMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectDetectionResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectDetectionGroundTruth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectDetectionAveragePrecisionParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectDetectionAveragePrecisionMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectDetectionParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectDetectionMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectDetectionResult_ObjectInstance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectDetectionResult_ObjectInstance_NormalizedBoundingBox); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectDetectionAveragePrecisionMetrics_AveragePrecision); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*ProcessSpecification_ImagePreprocessingParams)(nil),
		(*ProcessSpecification_TopkAccuracyEvalParams)(nil),
		(*ProcessSpecification_TfliteInferenceParams)(nil),
		(*ProcessSpecification_ImageClassificationParams)(nil),
		(*ProcessSpecification_ObjectDetectionAveragePrecisionParams)(nil),
		(*ProcessSpecification_ObjectDetectionParams)(nil),
	}
	file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*ProcessMetrics_TopkAccuracyMetrics)(nil),
		(*ProcessMetrics_TfliteInferenceMetrics)(nil),
		(*ProcessMetrics_ImageClassificationMetrics)(nil),
		(*ProcessMetrics_InferenceProfilerMetrics)(nil),
		(*ProcessMetrics_ObjectDetectionAveragePrecisionMetrics)(nil),
		(*ProcessMetrics_ObjectDetectionMetrics)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_goTypes,
		DependencyIndexes: file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_depIdxs,
		EnumInfos:         file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_enumTypes,
		MessageInfos:      file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_msgTypes,
	}.Build()
	File_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto = out.File
	file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_rawDesc = nil
	file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_goTypes = nil
	file_tensorflow_lite_tools_evaluation_proto_evaluation_stages_proto_depIdxs = nil
}
