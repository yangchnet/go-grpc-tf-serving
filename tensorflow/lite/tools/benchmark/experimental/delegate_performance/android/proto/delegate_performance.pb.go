// Copyright 2022 The TensorFlow Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// =============================================================================

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: tensorflow/lite/tools/benchmark/experimental/delegate_performance/android/proto/delegate_performance.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Which stage of benchmarking the event is for.
type BenchmarkEventType int32

const (
	BenchmarkEventType_BENCHMARK_EVENT_TYPE_UNDEFINED BenchmarkEventType = 0
	// Benchmark start. A start without an end can be interpreted as a test that
	// has crashed or hung.
	BenchmarkEventType_BENCHMARK_EVENT_TYPE_START BenchmarkEventType = 1
	// Benchmarking completion. A model was successfully loaded, acceleration
	// configured and inference run without errors. There may still be an issue
	// with correctness of results, or with performance.
	BenchmarkEventType_BENCHMARK_EVENT_TYPE_END BenchmarkEventType = 2
	// Benchmark was not completed due to an error. The error may be a handled
	// error (e.g., failure in a delegate), or a crash.
	BenchmarkEventType_BENCHMARK_EVENT_TYPE_ERROR BenchmarkEventType = 3
)

// Enum value maps for BenchmarkEventType.
var (
	BenchmarkEventType_name = map[int32]string{
		0: "BENCHMARK_EVENT_TYPE_UNDEFINED",
		1: "BENCHMARK_EVENT_TYPE_START",
		2: "BENCHMARK_EVENT_TYPE_END",
		3: "BENCHMARK_EVENT_TYPE_ERROR",
	}
	BenchmarkEventType_value = map[string]int32{
		"BENCHMARK_EVENT_TYPE_UNDEFINED": 0,
		"BENCHMARK_EVENT_TYPE_START":     1,
		"BENCHMARK_EVENT_TYPE_END":       2,
		"BENCHMARK_EVENT_TYPE_ERROR":     3,
	}
)

func (x BenchmarkEventType) Enum() *BenchmarkEventType {
	p := new(BenchmarkEventType)
	*p = x
	return p
}

func (x BenchmarkEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BenchmarkEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_tensorflow_lite_tools_benchmark_experimental_delegate_performance_android_proto_delegate_performance_proto_enumTypes[0].Descriptor()
}

func (BenchmarkEventType) Type() protoreflect.EnumType {
	return &file_tensorflow_lite_tools_benchmark_experimental_delegate_performance_android_proto_delegate_performance_proto_enumTypes[0]
}

func (x BenchmarkEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BenchmarkEventType.Descriptor instead.
func (BenchmarkEventType) EnumDescriptor() ([]byte, []int) {
	return file_tensorflow_lite_tools_benchmark_experimental_delegate_performance_android_proto_delegate_performance_proto_rawDescGZIP(), []int{0}
}

// Parameters for latency thresholds of the delegate latency benchmarking
// results. The delegate performance benchmark app generates a "PASS" result for
// a model if no thresholds are breached.
//
// The latency criteria is designed to be model specific.
//
// Next ID: 4
type LatencyCriteria struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum regression (%) of initialization time that is allowed.
	// If initialization_max_regression_percentage_allow is 5 and the
	// initialization time of the test delegate is slower than the reference
	// delegate by more than 5%, it will fail the latency benchmarking.
	//
	// Note: It is only applied when comparing two stable delegates.
	InitializationMaxRegressionPercentageAllowed *float32 `protobuf:"fixed32,1,opt,name=initialization_max_regression_percentage_allowed,json=initializationMaxRegressionPercentageAllowed,proto3,oneof" json:"initialization_max_regression_percentage_allowed,omitempty"`
	// The maximum regression (%) of warmup time that is allowed. The warmup is
	// the inferences before the benchmark run. The default number of warmup
	// inferences times is 1 and the number is configurable via TFLite Benchmark
	// Tool arguments.
	//
	// If average_warm_up_max_regression_percentage_allowed is 5 and the warmup
	// time of the test delegate is slower than the reference delegate by more
	// than 5%, it will fail the latency benchmarking.
	//
	// Note: It is only applied when comparing two stable delegates.
	AverageWarmUpMaxRegressionPercentageAllowed *float32 `protobuf:"fixed32,2,opt,name=average_warm_up_max_regression_percentage_allowed,json=averageWarmUpMaxRegressionPercentageAllowed,proto3,oneof" json:"average_warm_up_max_regression_percentage_allowed,omitempty"`
	// The maximum regression (%) of inference time that is allowed.
	// If average_inference_max_regression_percentage_allowed is 5 and the
	// inference time of the test delegate is slower than the reference delegate
	// by more than 5%, it will fail the latency benchmarking.
	AverageInferenceMaxRegressionPercentageAllowed *float32 `protobuf:"fixed32,3,opt,name=average_inference_max_regression_percentage_allowed,json=averageInferenceMaxRegressionPercentageAllowed,proto3,oneof" json:"average_inference_max_regression_percentage_allowed,omitempty"`
}

func (x *LatencyCriteria) Reset() {
	*x = LatencyCriteria{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_lite_tools_benchmark_experimental_delegate_performance_android_proto_delegate_performance_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LatencyCriteria) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LatencyCriteria) ProtoMessage() {}

func (x *LatencyCriteria) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_lite_tools_benchmark_experimental_delegate_performance_android_proto_delegate_performance_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LatencyCriteria.ProtoReflect.Descriptor instead.
func (*LatencyCriteria) Descriptor() ([]byte, []int) {
	return file_tensorflow_lite_tools_benchmark_experimental_delegate_performance_android_proto_delegate_performance_proto_rawDescGZIP(), []int{0}
}

func (x *LatencyCriteria) GetInitializationMaxRegressionPercentageAllowed() float32 {
	if x != nil && x.InitializationMaxRegressionPercentageAllowed != nil {
		return *x.InitializationMaxRegressionPercentageAllowed
	}
	return 0
}

func (x *LatencyCriteria) GetAverageWarmUpMaxRegressionPercentageAllowed() float32 {
	if x != nil && x.AverageWarmUpMaxRegressionPercentageAllowed != nil {
		return *x.AverageWarmUpMaxRegressionPercentageAllowed
	}
	return 0
}

func (x *LatencyCriteria) GetAverageInferenceMaxRegressionPercentageAllowed() float32 {
	if x != nil && x.AverageInferenceMaxRegressionPercentageAllowed != nil {
		return *x.AverageInferenceMaxRegressionPercentageAllowed
	}
	return 0
}

// A handled error.
//
// Next ID: 2
type ErrorCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// What the TF Lite level error is.
	// See TfLiteStatus in tensorflow/lite/core/c/c_api_types.h for the meaning of
	// the values.
	TfliteError *int32 `protobuf:"varint,1,opt,name=tflite_error,json=tfliteError,proto3,oneof" json:"tflite_error,omitempty"`
}

func (x *ErrorCode) Reset() {
	*x = ErrorCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_lite_tools_benchmark_experimental_delegate_performance_android_proto_delegate_performance_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorCode) ProtoMessage() {}

func (x *ErrorCode) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_lite_tools_benchmark_experimental_delegate_performance_android_proto_delegate_performance_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorCode.ProtoReflect.Descriptor instead.
func (*ErrorCode) Descriptor() ([]byte, []int) {
	return file_tensorflow_lite_tools_benchmark_experimental_delegate_performance_android_proto_delegate_performance_proto_rawDescGZIP(), []int{1}
}

func (x *ErrorCode) GetTfliteError() int32 {
	if x != nil && x.TfliteError != nil {
		return *x.TfliteError
	}
	return 0
}

// An error that occurred during benchmarking.
//
// Used with event type ERROR.
//
// Next ID: 3
type BenchmarkError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Handled tflite error.
	ErrorCode    *ErrorCode `protobuf:"bytes,1,opt,name=error_code,json=errorCode,proto3,oneof" json:"error_code,omitempty"`
	ErrorMessage *string    `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3,oneof" json:"error_message,omitempty"`
}

func (x *BenchmarkError) Reset() {
	*x = BenchmarkError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_lite_tools_benchmark_experimental_delegate_performance_android_proto_delegate_performance_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BenchmarkError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BenchmarkError) ProtoMessage() {}

func (x *BenchmarkError) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_lite_tools_benchmark_experimental_delegate_performance_android_proto_delegate_performance_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BenchmarkError.ProtoReflect.Descriptor instead.
func (*BenchmarkError) Descriptor() ([]byte, []int) {
	return file_tensorflow_lite_tools_benchmark_experimental_delegate_performance_android_proto_delegate_performance_proto_rawDescGZIP(), []int{2}
}

func (x *BenchmarkError) GetErrorCode() *ErrorCode {
	if x != nil {
		return x.ErrorCode
	}
	return nil
}

func (x *BenchmarkError) GetErrorMessage() string {
	if x != nil && x.ErrorMessage != nil {
		return *x.ErrorMessage
	}
	return ""
}

// A metric from a benchmark, for example an average inference time in
// microseconds.
type BenchmarkMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Metric name, for example inference_latency_average_us.
	Name *string `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
	// Metric value, for example 180000.
	Value *float32 `protobuf:"fixed32,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
}

func (x *BenchmarkMetric) Reset() {
	*x = BenchmarkMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_lite_tools_benchmark_experimental_delegate_performance_android_proto_delegate_performance_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BenchmarkMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BenchmarkMetric) ProtoMessage() {}

func (x *BenchmarkMetric) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_lite_tools_benchmark_experimental_delegate_performance_android_proto_delegate_performance_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BenchmarkMetric.ProtoReflect.Descriptor instead.
func (*BenchmarkMetric) Descriptor() ([]byte, []int) {
	return file_tensorflow_lite_tools_benchmark_experimental_delegate_performance_android_proto_delegate_performance_proto_rawDescGZIP(), []int{3}
}

func (x *BenchmarkMetric) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *BenchmarkMetric) GetValue() float32 {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return 0
}

// Outcome of a latency benchmark run.  If the benchmark run was successfully
// completed, the message contains the latency metrics. The information is
// intended to be compared against with other candidate acceleration
// configurations. If the benchmark run was failed, the message contains the
// handled errors for the callers to investigate further.
//
// Next ID: 4
type LatencyResults struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of the benchmark event.
	EventType *BenchmarkEventType `protobuf:"varint,1,opt,name=event_type,json=eventType,proto3,enum=tflite.proto.benchmark.BenchmarkEventType,oneof" json:"event_type,omitempty"`
	// Metrics that are intended to be compared against other acceleration
	// configurations, used when type is END.
	Metrics []*BenchmarkMetric `protobuf:"bytes,2,rep,name=metrics,proto3" json:"metrics,omitempty"`
	// Error during benchmark, used when type is ERROR.
	Error *BenchmarkError `protobuf:"bytes,3,opt,name=error,proto3,oneof" json:"error,omitempty"`
}

func (x *LatencyResults) Reset() {
	*x = LatencyResults{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_lite_tools_benchmark_experimental_delegate_performance_android_proto_delegate_performance_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LatencyResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LatencyResults) ProtoMessage() {}

func (x *LatencyResults) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_lite_tools_benchmark_experimental_delegate_performance_android_proto_delegate_performance_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LatencyResults.ProtoReflect.Descriptor instead.
func (*LatencyResults) Descriptor() ([]byte, []int) {
	return file_tensorflow_lite_tools_benchmark_experimental_delegate_performance_android_proto_delegate_performance_proto_rawDescGZIP(), []int{4}
}

func (x *LatencyResults) GetEventType() BenchmarkEventType {
	if x != nil && x.EventType != nil {
		return *x.EventType
	}
	return BenchmarkEventType_BENCHMARK_EVENT_TYPE_UNDEFINED
}

func (x *LatencyResults) GetMetrics() []*BenchmarkMetric {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *LatencyResults) GetError() *BenchmarkError {
	if x != nil {
		return x.Error
	}
	return nil
}

var File_tensorflow_lite_tools_benchmark_experimental_delegate_performance_android_proto_delegate_performance_proto protoreflect.FileDescriptor

var file_tensorflow_lite_tools_benchmark_experimental_delegate_performance_android_proto_delegate_performance_proto_rawDesc = []byte{
	0x0a, 0x6a, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x6c, 0x69, 0x74,
	0x65, 0x2f, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72,
	0x6b, 0x2f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2f, 0x64,
	0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x6e, 0x63, 0x65, 0x2f, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x74, 0x66,
	0x6c, 0x69, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x65, 0x6e, 0x63, 0x68,
	0x6d, 0x61, 0x72, 0x6b, 0x22, 0x80, 0x04, 0x0a, 0x0f, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79,
	0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x12, 0x6b, 0x0a, 0x30, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x72,
	0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x02, 0x48, 0x00, 0x52, 0x2c, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x6b, 0x0a, 0x31, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x5f, 0x77, 0x61, 0x72, 0x6d, 0x5f, 0x75, 0x70, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x48, 0x01, 0x52, 0x2b, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x57, 0x61, 0x72, 0x6d, 0x55,
	0x70, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x70, 0x0a, 0x33, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x48,
	0x02, 0x52, 0x2e, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x88, 0x01, 0x01, 0x42, 0x33, 0x0a, 0x31, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x42, 0x34, 0x0a, 0x32, 0x5f, 0x61, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x77, 0x61, 0x72, 0x6d, 0x5f, 0x75, 0x70, 0x5f, 0x6d, 0x61,
	0x78, 0x5f, 0x72, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x42,
	0x36, 0x0a, 0x34, 0x5f, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x5f,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x22, 0x44, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0c, 0x74, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x66,
	0x6c, 0x69, 0x74, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x74, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xa2, 0x01,
	0x0a, 0x0e, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x45, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x58, 0x0a, 0x0f, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x48, 0x01, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xff, 0x01, 0x0a,
	0x0e, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12,
	0x4e, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x74, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x42, 0x65, 0x6e,
	0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48,
	0x00, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x41, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x74, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d,
	0x61, 0x72, 0x6b, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x12, 0x41, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x74, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x42, 0x65, 0x6e, 0x63, 0x68,
	0x6d, 0x61, 0x72, 0x6b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x01, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2a, 0x96,
	0x01, 0x0a, 0x12, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x42, 0x45, 0x4e, 0x43, 0x48, 0x4d, 0x41,
	0x52, 0x4b, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x42, 0x45, 0x4e,
	0x43, 0x48, 0x4d, 0x41, 0x52, 0x4b, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x42, 0x45, 0x4e,
	0x43, 0x48, 0x4d, 0x41, 0x52, 0x4b, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x42, 0x45, 0x4e, 0x43, 0x48,
	0x4d, 0x41, 0x52, 0x4b, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x42, 0xa2, 0x02, 0x0a, 0x1a, 0x63, 0x6f, 0x6d, 0x2e,
	0x74, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x62, 0x65, 0x6e,
	0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x48, 0x02, 0x50, 0x01, 0x5a, 0x6e, 0x67, 0x69, 0x74, 0x65, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x71, 0x63, 0x69, 0x69, 0x70, 0x2d, 0x69, 0x63, 0x70, 0x2f, 0x74, 0x66, 0x2d, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x6e, 0x67, 0x2f, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f,
	0x6c, 0x69, 0x74, 0x65, 0x2f, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x62, 0x65, 0x6e, 0x63, 0x68,
	0x6d, 0x61, 0x72, 0x6b, 0x2f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x6c, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0xa2, 0x02, 0x03, 0x54, 0x50, 0x42, 0xaa, 0x02, 0x16, 0x54, 0x66, 0x6c,
	0x69, 0x74, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d,
	0x61, 0x72, 0x6b, 0xca, 0x02, 0x16, 0x54, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x5c, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x5c, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0xe2, 0x02, 0x22, 0x54,
	0x66, 0x6c, 0x69, 0x74, 0x65, 0x5c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5c, 0x42, 0x65, 0x6e, 0x63,
	0x68, 0x6d, 0x61, 0x72, 0x6b, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0xea, 0x02, 0x18, 0x54, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x3a, 0x3a, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x3a, 0x3a, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tensorflow_lite_tools_benchmark_experimental_delegate_performance_android_proto_delegate_performance_proto_rawDescOnce sync.Once
	file_tensorflow_lite_tools_benchmark_experimental_delegate_performance_android_proto_delegate_performance_proto_rawDescData = file_tensorflow_lite_tools_benchmark_experimental_delegate_performance_android_proto_delegate_performance_proto_rawDesc
)

func file_tensorflow_lite_tools_benchmark_experimental_delegate_performance_android_proto_delegate_performance_proto_rawDescGZIP() []byte {
	file_tensorflow_lite_tools_benchmark_experimental_delegate_performance_android_proto_delegate_performance_proto_rawDescOnce.Do(func() {
		file_tensorflow_lite_tools_benchmark_experimental_delegate_performance_android_proto_delegate_performance_proto_rawDescData = protoimpl.X.CompressGZIP(file_tensorflow_lite_tools_benchmark_experimental_delegate_performance_android_proto_delegate_performance_proto_rawDescData)
	})
	return file_tensorflow_lite_tools_benchmark_experimental_delegate_performance_android_proto_delegate_performance_proto_rawDescData
}

var file_tensorflow_lite_tools_benchmark_experimental_delegate_performance_android_proto_delegate_performance_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_tensorflow_lite_tools_benchmark_experimental_delegate_performance_android_proto_delegate_performance_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_tensorflow_lite_tools_benchmark_experimental_delegate_performance_android_proto_delegate_performance_proto_goTypes = []interface{}{
	(BenchmarkEventType)(0), // 0: tflite.proto.benchmark.BenchmarkEventType
	(*LatencyCriteria)(nil), // 1: tflite.proto.benchmark.LatencyCriteria
	(*ErrorCode)(nil),       // 2: tflite.proto.benchmark.ErrorCode
	(*BenchmarkError)(nil),  // 3: tflite.proto.benchmark.BenchmarkError
	(*BenchmarkMetric)(nil), // 4: tflite.proto.benchmark.BenchmarkMetric
	(*LatencyResults)(nil),  // 5: tflite.proto.benchmark.LatencyResults
}
var file_tensorflow_lite_tools_benchmark_experimental_delegate_performance_android_proto_delegate_performance_proto_depIdxs = []int32{
	2, // 0: tflite.proto.benchmark.BenchmarkError.error_code:type_name -> tflite.proto.benchmark.ErrorCode
	0, // 1: tflite.proto.benchmark.LatencyResults.event_type:type_name -> tflite.proto.benchmark.BenchmarkEventType
	4, // 2: tflite.proto.benchmark.LatencyResults.metrics:type_name -> tflite.proto.benchmark.BenchmarkMetric
	3, // 3: tflite.proto.benchmark.LatencyResults.error:type_name -> tflite.proto.benchmark.BenchmarkError
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() {
	file_tensorflow_lite_tools_benchmark_experimental_delegate_performance_android_proto_delegate_performance_proto_init()
}
func file_tensorflow_lite_tools_benchmark_experimental_delegate_performance_android_proto_delegate_performance_proto_init() {
	if File_tensorflow_lite_tools_benchmark_experimental_delegate_performance_android_proto_delegate_performance_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tensorflow_lite_tools_benchmark_experimental_delegate_performance_android_proto_delegate_performance_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LatencyCriteria); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_lite_tools_benchmark_experimental_delegate_performance_android_proto_delegate_performance_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_lite_tools_benchmark_experimental_delegate_performance_android_proto_delegate_performance_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BenchmarkError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_lite_tools_benchmark_experimental_delegate_performance_android_proto_delegate_performance_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BenchmarkMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_lite_tools_benchmark_experimental_delegate_performance_android_proto_delegate_performance_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LatencyResults); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_tensorflow_lite_tools_benchmark_experimental_delegate_performance_android_proto_delegate_performance_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_tensorflow_lite_tools_benchmark_experimental_delegate_performance_android_proto_delegate_performance_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_tensorflow_lite_tools_benchmark_experimental_delegate_performance_android_proto_delegate_performance_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_tensorflow_lite_tools_benchmark_experimental_delegate_performance_android_proto_delegate_performance_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_tensorflow_lite_tools_benchmark_experimental_delegate_performance_android_proto_delegate_performance_proto_msgTypes[4].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tensorflow_lite_tools_benchmark_experimental_delegate_performance_android_proto_delegate_performance_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tensorflow_lite_tools_benchmark_experimental_delegate_performance_android_proto_delegate_performance_proto_goTypes,
		DependencyIndexes: file_tensorflow_lite_tools_benchmark_experimental_delegate_performance_android_proto_delegate_performance_proto_depIdxs,
		EnumInfos:         file_tensorflow_lite_tools_benchmark_experimental_delegate_performance_android_proto_delegate_performance_proto_enumTypes,
		MessageInfos:      file_tensorflow_lite_tools_benchmark_experimental_delegate_performance_android_proto_delegate_performance_proto_msgTypes,
	}.Build()
	File_tensorflow_lite_tools_benchmark_experimental_delegate_performance_android_proto_delegate_performance_proto = out.File
	file_tensorflow_lite_tools_benchmark_experimental_delegate_performance_android_proto_delegate_performance_proto_rawDesc = nil
	file_tensorflow_lite_tools_benchmark_experimental_delegate_performance_android_proto_delegate_performance_proto_goTypes = nil
	file_tensorflow_lite_tools_benchmark_experimental_delegate_performance_android_proto_delegate_performance_proto_depIdxs = nil
}
