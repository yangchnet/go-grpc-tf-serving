// Copyright 2021 The TensorFlow Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This schema defines the converter error format to communicate between C++
// and python.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: tensorflow/lite/python/metrics/converter_error_data.proto

package metrics

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Error code for popular errors.
type ConverterErrorData_ErrorCode int32

const (
	ConverterErrorData_UNKNOWN                           ConverterErrorData_ErrorCode = 0
	ConverterErrorData_ERROR_NEEDS_FLEX_OPS              ConverterErrorData_ErrorCode = 1
	ConverterErrorData_ERROR_NEEDS_CUSTOM_OPS            ConverterErrorData_ErrorCode = 2
	ConverterErrorData_ERROR_UNSUPPORTED_CONTROL_FLOW_V1 ConverterErrorData_ErrorCode = 3
	// 200- 209 error codes are reserved for backend(delegate) compatibility.
	// Backend compatibility is checked at MlirToFlatBufferTranslateFunction()
	// with the converted flatbuffer model. If some nodes are incompatibile with
	// the given backends in TocoFlags.supported_backends, the error will be
	// raised.
	ConverterErrorData_ERROR_GPU_NOT_COMPATIBLE ConverterErrorData_ErrorCode = 200
)

// Enum value maps for ConverterErrorData_ErrorCode.
var (
	ConverterErrorData_ErrorCode_name = map[int32]string{
		0:   "UNKNOWN",
		1:   "ERROR_NEEDS_FLEX_OPS",
		2:   "ERROR_NEEDS_CUSTOM_OPS",
		3:   "ERROR_UNSUPPORTED_CONTROL_FLOW_V1",
		200: "ERROR_GPU_NOT_COMPATIBLE",
	}
	ConverterErrorData_ErrorCode_value = map[string]int32{
		"UNKNOWN":                           0,
		"ERROR_NEEDS_FLEX_OPS":              1,
		"ERROR_NEEDS_CUSTOM_OPS":            2,
		"ERROR_UNSUPPORTED_CONTROL_FLOW_V1": 3,
		"ERROR_GPU_NOT_COMPATIBLE":          200,
	}
)

func (x ConverterErrorData_ErrorCode) Enum() *ConverterErrorData_ErrorCode {
	p := new(ConverterErrorData_ErrorCode)
	*p = x
	return p
}

func (x ConverterErrorData_ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConverterErrorData_ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_tensorflow_lite_python_metrics_converter_error_data_proto_enumTypes[0].Descriptor()
}

func (ConverterErrorData_ErrorCode) Type() protoreflect.EnumType {
	return &file_tensorflow_lite_python_metrics_converter_error_data_proto_enumTypes[0]
}

func (x ConverterErrorData_ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ConverterErrorData_ErrorCode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ConverterErrorData_ErrorCode(num)
	return nil
}

// Deprecated: Use ConverterErrorData_ErrorCode.Descriptor instead.
func (ConverterErrorData_ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_tensorflow_lite_python_metrics_converter_error_data_proto_rawDescGZIP(), []int{0, 0}
}

// Represents the type of location.
type ConverterErrorData_LocationType int32

const (
	// No location information available.
	ConverterErrorData_UNKNOWNLOC ConverterErrorData_LocationType = 0
	// The location is the nodename;
	ConverterErrorData_NAMELOC ConverterErrorData_LocationType = 1
	// The location is a stacktrace.
	ConverterErrorData_CALLSITELOC ConverterErrorData_LocationType = 2
	// The location is a fused location, usually represents the list of output
	// tensor locations of that node.
	ConverterErrorData_FUSEDLOC ConverterErrorData_LocationType = 3
)

// Enum value maps for ConverterErrorData_LocationType.
var (
	ConverterErrorData_LocationType_name = map[int32]string{
		0: "UNKNOWNLOC",
		1: "NAMELOC",
		2: "CALLSITELOC",
		3: "FUSEDLOC",
	}
	ConverterErrorData_LocationType_value = map[string]int32{
		"UNKNOWNLOC":  0,
		"NAMELOC":     1,
		"CALLSITELOC": 2,
		"FUSEDLOC":    3,
	}
)

func (x ConverterErrorData_LocationType) Enum() *ConverterErrorData_LocationType {
	p := new(ConverterErrorData_LocationType)
	*p = x
	return p
}

func (x ConverterErrorData_LocationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConverterErrorData_LocationType) Descriptor() protoreflect.EnumDescriptor {
	return file_tensorflow_lite_python_metrics_converter_error_data_proto_enumTypes[1].Descriptor()
}

func (ConverterErrorData_LocationType) Type() protoreflect.EnumType {
	return &file_tensorflow_lite_python_metrics_converter_error_data_proto_enumTypes[1]
}

func (x ConverterErrorData_LocationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ConverterErrorData_LocationType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ConverterErrorData_LocationType(num)
	return nil
}

// Deprecated: Use ConverterErrorData_LocationType.Descriptor instead.
func (ConverterErrorData_LocationType) EnumDescriptor() ([]byte, []int) {
	return file_tensorflow_lite_python_metrics_converter_error_data_proto_rawDescGZIP(), []int{0, 1}
}

type ConverterErrorData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the component from which the error was originally thrown.
	Component *string `protobuf:"bytes,1,opt,name=component" json:"component,omitempty"`
	// The name of the subcomponent from which the error was originally thrown. In
	// MLIR, this field contains the pass name.
	Subcomponent *string                       `protobuf:"bytes,2,opt,name=subcomponent" json:"subcomponent,omitempty"`
	ErrorCode    *ConverterErrorData_ErrorCode `protobuf:"varint,3,opt,name=error_code,json=errorCode,enum=tflite.metrics.ConverterErrorData_ErrorCode" json:"error_code,omitempty"`
	ErrorMessage *string                       `protobuf:"bytes,4,opt,name=error_message,json=errorMessage" json:"error_message,omitempty"`
	Operator     *ConverterErrorData_Operator  `protobuf:"bytes,5,opt,name=operator" json:"operator,omitempty"`
	Location     *ConverterErrorData_Location  `protobuf:"bytes,6,opt,name=location" json:"location,omitempty"`
}

func (x *ConverterErrorData) Reset() {
	*x = ConverterErrorData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_lite_python_metrics_converter_error_data_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConverterErrorData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConverterErrorData) ProtoMessage() {}

func (x *ConverterErrorData) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_lite_python_metrics_converter_error_data_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConverterErrorData.ProtoReflect.Descriptor instead.
func (*ConverterErrorData) Descriptor() ([]byte, []int) {
	return file_tensorflow_lite_python_metrics_converter_error_data_proto_rawDescGZIP(), []int{0}
}

func (x *ConverterErrorData) GetComponent() string {
	if x != nil && x.Component != nil {
		return *x.Component
	}
	return ""
}

func (x *ConverterErrorData) GetSubcomponent() string {
	if x != nil && x.Subcomponent != nil {
		return *x.Subcomponent
	}
	return ""
}

func (x *ConverterErrorData) GetErrorCode() ConverterErrorData_ErrorCode {
	if x != nil && x.ErrorCode != nil {
		return *x.ErrorCode
	}
	return ConverterErrorData_UNKNOWN
}

func (x *ConverterErrorData) GetErrorMessage() string {
	if x != nil && x.ErrorMessage != nil {
		return *x.ErrorMessage
	}
	return ""
}

func (x *ConverterErrorData) GetOperator() *ConverterErrorData_Operator {
	if x != nil {
		return x.Operator
	}
	return nil
}

func (x *ConverterErrorData) GetLocation() *ConverterErrorData_Location {
	if x != nil {
		return x.Location
	}
	return nil
}

// Information about the op where the error occurs.
type ConverterErrorData_Operator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The op name has "<dialect>.<name>" format, Ex: "tf.Abs".
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (x *ConverterErrorData_Operator) Reset() {
	*x = ConverterErrorData_Operator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_lite_python_metrics_converter_error_data_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConverterErrorData_Operator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConverterErrorData_Operator) ProtoMessage() {}

func (x *ConverterErrorData_Operator) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_lite_python_metrics_converter_error_data_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConverterErrorData_Operator.ProtoReflect.Descriptor instead.
func (*ConverterErrorData_Operator) Descriptor() ([]byte, []int) {
	return file_tensorflow_lite_python_metrics_converter_error_data_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ConverterErrorData_Operator) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

// Represents a source location with file name, line and column number.
type ConverterErrorData_FileLoc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename *string `protobuf:"bytes,1,opt,name=filename" json:"filename,omitempty"`
	Line     *uint32 `protobuf:"varint,2,opt,name=line" json:"line,omitempty"`
	Column   *uint32 `protobuf:"varint,3,opt,name=column" json:"column,omitempty"`
}

func (x *ConverterErrorData_FileLoc) Reset() {
	*x = ConverterErrorData_FileLoc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_lite_python_metrics_converter_error_data_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConverterErrorData_FileLoc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConverterErrorData_FileLoc) ProtoMessage() {}

func (x *ConverterErrorData_FileLoc) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_lite_python_metrics_converter_error_data_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConverterErrorData_FileLoc.ProtoReflect.Descriptor instead.
func (*ConverterErrorData_FileLoc) Descriptor() ([]byte, []int) {
	return file_tensorflow_lite_python_metrics_converter_error_data_proto_rawDescGZIP(), []int{0, 1}
}

func (x *ConverterErrorData_FileLoc) GetFilename() string {
	if x != nil && x.Filename != nil {
		return *x.Filename
	}
	return ""
}

func (x *ConverterErrorData_FileLoc) GetLine() uint32 {
	if x != nil && x.Line != nil {
		return *x.Line
	}
	return 0
}

func (x *ConverterErrorData_FileLoc) GetColumn() uint32 {
	if x != nil && x.Column != nil {
		return *x.Column
	}
	return 0
}

// Represents the node name and its source location.
type ConverterErrorData_SourceLoc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   *string                     `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Source *ConverterErrorData_FileLoc `protobuf:"bytes,2,opt,name=source" json:"source,omitempty"`
}

func (x *ConverterErrorData_SourceLoc) Reset() {
	*x = ConverterErrorData_SourceLoc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_lite_python_metrics_converter_error_data_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConverterErrorData_SourceLoc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConverterErrorData_SourceLoc) ProtoMessage() {}

func (x *ConverterErrorData_SourceLoc) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_lite_python_metrics_converter_error_data_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConverterErrorData_SourceLoc.ProtoReflect.Descriptor instead.
func (*ConverterErrorData_SourceLoc) Descriptor() ([]byte, []int) {
	return file_tensorflow_lite_python_metrics_converter_error_data_proto_rawDescGZIP(), []int{0, 2}
}

func (x *ConverterErrorData_SourceLoc) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ConverterErrorData_SourceLoc) GetSource() *ConverterErrorData_FileLoc {
	if x != nil {
		return x.Source
	}
	return nil
}

// Represents the location information of current node.
type ConverterErrorData_Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *ConverterErrorData_LocationType `protobuf:"varint,1,opt,name=type,enum=tflite.metrics.ConverterErrorData_LocationType" json:"type,omitempty"`
	// For each location type, this field is different. If type is:
	//   - UNKNOWNLOC: call is empty.
	//   - NAMELOC: call has a single element representing the current node.
	//   - CALLSITELOC: call is a chain of source locations representing a
	//     stacktrace.
	//   - FUSEDLOC: call is a list, represents the list of output tensor
	//     locations.
	Call []*ConverterErrorData_SourceLoc `protobuf:"bytes,2,rep,name=call" json:"call,omitempty"`
}

func (x *ConverterErrorData_Location) Reset() {
	*x = ConverterErrorData_Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_lite_python_metrics_converter_error_data_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConverterErrorData_Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConverterErrorData_Location) ProtoMessage() {}

func (x *ConverterErrorData_Location) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_lite_python_metrics_converter_error_data_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConverterErrorData_Location.ProtoReflect.Descriptor instead.
func (*ConverterErrorData_Location) Descriptor() ([]byte, []int) {
	return file_tensorflow_lite_python_metrics_converter_error_data_proto_rawDescGZIP(), []int{0, 3}
}

func (x *ConverterErrorData_Location) GetType() ConverterErrorData_LocationType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ConverterErrorData_UNKNOWNLOC
}

func (x *ConverterErrorData_Location) GetCall() []*ConverterErrorData_SourceLoc {
	if x != nil {
		return x.Call
	}
	return nil
}

var File_tensorflow_lite_python_metrics_converter_error_data_proto protoreflect.FileDescriptor

var file_tensorflow_lite_python_metrics_converter_error_data_proto_rawDesc = []byte{
	0x0a, 0x39, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x6c, 0x69, 0x74,
	0x65, 0x2f, 0x70, 0x79, 0x74, 0x68, 0x6f, 0x6e, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x2f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x74, 0x66, 0x6c,
	0x69, 0x74, 0x65, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22, 0xa9, 0x07, 0x0a, 0x12,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x12, 0x22, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x12, 0x4b, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x74, 0x66, 0x6c, 0x69, 0x74,
	0x65, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x47, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x74, 0x66, 0x6c, 0x69, 0x74,
	0x65, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x47, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x74, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1e, 0x0a, 0x08, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x51, 0x0a, 0x07, 0x46, 0x69, 0x6c, 0x65,
	0x4c, 0x6f, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6c,
	0x69, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x1a, 0x63, 0x0a, 0x09, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x74,
	0x66, 0x6c, 0x69, 0x74, 0x65, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x43, 0x6f,
	0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x1a, 0x91, 0x01, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x74, 0x66,
	0x6c, 0x69, 0x74, 0x65, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x40, 0x0a, 0x04, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x74, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x52, 0x04,
	0x63, 0x61, 0x6c, 0x6c, 0x22, 0x94, 0x01, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x18, 0x0a, 0x14, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x45, 0x45, 0x44, 0x53, 0x5f, 0x46,
	0x4c, 0x45, 0x58, 0x5f, 0x4f, 0x50, 0x53, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x4e, 0x45, 0x45, 0x44, 0x53, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f,
	0x4f, 0x50, 0x53, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55,
	0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52,
	0x4f, 0x4c, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x56, 0x31, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x18,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x47, 0x50, 0x55, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x4f,
	0x4d, 0x50, 0x41, 0x54, 0x49, 0x42, 0x4c, 0x45, 0x10, 0xc8, 0x01, 0x22, 0x4a, 0x0a, 0x0c, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x43, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4e,
	0x41, 0x4d, 0x45, 0x4c, 0x4f, 0x43, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x41, 0x4c, 0x4c,
	0x53, 0x49, 0x54, 0x45, 0x4c, 0x4f, 0x43, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x55, 0x53,
	0x45, 0x44, 0x4c, 0x4f, 0x43, 0x10, 0x03, 0x42, 0xc7, 0x01, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x2e,
	0x74, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x42, 0x17,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x02, 0x50, 0x01, 0x5a, 0x3d, 0x67, 0x69, 0x74,
	0x65, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x71, 0x63, 0x69, 0x69, 0x70, 0x2d, 0x69, 0x63, 0x70,
	0x2f, 0x74, 0x66, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2f, 0x74, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x6c, 0x69, 0x74, 0x65, 0x2f, 0x70, 0x79, 0x74, 0x68,
	0x6f, 0x6e, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0xa2, 0x02, 0x03, 0x54, 0x4d, 0x58,
	0xaa, 0x02, 0x0e, 0x54, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0xca, 0x02, 0x0e, 0x54, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x5c, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0xe2, 0x02, 0x1a, 0x54, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x5c, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,
	0x02, 0x0f, 0x54, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x3a, 0x3a, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73,
}

var (
	file_tensorflow_lite_python_metrics_converter_error_data_proto_rawDescOnce sync.Once
	file_tensorflow_lite_python_metrics_converter_error_data_proto_rawDescData = file_tensorflow_lite_python_metrics_converter_error_data_proto_rawDesc
)

func file_tensorflow_lite_python_metrics_converter_error_data_proto_rawDescGZIP() []byte {
	file_tensorflow_lite_python_metrics_converter_error_data_proto_rawDescOnce.Do(func() {
		file_tensorflow_lite_python_metrics_converter_error_data_proto_rawDescData = protoimpl.X.CompressGZIP(file_tensorflow_lite_python_metrics_converter_error_data_proto_rawDescData)
	})
	return file_tensorflow_lite_python_metrics_converter_error_data_proto_rawDescData
}

var file_tensorflow_lite_python_metrics_converter_error_data_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_tensorflow_lite_python_metrics_converter_error_data_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_tensorflow_lite_python_metrics_converter_error_data_proto_goTypes = []interface{}{
	(ConverterErrorData_ErrorCode)(0),    // 0: tflite.metrics.ConverterErrorData.ErrorCode
	(ConverterErrorData_LocationType)(0), // 1: tflite.metrics.ConverterErrorData.LocationType
	(*ConverterErrorData)(nil),           // 2: tflite.metrics.ConverterErrorData
	(*ConverterErrorData_Operator)(nil),  // 3: tflite.metrics.ConverterErrorData.Operator
	(*ConverterErrorData_FileLoc)(nil),   // 4: tflite.metrics.ConverterErrorData.FileLoc
	(*ConverterErrorData_SourceLoc)(nil), // 5: tflite.metrics.ConverterErrorData.SourceLoc
	(*ConverterErrorData_Location)(nil),  // 6: tflite.metrics.ConverterErrorData.Location
}
var file_tensorflow_lite_python_metrics_converter_error_data_proto_depIdxs = []int32{
	0, // 0: tflite.metrics.ConverterErrorData.error_code:type_name -> tflite.metrics.ConverterErrorData.ErrorCode
	3, // 1: tflite.metrics.ConverterErrorData.operator:type_name -> tflite.metrics.ConverterErrorData.Operator
	6, // 2: tflite.metrics.ConverterErrorData.location:type_name -> tflite.metrics.ConverterErrorData.Location
	4, // 3: tflite.metrics.ConverterErrorData.SourceLoc.source:type_name -> tflite.metrics.ConverterErrorData.FileLoc
	1, // 4: tflite.metrics.ConverterErrorData.Location.type:type_name -> tflite.metrics.ConverterErrorData.LocationType
	5, // 5: tflite.metrics.ConverterErrorData.Location.call:type_name -> tflite.metrics.ConverterErrorData.SourceLoc
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_tensorflow_lite_python_metrics_converter_error_data_proto_init() }
func file_tensorflow_lite_python_metrics_converter_error_data_proto_init() {
	if File_tensorflow_lite_python_metrics_converter_error_data_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tensorflow_lite_python_metrics_converter_error_data_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConverterErrorData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_lite_python_metrics_converter_error_data_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConverterErrorData_Operator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_lite_python_metrics_converter_error_data_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConverterErrorData_FileLoc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_lite_python_metrics_converter_error_data_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConverterErrorData_SourceLoc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_lite_python_metrics_converter_error_data_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConverterErrorData_Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tensorflow_lite_python_metrics_converter_error_data_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tensorflow_lite_python_metrics_converter_error_data_proto_goTypes,
		DependencyIndexes: file_tensorflow_lite_python_metrics_converter_error_data_proto_depIdxs,
		EnumInfos:         file_tensorflow_lite_python_metrics_converter_error_data_proto_enumTypes,
		MessageInfos:      file_tensorflow_lite_python_metrics_converter_error_data_proto_msgTypes,
	}.Build()
	File_tensorflow_lite_python_metrics_converter_error_data_proto = out.File
	file_tensorflow_lite_python_metrics_converter_error_data_proto_rawDesc = nil
	file_tensorflow_lite_python_metrics_converter_error_data_proto_goTypes = nil
	file_tensorflow_lite_python_metrics_converter_error_data_proto_depIdxs = nil
}
