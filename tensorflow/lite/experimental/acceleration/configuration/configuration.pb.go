// Copyright 2020 The TensorFlow Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//-----------------------------------------------------------------------------
// WARNING: read all the warnings below before modifying this file!
//-----------------------------------------------------------------------------
//
// This schema defines how to configure TFLite for delegation. These
// definitions can be used in multiple ways: as output of a compatibility list,
// in benchmarking tools and to decouple delegate instantiation from code.
//
// The schema is work-in-progress, covering the most broadly used delegates and
// options.
//
// This schema is written using ProtoBuf syntax, but it is also used to generate
// a corresponding FlatBuffer schema.
//
// WARNING: The TfLiteSettings flatbuffer is used as part of the ABI
// for TensorFlow in Play Services, so please be careful to preserve
// binary backwards compatibility!
//
// WARNING: the Protobuf to Flatbuffer schema conversion does NOT
// pay any attention to the protobuf field numbers in this file,
// so setting the protobuf field numbers is NOT sufficient to preserve binary
// backwards compatibility.  Instead, to preserve backwards binary
// compatibility, new fields MUST ONLY be added at the END of messages,
// and fields should NEVER be deleted, but instead can only be deprecated.
//
// WARNING: before modifying this file, you should copy the previous contents
// of this file to 'testdata/configuration.proto_prev'.  This is used to test
// that your changes will preserve binary backwards compatibility.
//
// WARNING: you need to manually generate and update the generated flatbuffer
// code (configuration_generated.h) when modifying this file. See BUILD for
// more information.

// LINT.IfChange

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: tensorflow/lite/experimental/acceleration/configuration/configuration.proto

package configuration

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ExecutionPreference is used to match accelerators against the preferences of
// the current application or usecase. Some of the values here can appear both
// in the compatibility list and as input, some only as input.
//
// These are separate from NNAPIExecutionPreference - the compatibility list
// design doesn't assume a one-to-one mapping between which usecases
// compatibility list entries have been developed for and what settings are used
// for NNAPI.
type ExecutionPreference int32

const (
	// Match any selected preference. Allowlist (semantically - value is same as
	// on input).
	ExecutionPreference_ANY ExecutionPreference = 0
	// Match low latency preference. Both compatibility list and input.
	ExecutionPreference_LOW_LATENCY ExecutionPreference = 1
	// Math low power preference. Both compatibility list and input.
	ExecutionPreference_LOW_POWER ExecutionPreference = 2
	// Never accelerate. Can be used for input to compatibility list or for
	// standalone Acceleration configuration.
	ExecutionPreference_FORCE_CPU ExecutionPreference = 3
)

// Enum value maps for ExecutionPreference.
var (
	ExecutionPreference_name = map[int32]string{
		0: "ANY",
		1: "LOW_LATENCY",
		2: "LOW_POWER",
		3: "FORCE_CPU",
	}
	ExecutionPreference_value = map[string]int32{
		"ANY":         0,
		"LOW_LATENCY": 1,
		"LOW_POWER":   2,
		"FORCE_CPU":   3,
	}
)

func (x ExecutionPreference) Enum() *ExecutionPreference {
	p := new(ExecutionPreference)
	*p = x
	return p
}

func (x ExecutionPreference) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExecutionPreference) Descriptor() protoreflect.EnumDescriptor {
	return file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_enumTypes[0].Descriptor()
}

func (ExecutionPreference) Type() protoreflect.EnumType {
	return &file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_enumTypes[0]
}

func (x ExecutionPreference) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ExecutionPreference) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ExecutionPreference(num)
	return nil
}

// Deprecated: Use ExecutionPreference.Descriptor instead.
func (ExecutionPreference) EnumDescriptor() ([]byte, []int) {
	return file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_rawDescGZIP(), []int{0}
}

// TFLite accelerator to use.
//
// STATUS: support library and the stable delegate loader settings are agnostic
// to the actual accelerator.
type Delegate int32

const (
	Delegate_NONE    Delegate = 0
	Delegate_NNAPI   Delegate = 1
	Delegate_GPU     Delegate = 2
	Delegate_HEXAGON Delegate = 3
	Delegate_XNNPACK Delegate = 4
	// The EdgeTpu in Pixel devices.
	Delegate_EDGETPU Delegate = 5
	// The Coral EdgeTpu Dev Board / USB accelerator.
	Delegate_EDGETPU_CORAL Delegate = 6
	// Apple CoreML.
	Delegate_CORE_ML Delegate = 7
)

// Enum value maps for Delegate.
var (
	Delegate_name = map[int32]string{
		0: "NONE",
		1: "NNAPI",
		2: "GPU",
		3: "HEXAGON",
		4: "XNNPACK",
		5: "EDGETPU",
		6: "EDGETPU_CORAL",
		7: "CORE_ML",
	}
	Delegate_value = map[string]int32{
		"NONE":          0,
		"NNAPI":         1,
		"GPU":           2,
		"HEXAGON":       3,
		"XNNPACK":       4,
		"EDGETPU":       5,
		"EDGETPU_CORAL": 6,
		"CORE_ML":       7,
	}
)

func (x Delegate) Enum() *Delegate {
	p := new(Delegate)
	*p = x
	return p
}

func (x Delegate) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Delegate) Descriptor() protoreflect.EnumDescriptor {
	return file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_enumTypes[1].Descriptor()
}

func (Delegate) Type() protoreflect.EnumType {
	return &file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_enumTypes[1]
}

func (x Delegate) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Delegate) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Delegate(num)
	return nil
}

// Deprecated: Use Delegate.Descriptor instead.
func (Delegate) EnumDescriptor() ([]byte, []int) {
	return file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_rawDescGZIP(), []int{1}
}

type NNAPIExecutionPreference int32

const (
	// Undefined.
	NNAPIExecutionPreference_UNDEFINED NNAPIExecutionPreference = 0
	// Prefer executing in a way that minimizes battery drain.
	NNAPIExecutionPreference_NNAPI_LOW_POWER NNAPIExecutionPreference = 1
	// Prefer returning a single answer as fast as possible, even if this causes
	// more power consumption.
	NNAPIExecutionPreference_NNAPI_FAST_SINGLE_ANSWER NNAPIExecutionPreference = 2
	// Prefer maximizing the throughput of successive frames, for example when
	// processing successive frames coming from the camera.
	NNAPIExecutionPreference_NNAPI_SUSTAINED_SPEED NNAPIExecutionPreference = 3
)

// Enum value maps for NNAPIExecutionPreference.
var (
	NNAPIExecutionPreference_name = map[int32]string{
		0: "UNDEFINED",
		1: "NNAPI_LOW_POWER",
		2: "NNAPI_FAST_SINGLE_ANSWER",
		3: "NNAPI_SUSTAINED_SPEED",
	}
	NNAPIExecutionPreference_value = map[string]int32{
		"UNDEFINED":                0,
		"NNAPI_LOW_POWER":          1,
		"NNAPI_FAST_SINGLE_ANSWER": 2,
		"NNAPI_SUSTAINED_SPEED":    3,
	}
)

func (x NNAPIExecutionPreference) Enum() *NNAPIExecutionPreference {
	p := new(NNAPIExecutionPreference)
	*p = x
	return p
}

func (x NNAPIExecutionPreference) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NNAPIExecutionPreference) Descriptor() protoreflect.EnumDescriptor {
	return file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_enumTypes[2].Descriptor()
}

func (NNAPIExecutionPreference) Type() protoreflect.EnumType {
	return &file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_enumTypes[2]
}

func (x NNAPIExecutionPreference) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *NNAPIExecutionPreference) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = NNAPIExecutionPreference(num)
	return nil
}

// Deprecated: Use NNAPIExecutionPreference.Descriptor instead.
func (NNAPIExecutionPreference) EnumDescriptor() ([]byte, []int) {
	return file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_rawDescGZIP(), []int{2}
}

type NNAPIExecutionPriority int32

const (
	NNAPIExecutionPriority_NNAPI_PRIORITY_UNDEFINED NNAPIExecutionPriority = 0
	NNAPIExecutionPriority_NNAPI_PRIORITY_LOW       NNAPIExecutionPriority = 1
	NNAPIExecutionPriority_NNAPI_PRIORITY_MEDIUM    NNAPIExecutionPriority = 2
	NNAPIExecutionPriority_NNAPI_PRIORITY_HIGH      NNAPIExecutionPriority = 3
)

// Enum value maps for NNAPIExecutionPriority.
var (
	NNAPIExecutionPriority_name = map[int32]string{
		0: "NNAPI_PRIORITY_UNDEFINED",
		1: "NNAPI_PRIORITY_LOW",
		2: "NNAPI_PRIORITY_MEDIUM",
		3: "NNAPI_PRIORITY_HIGH",
	}
	NNAPIExecutionPriority_value = map[string]int32{
		"NNAPI_PRIORITY_UNDEFINED": 0,
		"NNAPI_PRIORITY_LOW":       1,
		"NNAPI_PRIORITY_MEDIUM":    2,
		"NNAPI_PRIORITY_HIGH":      3,
	}
)

func (x NNAPIExecutionPriority) Enum() *NNAPIExecutionPriority {
	p := new(NNAPIExecutionPriority)
	*p = x
	return p
}

func (x NNAPIExecutionPriority) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NNAPIExecutionPriority) Descriptor() protoreflect.EnumDescriptor {
	return file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_enumTypes[3].Descriptor()
}

func (NNAPIExecutionPriority) Type() protoreflect.EnumType {
	return &file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_enumTypes[3]
}

func (x NNAPIExecutionPriority) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *NNAPIExecutionPriority) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = NNAPIExecutionPriority(num)
	return nil
}

// Deprecated: Use NNAPIExecutionPriority.Descriptor instead.
func (NNAPIExecutionPriority) EnumDescriptor() ([]byte, []int) {
	return file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_rawDescGZIP(), []int{3}
}

// LINT.IfChange
// Which GPU backend to select. Default behaviour on Android is to try OpenCL
// and if it's not available fall back to OpenGL.
type GPUBackend int32

const (
	GPUBackend_UNSET  GPUBackend = 0
	GPUBackend_OPENCL GPUBackend = 1
	GPUBackend_OPENGL GPUBackend = 2
)

// Enum value maps for GPUBackend.
var (
	GPUBackend_name = map[int32]string{
		0: "UNSET",
		1: "OPENCL",
		2: "OPENGL",
	}
	GPUBackend_value = map[string]int32{
		"UNSET":  0,
		"OPENCL": 1,
		"OPENGL": 2,
	}
)

func (x GPUBackend) Enum() *GPUBackend {
	p := new(GPUBackend)
	*p = x
	return p
}

func (x GPUBackend) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GPUBackend) Descriptor() protoreflect.EnumDescriptor {
	return file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_enumTypes[4].Descriptor()
}

func (GPUBackend) Type() protoreflect.EnumType {
	return &file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_enumTypes[4]
}

func (x GPUBackend) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GPUBackend) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GPUBackend(num)
	return nil
}

// Deprecated: Use GPUBackend.Descriptor instead.
func (GPUBackend) EnumDescriptor() ([]byte, []int) {
	return file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_rawDescGZIP(), []int{4}
}

// GPU inference priorities define relative priorities given by the GPU delegate
// to different client needs.
// Corresponds to TfLiteGpuInferencePriority.
type GPUInferencePriority int32

const (
	GPUInferencePriority_GPU_PRIORITY_AUTO             GPUInferencePriority = 0
	GPUInferencePriority_GPU_PRIORITY_MAX_PRECISION    GPUInferencePriority = 1
	GPUInferencePriority_GPU_PRIORITY_MIN_LATENCY      GPUInferencePriority = 2
	GPUInferencePriority_GPU_PRIORITY_MIN_MEMORY_USAGE GPUInferencePriority = 3
)

// Enum value maps for GPUInferencePriority.
var (
	GPUInferencePriority_name = map[int32]string{
		0: "GPU_PRIORITY_AUTO",
		1: "GPU_PRIORITY_MAX_PRECISION",
		2: "GPU_PRIORITY_MIN_LATENCY",
		3: "GPU_PRIORITY_MIN_MEMORY_USAGE",
	}
	GPUInferencePriority_value = map[string]int32{
		"GPU_PRIORITY_AUTO":             0,
		"GPU_PRIORITY_MAX_PRECISION":    1,
		"GPU_PRIORITY_MIN_LATENCY":      2,
		"GPU_PRIORITY_MIN_MEMORY_USAGE": 3,
	}
)

func (x GPUInferencePriority) Enum() *GPUInferencePriority {
	p := new(GPUInferencePriority)
	*p = x
	return p
}

func (x GPUInferencePriority) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GPUInferencePriority) Descriptor() protoreflect.EnumDescriptor {
	return file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_enumTypes[5].Descriptor()
}

func (GPUInferencePriority) Type() protoreflect.EnumType {
	return &file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_enumTypes[5]
}

func (x GPUInferencePriority) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GPUInferencePriority) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GPUInferencePriority(num)
	return nil
}

// Deprecated: Use GPUInferencePriority.Descriptor instead.
func (GPUInferencePriority) EnumDescriptor() ([]byte, []int) {
	return file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_rawDescGZIP(), []int{5}
}

// GPU inference preference for initialization time vs. inference time.
// Corresponds to TfLiteGpuInferenceUsage.
type GPUInferenceUsage int32

const (
	// Delegate will be used only once, therefore, bootstrap/init time should
	// be taken into account.
	GPUInferenceUsage_GPU_INFERENCE_PREFERENCE_FAST_SINGLE_ANSWER GPUInferenceUsage = 0
	// Prefer maximizing the throughput. Same delegate will be used repeatedly on
	// multiple inputs.
	GPUInferenceUsage_GPU_INFERENCE_PREFERENCE_SUSTAINED_SPEED GPUInferenceUsage = 1
)

// Enum value maps for GPUInferenceUsage.
var (
	GPUInferenceUsage_name = map[int32]string{
		0: "GPU_INFERENCE_PREFERENCE_FAST_SINGLE_ANSWER",
		1: "GPU_INFERENCE_PREFERENCE_SUSTAINED_SPEED",
	}
	GPUInferenceUsage_value = map[string]int32{
		"GPU_INFERENCE_PREFERENCE_FAST_SINGLE_ANSWER": 0,
		"GPU_INFERENCE_PREFERENCE_SUSTAINED_SPEED":    1,
	}
)

func (x GPUInferenceUsage) Enum() *GPUInferenceUsage {
	p := new(GPUInferenceUsage)
	*p = x
	return p
}

func (x GPUInferenceUsage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GPUInferenceUsage) Descriptor() protoreflect.EnumDescriptor {
	return file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_enumTypes[6].Descriptor()
}

func (GPUInferenceUsage) Type() protoreflect.EnumType {
	return &file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_enumTypes[6]
}

func (x GPUInferenceUsage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *GPUInferenceUsage) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = GPUInferenceUsage(num)
	return nil
}

// Deprecated: Use GPUInferenceUsage.Descriptor instead.
func (GPUInferenceUsage) EnumDescriptor() ([]byte, []int) {
	return file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_rawDescGZIP(), []int{6}
}

// XNNPack Delegate settings.
//
// See
// https://github.com/tensorflow/tensorflow/blob/master/tensorflow/lite/delegates/xnnpack/xnnpack_delegate.h
type XNNPackFlags int32

const (
	// These flags match the flags in xnnpack_delegate.h.
	XNNPackFlags_TFLITE_XNNPACK_DELEGATE_NO_FLAGS XNNPackFlags = 0
	// Enable fast signed integer XNNpack kernels.
	XNNPackFlags_TFLITE_XNNPACK_DELEGATE_FLAG_QS8 XNNPackFlags = 1
	// Enable fast unsigned integer XNNpack kernels.
	XNNPackFlags_TFLITE_XNNPACK_DELEGATE_FLAG_QU8 XNNPackFlags = 2
	// Enable both, signed and unsigned integer XNNpack kernels.
	XNNPackFlags_TFLITE_XNNPACK_DELEGATE_FLAG_QS8_QU8 XNNPackFlags = 3
	// Force 16-bit floating point inference.
	XNNPackFlags_TFLITE_XNNPACK_DELEGATE_FLAG_FORCE_FP16 XNNPackFlags = 4
)

// Enum value maps for XNNPackFlags.
var (
	XNNPackFlags_name = map[int32]string{
		0: "TFLITE_XNNPACK_DELEGATE_NO_FLAGS",
		1: "TFLITE_XNNPACK_DELEGATE_FLAG_QS8",
		2: "TFLITE_XNNPACK_DELEGATE_FLAG_QU8",
		3: "TFLITE_XNNPACK_DELEGATE_FLAG_QS8_QU8",
		4: "TFLITE_XNNPACK_DELEGATE_FLAG_FORCE_FP16",
	}
	XNNPackFlags_value = map[string]int32{
		"TFLITE_XNNPACK_DELEGATE_NO_FLAGS":        0,
		"TFLITE_XNNPACK_DELEGATE_FLAG_QS8":        1,
		"TFLITE_XNNPACK_DELEGATE_FLAG_QU8":        2,
		"TFLITE_XNNPACK_DELEGATE_FLAG_QS8_QU8":    3,
		"TFLITE_XNNPACK_DELEGATE_FLAG_FORCE_FP16": 4,
	}
)

func (x XNNPackFlags) Enum() *XNNPackFlags {
	p := new(XNNPackFlags)
	*p = x
	return p
}

func (x XNNPackFlags) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (XNNPackFlags) Descriptor() protoreflect.EnumDescriptor {
	return file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_enumTypes[7].Descriptor()
}

func (XNNPackFlags) Type() protoreflect.EnumType {
	return &file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_enumTypes[7]
}

func (x XNNPackFlags) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *XNNPackFlags) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = XNNPackFlags(num)
	return nil
}

// Deprecated: Use XNNPackFlags.Descriptor instead.
func (XNNPackFlags) EnumDescriptor() ([]byte, []int) {
	return file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_rawDescGZIP(), []int{7}
}

// Generic definitions of EdgeTPU power states.
type EdgeTpuPowerState int32

const (
	// Undefined power state.
	EdgeTpuPowerState_UNDEFINED_POWERSTATE EdgeTpuPowerState = 0
	// TPU core is off but control cluster is on.
	EdgeTpuPowerState_TPU_CORE_OFF EdgeTpuPowerState = 1
	// A non-active low-power state that has much smaller transition time to
	// active compared to off.
	EdgeTpuPowerState_READY EdgeTpuPowerState = 2
	// Minimum power active state.
	EdgeTpuPowerState_ACTIVE_MIN_POWER EdgeTpuPowerState = 3
	// Very low performance, very low power.
	EdgeTpuPowerState_ACTIVE_VERY_LOW_POWER EdgeTpuPowerState = 4
	// Low performance, low power.
	EdgeTpuPowerState_ACTIVE_LOW_POWER EdgeTpuPowerState = 5
	// The normal performance and power. This setting usually provides the
	// optimal perf/power trade-off for the average use-case.
	EdgeTpuPowerState_ACTIVE EdgeTpuPowerState = 6
	// Maximum performance level. Potentially higher power and thermal. This
	// setting may not be allowed in production depending on the system.
	EdgeTpuPowerState_OVER_DRIVE EdgeTpuPowerState = 7
)

// Enum value maps for EdgeTpuPowerState.
var (
	EdgeTpuPowerState_name = map[int32]string{
		0: "UNDEFINED_POWERSTATE",
		1: "TPU_CORE_OFF",
		2: "READY",
		3: "ACTIVE_MIN_POWER",
		4: "ACTIVE_VERY_LOW_POWER",
		5: "ACTIVE_LOW_POWER",
		6: "ACTIVE",
		7: "OVER_DRIVE",
	}
	EdgeTpuPowerState_value = map[string]int32{
		"UNDEFINED_POWERSTATE":  0,
		"TPU_CORE_OFF":          1,
		"READY":                 2,
		"ACTIVE_MIN_POWER":      3,
		"ACTIVE_VERY_LOW_POWER": 4,
		"ACTIVE_LOW_POWER":      5,
		"ACTIVE":                6,
		"OVER_DRIVE":            7,
	}
)

func (x EdgeTpuPowerState) Enum() *EdgeTpuPowerState {
	p := new(EdgeTpuPowerState)
	*p = x
	return p
}

func (x EdgeTpuPowerState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EdgeTpuPowerState) Descriptor() protoreflect.EnumDescriptor {
	return file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_enumTypes[8].Descriptor()
}

func (EdgeTpuPowerState) Type() protoreflect.EnumType {
	return &file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_enumTypes[8]
}

func (x EdgeTpuPowerState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EdgeTpuPowerState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EdgeTpuPowerState(num)
	return nil
}

// Deprecated: Use EdgeTpuPowerState.Descriptor instead.
func (EdgeTpuPowerState) EnumDescriptor() ([]byte, []int) {
	return file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_rawDescGZIP(), []int{8}
}

// Which stage of benchmarking the event is for.
// There might be multiple events with the same type, if a benchmark is run
// multiple times.
type BenchmarkEventType int32

const (
	BenchmarkEventType_UNDEFINED_BENCHMARK_EVENT_TYPE BenchmarkEventType = 0
	// Benchmark start. A start without an end can be interpreted as a test that
	// has crashed or hung.
	BenchmarkEventType_START BenchmarkEventType = 1
	// Benchmarking completion. A model was successfully loaded, acceleration
	// configured and inference run without errors. There may still be an issue
	// with correctness of results, or with performance.
	BenchmarkEventType_END BenchmarkEventType = 2
	// Benchmark was not completed due to an error. The error may be a handled
	// error (e.g., failure in a delegate), or a crash.
	BenchmarkEventType_ERROR BenchmarkEventType = 3
	// Benchmark data has been sent for logging.
	BenchmarkEventType_LOGGED BenchmarkEventType = 4
	// Benchmark encountered an error but was able to continue. The error is not
	// related to the model execution but to the mini-benchmark logic. An example
	// of error is a failure when trying to set the CPU affinity of the benchmark
	// runner process.
	BenchmarkEventType_RECOVERED_ERROR BenchmarkEventType = 5
)

// Enum value maps for BenchmarkEventType.
var (
	BenchmarkEventType_name = map[int32]string{
		0: "UNDEFINED_BENCHMARK_EVENT_TYPE",
		1: "START",
		2: "END",
		3: "ERROR",
		4: "LOGGED",
		5: "RECOVERED_ERROR",
	}
	BenchmarkEventType_value = map[string]int32{
		"UNDEFINED_BENCHMARK_EVENT_TYPE": 0,
		"START":                          1,
		"END":                            2,
		"ERROR":                          3,
		"LOGGED":                         4,
		"RECOVERED_ERROR":                5,
	}
)

func (x BenchmarkEventType) Enum() *BenchmarkEventType {
	p := new(BenchmarkEventType)
	*p = x
	return p
}

func (x BenchmarkEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BenchmarkEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_enumTypes[9].Descriptor()
}

func (BenchmarkEventType) Type() protoreflect.EnumType {
	return &file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_enumTypes[9]
}

func (x BenchmarkEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BenchmarkEventType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BenchmarkEventType(num)
	return nil
}

// Deprecated: Use BenchmarkEventType.Descriptor instead.
func (BenchmarkEventType) EnumDescriptor() ([]byte, []int) {
	return file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_rawDescGZIP(), []int{9}
}

// When during benchmark execution an error occurred.
type BenchmarkStage int32

const (
	BenchmarkStage_UNKNOWN BenchmarkStage = 0
	// During model loading or delegation.
	BenchmarkStage_INITIALIZATION BenchmarkStage = 1
	// During inference.
	BenchmarkStage_INFERENCE BenchmarkStage = 2
)

// Enum value maps for BenchmarkStage.
var (
	BenchmarkStage_name = map[int32]string{
		0: "UNKNOWN",
		1: "INITIALIZATION",
		2: "INFERENCE",
	}
	BenchmarkStage_value = map[string]int32{
		"UNKNOWN":        0,
		"INITIALIZATION": 1,
		"INFERENCE":      2,
	}
)

func (x BenchmarkStage) Enum() *BenchmarkStage {
	p := new(BenchmarkStage)
	*p = x
	return p
}

func (x BenchmarkStage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BenchmarkStage) Descriptor() protoreflect.EnumDescriptor {
	return file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_enumTypes[10].Descriptor()
}

func (BenchmarkStage) Type() protoreflect.EnumType {
	return &file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_enumTypes[10]
}

func (x BenchmarkStage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BenchmarkStage) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BenchmarkStage(num)
	return nil
}

// Deprecated: Use BenchmarkStage.Descriptor instead.
func (BenchmarkStage) EnumDescriptor() ([]byte, []int) {
	return file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_rawDescGZIP(), []int{10}
}

// Note the enum order change from the above header for better proto practice.
type CoreMLSettings_EnabledDevices int32

const (
	// Always create Core ML delegate.
	CoreMLSettings_DEVICES_ALL CoreMLSettings_EnabledDevices = 0
	// Create Core ML delegate only on devices with Apple Neural Engine.
	CoreMLSettings_DEVICES_WITH_NEURAL_ENGINE CoreMLSettings_EnabledDevices = 1
)

// Enum value maps for CoreMLSettings_EnabledDevices.
var (
	CoreMLSettings_EnabledDevices_name = map[int32]string{
		0: "DEVICES_ALL",
		1: "DEVICES_WITH_NEURAL_ENGINE",
	}
	CoreMLSettings_EnabledDevices_value = map[string]int32{
		"DEVICES_ALL":                0,
		"DEVICES_WITH_NEURAL_ENGINE": 1,
	}
)

func (x CoreMLSettings_EnabledDevices) Enum() *CoreMLSettings_EnabledDevices {
	p := new(CoreMLSettings_EnabledDevices)
	*p = x
	return p
}

func (x CoreMLSettings_EnabledDevices) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CoreMLSettings_EnabledDevices) Descriptor() protoreflect.EnumDescriptor {
	return file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_enumTypes[11].Descriptor()
}

func (CoreMLSettings_EnabledDevices) Type() protoreflect.EnumType {
	return &file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_enumTypes[11]
}

func (x CoreMLSettings_EnabledDevices) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CoreMLSettings_EnabledDevices) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CoreMLSettings_EnabledDevices(num)
	return nil
}

// Deprecated: Use CoreMLSettings_EnabledDevices.Descriptor instead.
func (CoreMLSettings_EnabledDevices) EnumDescriptor() ([]byte, []int) {
	return file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_rawDescGZIP(), []int{5, 0}
}

// EdgeTPU platform types.
type EdgeTpuDeviceSpec_PlatformType int32

const (
	EdgeTpuDeviceSpec_MMIO             EdgeTpuDeviceSpec_PlatformType = 0
	EdgeTpuDeviceSpec_REFERENCE        EdgeTpuDeviceSpec_PlatformType = 1
	EdgeTpuDeviceSpec_SIMULATOR        EdgeTpuDeviceSpec_PlatformType = 2
	EdgeTpuDeviceSpec_REMOTE_SIMULATOR EdgeTpuDeviceSpec_PlatformType = 3
)

// Enum value maps for EdgeTpuDeviceSpec_PlatformType.
var (
	EdgeTpuDeviceSpec_PlatformType_name = map[int32]string{
		0: "MMIO",
		1: "REFERENCE",
		2: "SIMULATOR",
		3: "REMOTE_SIMULATOR",
	}
	EdgeTpuDeviceSpec_PlatformType_value = map[string]int32{
		"MMIO":             0,
		"REFERENCE":        1,
		"SIMULATOR":        2,
		"REMOTE_SIMULATOR": 3,
	}
)

func (x EdgeTpuDeviceSpec_PlatformType) Enum() *EdgeTpuDeviceSpec_PlatformType {
	p := new(EdgeTpuDeviceSpec_PlatformType)
	*p = x
	return p
}

func (x EdgeTpuDeviceSpec_PlatformType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EdgeTpuDeviceSpec_PlatformType) Descriptor() protoreflect.EnumDescriptor {
	return file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_enumTypes[12].Descriptor()
}

func (EdgeTpuDeviceSpec_PlatformType) Type() protoreflect.EnumType {
	return &file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_enumTypes[12]
}

func (x EdgeTpuDeviceSpec_PlatformType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EdgeTpuDeviceSpec_PlatformType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EdgeTpuDeviceSpec_PlatformType(num)
	return nil
}

// Deprecated: Use EdgeTpuDeviceSpec_PlatformType.Descriptor instead.
func (EdgeTpuDeviceSpec_PlatformType) EnumDescriptor() ([]byte, []int) {
	return file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_rawDescGZIP(), []int{7, 0}
}

// Float truncation types for EdgeTPU.
type EdgeTpuSettings_FloatTruncationType int32

const (
	EdgeTpuSettings_UNSPECIFIED   EdgeTpuSettings_FloatTruncationType = 0
	EdgeTpuSettings_NO_TRUNCATION EdgeTpuSettings_FloatTruncationType = 1
	EdgeTpuSettings_BFLOAT16      EdgeTpuSettings_FloatTruncationType = 2
	EdgeTpuSettings_HALF          EdgeTpuSettings_FloatTruncationType = 3
)

// Enum value maps for EdgeTpuSettings_FloatTruncationType.
var (
	EdgeTpuSettings_FloatTruncationType_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "NO_TRUNCATION",
		2: "BFLOAT16",
		3: "HALF",
	}
	EdgeTpuSettings_FloatTruncationType_value = map[string]int32{
		"UNSPECIFIED":   0,
		"NO_TRUNCATION": 1,
		"BFLOAT16":      2,
		"HALF":          3,
	}
)

func (x EdgeTpuSettings_FloatTruncationType) Enum() *EdgeTpuSettings_FloatTruncationType {
	p := new(EdgeTpuSettings_FloatTruncationType)
	*p = x
	return p
}

func (x EdgeTpuSettings_FloatTruncationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EdgeTpuSettings_FloatTruncationType) Descriptor() protoreflect.EnumDescriptor {
	return file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_enumTypes[13].Descriptor()
}

func (EdgeTpuSettings_FloatTruncationType) Type() protoreflect.EnumType {
	return &file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_enumTypes[13]
}

func (x EdgeTpuSettings_FloatTruncationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EdgeTpuSettings_FloatTruncationType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EdgeTpuSettings_FloatTruncationType(num)
	return nil
}

// Deprecated: Use EdgeTpuSettings_FloatTruncationType.Descriptor instead.
func (EdgeTpuSettings_FloatTruncationType) EnumDescriptor() ([]byte, []int) {
	return file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_rawDescGZIP(), []int{9, 0}
}

type EdgeTpuSettings_QosClass int32

const (
	EdgeTpuSettings_QOS_UNDEFINED EdgeTpuSettings_QosClass = 0
	EdgeTpuSettings_BEST_EFFORT   EdgeTpuSettings_QosClass = 1
	EdgeTpuSettings_REALTIME      EdgeTpuSettings_QosClass = 2
)

// Enum value maps for EdgeTpuSettings_QosClass.
var (
	EdgeTpuSettings_QosClass_name = map[int32]string{
		0: "QOS_UNDEFINED",
		1: "BEST_EFFORT",
		2: "REALTIME",
	}
	EdgeTpuSettings_QosClass_value = map[string]int32{
		"QOS_UNDEFINED": 0,
		"BEST_EFFORT":   1,
		"REALTIME":      2,
	}
)

func (x EdgeTpuSettings_QosClass) Enum() *EdgeTpuSettings_QosClass {
	p := new(EdgeTpuSettings_QosClass)
	*p = x
	return p
}

func (x EdgeTpuSettings_QosClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EdgeTpuSettings_QosClass) Descriptor() protoreflect.EnumDescriptor {
	return file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_enumTypes[14].Descriptor()
}

func (EdgeTpuSettings_QosClass) Type() protoreflect.EnumType {
	return &file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_enumTypes[14]
}

func (x EdgeTpuSettings_QosClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EdgeTpuSettings_QosClass) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EdgeTpuSettings_QosClass(num)
	return nil
}

// Deprecated: Use EdgeTpuSettings_QosClass.Descriptor instead.
func (EdgeTpuSettings_QosClass) EnumDescriptor() ([]byte, []int) {
	return file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_rawDescGZIP(), []int{9, 1}
}

type CoralSettings_Performance int32

const (
	CoralSettings_UNDEFINED CoralSettings_Performance = 0
	CoralSettings_MAXIMUM   CoralSettings_Performance = 1
	CoralSettings_HIGH      CoralSettings_Performance = 2
	CoralSettings_MEDIUM    CoralSettings_Performance = 3
	CoralSettings_LOW       CoralSettings_Performance = 4
)

// Enum value maps for CoralSettings_Performance.
var (
	CoralSettings_Performance_name = map[int32]string{
		0: "UNDEFINED",
		1: "MAXIMUM",
		2: "HIGH",
		3: "MEDIUM",
		4: "LOW",
	}
	CoralSettings_Performance_value = map[string]int32{
		"UNDEFINED": 0,
		"MAXIMUM":   1,
		"HIGH":      2,
		"MEDIUM":    3,
		"LOW":       4,
	}
)

func (x CoralSettings_Performance) Enum() *CoralSettings_Performance {
	p := new(CoralSettings_Performance)
	*p = x
	return p
}

func (x CoralSettings_Performance) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CoralSettings_Performance) Descriptor() protoreflect.EnumDescriptor {
	return file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_enumTypes[15].Descriptor()
}

func (CoralSettings_Performance) Type() protoreflect.EnumType {
	return &file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_enumTypes[15]
}

func (x CoralSettings_Performance) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CoralSettings_Performance) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CoralSettings_Performance(num)
	return nil
}

// Deprecated: Use CoralSettings_Performance.Descriptor instead.
func (CoralSettings_Performance) EnumDescriptor() ([]byte, []int) {
	return file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_rawDescGZIP(), []int{10, 0}
}

// One possible acceleration configuration.
type ComputeSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Which preference to use this accelerator for.
	Preference *ExecutionPreference `protobuf:"varint,1,opt,name=preference,enum=tflite.proto.ExecutionPreference" json:"preference,omitempty"`
	// How to configure TFLite
	TfliteSettings *TFLiteSettings `protobuf:"bytes,2,opt,name=tflite_settings,json=tfliteSettings" json:"tflite_settings,omitempty"`
	// Identifiers to use for instrumentation and telemetry.
	ModelNamespaceForStatistics  *string `protobuf:"bytes,3,opt,name=model_namespace_for_statistics,json=modelNamespaceForStatistics" json:"model_namespace_for_statistics,omitempty"`
	ModelIdentifierForStatistics *string `protobuf:"bytes,4,opt,name=model_identifier_for_statistics,json=modelIdentifierForStatistics" json:"model_identifier_for_statistics,omitempty"`
	// 'Maybe' acceleration: use mini-benchmark to select settings.
	SettingsToTestLocally *MinibenchmarkSettings `protobuf:"bytes,5,opt,name=settings_to_test_locally,json=settingsToTestLocally" json:"settings_to_test_locally,omitempty"`
}

func (x *ComputeSettings) Reset() {
	*x = ComputeSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComputeSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComputeSettings) ProtoMessage() {}

func (x *ComputeSettings) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComputeSettings.ProtoReflect.Descriptor instead.
func (*ComputeSettings) Descriptor() ([]byte, []int) {
	return file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_rawDescGZIP(), []int{0}
}

func (x *ComputeSettings) GetPreference() ExecutionPreference {
	if x != nil && x.Preference != nil {
		return *x.Preference
	}
	return ExecutionPreference_ANY
}

func (x *ComputeSettings) GetTfliteSettings() *TFLiteSettings {
	if x != nil {
		return x.TfliteSettings
	}
	return nil
}

func (x *ComputeSettings) GetModelNamespaceForStatistics() string {
	if x != nil && x.ModelNamespaceForStatistics != nil {
		return *x.ModelNamespaceForStatistics
	}
	return ""
}

func (x *ComputeSettings) GetModelIdentifierForStatistics() string {
	if x != nil && x.ModelIdentifierForStatistics != nil {
		return *x.ModelIdentifierForStatistics
	}
	return ""
}

func (x *ComputeSettings) GetSettingsToTestLocally() *MinibenchmarkSettings {
	if x != nil {
		return x.SettingsToTestLocally
	}
	return nil
}

// NNAPI delegate settings.
type NNAPISettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Which instance (NNAPI accelerator) to use. One driver may provide several
	// accelerators (though a driver may also hide several back-ends behind one
	// name, at the choice of the driver vendor).
	// Note that driver introspection is only available in Android Q and later.
	AcceleratorName *string `protobuf:"bytes,1,opt,name=accelerator_name,json=acceleratorName" json:"accelerator_name,omitempty"`
	// NNAPI model compilation caching settings to be passed to
	// tflite::StatefulNnApiDelegate
	CacheDirectory *string `protobuf:"bytes,2,opt,name=cache_directory,json=cacheDirectory" json:"cache_directory,omitempty"`
	ModelToken     *string `protobuf:"bytes,3,opt,name=model_token,json=modelToken" json:"model_token,omitempty"`
	// NNAPI execution preference to pass. See
	// https://developer.android.com/ndk/reference/group/neural-networks.html
	ExecutionPreference *NNAPIExecutionPreference `protobuf:"varint,4,opt,name=execution_preference,json=executionPreference,enum=tflite.proto.NNAPIExecutionPreference" json:"execution_preference,omitempty"`
	// Number of instances to cache for the same model (for input size
	// changes). This is mandatory for getting reasonable performance in that
	// case.
	NoOfNnapiInstancesToCache *int32 `protobuf:"varint,5,opt,name=no_of_nnapi_instances_to_cache,json=noOfNnapiInstancesToCache" json:"no_of_nnapi_instances_to_cache,omitempty"`
	// Deprecated; use the fallback_settings in TFLiteSettings.
	//
	// Whether to automatically fall back to TFLite CPU path.
	//
	// Deprecated: Do not use.
	FallbackSettings *FallbackSettings `protobuf:"bytes,6,opt,name=fallback_settings,json=fallbackSettings" json:"fallback_settings,omitempty"`
	// Whether to allow use of NNAPI CPU (nnapi-reference accelerator) on Android
	// 10+ when an accelerator name is not specified. The NNAPI CPU typically
	// performs less well than the TfLite built-in kernels; but allowing allows a
	// model to be partially accelerated which may be a win.
	AllowNnapiCpuOnAndroid_10Plus *bool                   `protobuf:"varint,7,opt,name=allow_nnapi_cpu_on_android_10_plus,json=allowNnapiCpuOnAndroid10Plus" json:"allow_nnapi_cpu_on_android_10_plus,omitempty"`
	ExecutionPriority             *NNAPIExecutionPriority `protobuf:"varint,8,opt,name=execution_priority,json=executionPriority,enum=tflite.proto.NNAPIExecutionPriority" json:"execution_priority,omitempty"`
	// Whether to allow dynamic dimension sizes without re-compilation.
	// A tensor of with dynamic dimension must have a valid dims_signature
	// defined.
	// Only supported in NNAPI 1.1 and newer versions.
	// WARNING: Setting this flag to true may result in model being rejected by
	// accelerator. This should only be enabled if the target device supports
	// dynamic dimensions of the model.
	// By default this is set to false.
	AllowDynamicDimensions *bool `protobuf:"varint,9,opt,name=allow_dynamic_dimensions,json=allowDynamicDimensions" json:"allow_dynamic_dimensions,omitempty"`
	// Whether to allow the NNAPI accelerator to optionally use lower-precision
	// float16 (16-bit floating point) arithmetic when doing calculations on
	// float32 (32-bit floating point).
	AllowFp16PrecisionForFp32 *bool `protobuf:"varint,10,opt,name=allow_fp16_precision_for_fp32,json=allowFp16PrecisionForFp32" json:"allow_fp16_precision_for_fp32,omitempty"`
	// Whether to use NNAPI Burst mode.
	// Burst mode allows accelerators to efficiently manage resources, which
	// would significantly reduce overhead especially if the same delegate
	// instance is to be used for multiple inferences.
	UseBurstComputation *bool `protobuf:"varint,11,opt,name=use_burst_computation,json=useBurstComputation" json:"use_burst_computation,omitempty"`
	// Optional pointer to NNAPI Support Library provided pointer to
	// NnApiSLDriverImplFL5 which can be used to construct the
	// NNAPI delegate.
	SupportLibraryHandle *int64 `protobuf:"varint,12,opt,name=support_library_handle,json=supportLibraryHandle" json:"support_library_handle,omitempty"`
}

func (x *NNAPISettings) Reset() {
	*x = NNAPISettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NNAPISettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NNAPISettings) ProtoMessage() {}

func (x *NNAPISettings) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NNAPISettings.ProtoReflect.Descriptor instead.
func (*NNAPISettings) Descriptor() ([]byte, []int) {
	return file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_rawDescGZIP(), []int{1}
}

func (x *NNAPISettings) GetAcceleratorName() string {
	if x != nil && x.AcceleratorName != nil {
		return *x.AcceleratorName
	}
	return ""
}

func (x *NNAPISettings) GetCacheDirectory() string {
	if x != nil && x.CacheDirectory != nil {
		return *x.CacheDirectory
	}
	return ""
}

func (x *NNAPISettings) GetModelToken() string {
	if x != nil && x.ModelToken != nil {
		return *x.ModelToken
	}
	return ""
}

func (x *NNAPISettings) GetExecutionPreference() NNAPIExecutionPreference {
	if x != nil && x.ExecutionPreference != nil {
		return *x.ExecutionPreference
	}
	return NNAPIExecutionPreference_UNDEFINED
}

func (x *NNAPISettings) GetNoOfNnapiInstancesToCache() int32 {
	if x != nil && x.NoOfNnapiInstancesToCache != nil {
		return *x.NoOfNnapiInstancesToCache
	}
	return 0
}

// Deprecated: Do not use.
func (x *NNAPISettings) GetFallbackSettings() *FallbackSettings {
	if x != nil {
		return x.FallbackSettings
	}
	return nil
}

func (x *NNAPISettings) GetAllowNnapiCpuOnAndroid_10Plus() bool {
	if x != nil && x.AllowNnapiCpuOnAndroid_10Plus != nil {
		return *x.AllowNnapiCpuOnAndroid_10Plus
	}
	return false
}

func (x *NNAPISettings) GetExecutionPriority() NNAPIExecutionPriority {
	if x != nil && x.ExecutionPriority != nil {
		return *x.ExecutionPriority
	}
	return NNAPIExecutionPriority_NNAPI_PRIORITY_UNDEFINED
}

func (x *NNAPISettings) GetAllowDynamicDimensions() bool {
	if x != nil && x.AllowDynamicDimensions != nil {
		return *x.AllowDynamicDimensions
	}
	return false
}

func (x *NNAPISettings) GetAllowFp16PrecisionForFp32() bool {
	if x != nil && x.AllowFp16PrecisionForFp32 != nil {
		return *x.AllowFp16PrecisionForFp32
	}
	return false
}

func (x *NNAPISettings) GetUseBurstComputation() bool {
	if x != nil && x.UseBurstComputation != nil {
		return *x.UseBurstComputation
	}
	return false
}

func (x *NNAPISettings) GetSupportLibraryHandle() int64 {
	if x != nil && x.SupportLibraryHandle != nil {
		return *x.SupportLibraryHandle
	}
	return 0
}

// GPU Delegate settings.
//
// See
// https://github.com/tensorflow/tensorflow/blob/master/tensorflow/lite/delegates/gpu/delegate.h
type GPUSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Ignored if inference_priority1/2/3 are set.
	IsPrecisionLossAllowed   *bool       `protobuf:"varint,1,opt,name=is_precision_loss_allowed,json=isPrecisionLossAllowed" json:"is_precision_loss_allowed,omitempty"`
	EnableQuantizedInference *bool       `protobuf:"varint,2,opt,name=enable_quantized_inference,json=enableQuantizedInference,def=1" json:"enable_quantized_inference,omitempty"`
	ForceBackend             *GPUBackend `protobuf:"varint,3,opt,name=force_backend,json=forceBackend,enum=tflite.proto.GPUBackend" json:"force_backend,omitempty"`
	// Ordered priorities provide better control over desired semantics,
	// where priority(n) is more important than priority(n+1). Therefore,
	// each time inference engine needs to make a decision, it uses
	// ordered priorities to do so.
	//
	// Default values correspond to GPU_PRIORITY_AUTO.
	// AUTO priority can only be used when higher priorities are fully specified.
	// For example:
	//
	//	VALID:   priority1 = MIN_LATENCY, priority2 = AUTO, priority3 = AUTO
	//	VALID:   priority1 = MIN_LATENCY, priority2 = MAX_PRECISION,
	//	         priority3 = AUTO
	//	INVALID: priority1 = AUTO, priority2 = MIN_LATENCY, priority3 = AUTO
	//	INVALID: priority1 = MIN_LATENCY, priority2 = AUTO,
	//	         priority3 = MAX_PRECISION
	//
	// Invalid priorities will result in error.
	//
	// For more information, see TfLiteGpuDelegateOptionsV2.
	InferencePriority1 *GPUInferencePriority `protobuf:"varint,4,opt,name=inference_priority1,json=inferencePriority1,enum=tflite.proto.GPUInferencePriority,def=0" json:"inference_priority1,omitempty"`
	InferencePriority2 *GPUInferencePriority `protobuf:"varint,5,opt,name=inference_priority2,json=inferencePriority2,enum=tflite.proto.GPUInferencePriority,def=0" json:"inference_priority2,omitempty"`
	InferencePriority3 *GPUInferencePriority `protobuf:"varint,6,opt,name=inference_priority3,json=inferencePriority3,enum=tflite.proto.GPUInferencePriority,def=0" json:"inference_priority3,omitempty"`
	// Whether to optimize for compilation+execution time or execution time only.
	InferencePreference *GPUInferenceUsage `protobuf:"varint,7,opt,name=inference_preference,json=inferencePreference,enum=tflite.proto.GPUInferenceUsage" json:"inference_preference,omitempty"`
	// Model serialization. Setting both of these fields will also set the
	// TFLITE_GPU_EXPERIMENTAL_FLAGS_ENABLE_SERIALIZATION flag on the delegate.
	//
	// GPU model serialization directory passed in TfLiteGpuDelegateOptionsV2.
	// This should be set to the application's code cache directory so that it can
	// not be accessed by other apps and is correctly deleted on app updates.
	// tflite::StatefulNnApiDelegate
	CacheDirectory *string `protobuf:"bytes,8,opt,name=cache_directory,json=cacheDirectory" json:"cache_directory,omitempty"`
	// Normally, the model name with version number should be provided here, since
	// each model needs an unique ID to avoid cache collision.
	ModelToken *string `protobuf:"bytes,9,opt,name=model_token,json=modelToken" json:"model_token,omitempty"`
}

// Default values for GPUSettings fields.
const (
	Default_GPUSettings_EnableQuantizedInference = bool(true)
	Default_GPUSettings_InferencePriority1       = GPUInferencePriority_GPU_PRIORITY_AUTO
	Default_GPUSettings_InferencePriority2       = GPUInferencePriority_GPU_PRIORITY_AUTO
	Default_GPUSettings_InferencePriority3       = GPUInferencePriority_GPU_PRIORITY_AUTO
)

func (x *GPUSettings) Reset() {
	*x = GPUSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GPUSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GPUSettings) ProtoMessage() {}

func (x *GPUSettings) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GPUSettings.ProtoReflect.Descriptor instead.
func (*GPUSettings) Descriptor() ([]byte, []int) {
	return file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_rawDescGZIP(), []int{2}
}

func (x *GPUSettings) GetIsPrecisionLossAllowed() bool {
	if x != nil && x.IsPrecisionLossAllowed != nil {
		return *x.IsPrecisionLossAllowed
	}
	return false
}

func (x *GPUSettings) GetEnableQuantizedInference() bool {
	if x != nil && x.EnableQuantizedInference != nil {
		return *x.EnableQuantizedInference
	}
	return Default_GPUSettings_EnableQuantizedInference
}

func (x *GPUSettings) GetForceBackend() GPUBackend {
	if x != nil && x.ForceBackend != nil {
		return *x.ForceBackend
	}
	return GPUBackend_UNSET
}

func (x *GPUSettings) GetInferencePriority1() GPUInferencePriority {
	if x != nil && x.InferencePriority1 != nil {
		return *x.InferencePriority1
	}
	return Default_GPUSettings_InferencePriority1
}

func (x *GPUSettings) GetInferencePriority2() GPUInferencePriority {
	if x != nil && x.InferencePriority2 != nil {
		return *x.InferencePriority2
	}
	return Default_GPUSettings_InferencePriority2
}

func (x *GPUSettings) GetInferencePriority3() GPUInferencePriority {
	if x != nil && x.InferencePriority3 != nil {
		return *x.InferencePriority3
	}
	return Default_GPUSettings_InferencePriority3
}

func (x *GPUSettings) GetInferencePreference() GPUInferenceUsage {
	if x != nil && x.InferencePreference != nil {
		return *x.InferencePreference
	}
	return GPUInferenceUsage_GPU_INFERENCE_PREFERENCE_FAST_SINGLE_ANSWER
}

func (x *GPUSettings) GetCacheDirectory() string {
	if x != nil && x.CacheDirectory != nil {
		return *x.CacheDirectory
	}
	return ""
}

func (x *GPUSettings) GetModelToken() string {
	if x != nil && x.ModelToken != nil {
		return *x.ModelToken
	}
	return ""
}

// Hexagon Delegate settings.
//
// See
// https://github.com/tensorflow/tensorflow/blob/master/tensorflow/lite/delegates/hexagon/hexagon_delegate.h
type HexagonSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DebugLevel        *int32 `protobuf:"varint,1,opt,name=debug_level,json=debugLevel" json:"debug_level,omitempty"`
	PowersaveLevel    *int32 `protobuf:"varint,2,opt,name=powersave_level,json=powersaveLevel" json:"powersave_level,omitempty"`
	PrintGraphProfile *bool  `protobuf:"varint,3,opt,name=print_graph_profile,json=printGraphProfile" json:"print_graph_profile,omitempty"`
	PrintGraphDebug   *bool  `protobuf:"varint,4,opt,name=print_graph_debug,json=printGraphDebug" json:"print_graph_debug,omitempty"`
}

func (x *HexagonSettings) Reset() {
	*x = HexagonSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HexagonSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HexagonSettings) ProtoMessage() {}

func (x *HexagonSettings) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HexagonSettings.ProtoReflect.Descriptor instead.
func (*HexagonSettings) Descriptor() ([]byte, []int) {
	return file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_rawDescGZIP(), []int{3}
}

func (x *HexagonSettings) GetDebugLevel() int32 {
	if x != nil && x.DebugLevel != nil {
		return *x.DebugLevel
	}
	return 0
}

func (x *HexagonSettings) GetPowersaveLevel() int32 {
	if x != nil && x.PowersaveLevel != nil {
		return *x.PowersaveLevel
	}
	return 0
}

func (x *HexagonSettings) GetPrintGraphProfile() bool {
	if x != nil && x.PrintGraphProfile != nil {
		return *x.PrintGraphProfile
	}
	return false
}

func (x *HexagonSettings) GetPrintGraphDebug() bool {
	if x != nil && x.PrintGraphDebug != nil {
		return *x.PrintGraphDebug
	}
	return false
}

type XNNPackSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumThreads *int32        `protobuf:"varint,1,opt,name=num_threads,json=numThreads" json:"num_threads,omitempty"`
	Flags      *XNNPackFlags `protobuf:"varint,2,opt,name=flags,enum=tflite.proto.XNNPackFlags,def=0" json:"flags,omitempty"`
}

// Default values for XNNPackSettings fields.
const (
	Default_XNNPackSettings_Flags = XNNPackFlags_TFLITE_XNNPACK_DELEGATE_NO_FLAGS
)

func (x *XNNPackSettings) Reset() {
	*x = XNNPackSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *XNNPackSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XNNPackSettings) ProtoMessage() {}

func (x *XNNPackSettings) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XNNPackSettings.ProtoReflect.Descriptor instead.
func (*XNNPackSettings) Descriptor() ([]byte, []int) {
	return file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_rawDescGZIP(), []int{4}
}

func (x *XNNPackSettings) GetNumThreads() int32 {
	if x != nil && x.NumThreads != nil {
		return *x.NumThreads
	}
	return 0
}

func (x *XNNPackSettings) GetFlags() XNNPackFlags {
	if x != nil && x.Flags != nil {
		return *x.Flags
	}
	return Default_XNNPackSettings_Flags
}

// CoreML Delegate settings.
//
// See
// https://github.com/tensorflow/tensorflow/blob/master/tensorflow/lite/delegates/coreml/coreml_delegate.h
type CoreMLSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Only create delegate when Neural Engine is available on the device.
	EnabledDevices *CoreMLSettings_EnabledDevices `protobuf:"varint,1,opt,name=enabled_devices,json=enabledDevices,enum=tflite.proto.CoreMLSettings_EnabledDevices" json:"enabled_devices,omitempty"`
	// Specifies target Core ML version for model conversion.
	// Core ML 3 come with a lot more ops, but some ops (e.g. reshape) is not
	// delegated due to input rank constraint.
	// if not set to one of the valid versions, the delegate will use highest
	// version possible in the platform.
	// Valid versions: (2, 3)
	CoremlVersion *int32 `protobuf:"varint,2,opt,name=coreml_version,json=coremlVersion" json:"coreml_version,omitempty"`
	// This sets the maximum number of Core ML delegates created.
	// Each graph corresponds to one delegated node subset in the
	// TFLite model. Set this to 0 to delegate all possible partitions.
	MaxDelegatedPartitions *int32 `protobuf:"varint,3,opt,name=max_delegated_partitions,json=maxDelegatedPartitions,def=0" json:"max_delegated_partitions,omitempty"`
	// This sets the minimum number of nodes per partition delegated with
	// Core ML delegate. Defaults to 2.
	MinNodesPerPartition *int32 `protobuf:"varint,4,opt,name=min_nodes_per_partition,json=minNodesPerPartition,def=2" json:"min_nodes_per_partition,omitempty"`
}

// Default values for CoreMLSettings fields.
const (
	Default_CoreMLSettings_MaxDelegatedPartitions = int32(0)
	Default_CoreMLSettings_MinNodesPerPartition   = int32(2)
)

func (x *CoreMLSettings) Reset() {
	*x = CoreMLSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoreMLSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoreMLSettings) ProtoMessage() {}

func (x *CoreMLSettings) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoreMLSettings.ProtoReflect.Descriptor instead.
func (*CoreMLSettings) Descriptor() ([]byte, []int) {
	return file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_rawDescGZIP(), []int{5}
}

func (x *CoreMLSettings) GetEnabledDevices() CoreMLSettings_EnabledDevices {
	if x != nil && x.EnabledDevices != nil {
		return *x.EnabledDevices
	}
	return CoreMLSettings_DEVICES_ALL
}

func (x *CoreMLSettings) GetCoremlVersion() int32 {
	if x != nil && x.CoremlVersion != nil {
		return *x.CoremlVersion
	}
	return 0
}

func (x *CoreMLSettings) GetMaxDelegatedPartitions() int32 {
	if x != nil && x.MaxDelegatedPartitions != nil {
		return *x.MaxDelegatedPartitions
	}
	return Default_CoreMLSettings_MaxDelegatedPartitions
}

func (x *CoreMLSettings) GetMinNodesPerPartition() int32 {
	if x != nil && x.MinNodesPerPartition != nil {
		return *x.MinNodesPerPartition
	}
	return Default_CoreMLSettings_MinNodesPerPartition
}

// Stable delegate loader settings.
//
// See
// tensorflow/lite/core/experimental/acceleration/configuration/c/stable_delegate.h
// An example stable delegate:
// tensorflow/lite/delegates/utils/experimental/sample_stable_delegate
type StableDelegateLoaderSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The path of the stable delegate shared object file. Then the stable
	// delegate provider can dynamically load the shared object file.
	DelegatePath *string `protobuf:"bytes,1,opt,name=delegate_path,json=delegatePath" json:"delegate_path,omitempty"`
}

func (x *StableDelegateLoaderSettings) Reset() {
	*x = StableDelegateLoaderSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StableDelegateLoaderSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StableDelegateLoaderSettings) ProtoMessage() {}

func (x *StableDelegateLoaderSettings) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StableDelegateLoaderSettings.ProtoReflect.Descriptor instead.
func (*StableDelegateLoaderSettings) Descriptor() ([]byte, []int) {
	return file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_rawDescGZIP(), []int{6}
}

func (x *StableDelegateLoaderSettings) GetDelegatePath() string {
	if x != nil && x.DelegatePath != nil {
		return *x.DelegatePath
	}
	return ""
}

// EdgeTPU device spec.
type EdgeTpuDeviceSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Execution platform for the EdgeTPU device.
	PlatformType *EdgeTpuDeviceSpec_PlatformType `protobuf:"varint,1,opt,name=platform_type,json=platformType,enum=tflite.proto.EdgeTpuDeviceSpec_PlatformType" json:"platform_type,omitempty"`
	// Number of chips to use for the EdgeTPU device.
	NumChips *int32 `protobuf:"varint,2,opt,name=num_chips,json=numChips" json:"num_chips,omitempty"`
	// Paths to the EdgeTPU devices;
	DevicePaths []string `protobuf:"bytes,3,rep,name=device_paths,json=devicePaths" json:"device_paths,omitempty"`
	// Chip family used by the EdgeTpu device.
	ChipFamily *int32 `protobuf:"varint,4,opt,name=chip_family,json=chipFamily" json:"chip_family,omitempty"`
}

func (x *EdgeTpuDeviceSpec) Reset() {
	*x = EdgeTpuDeviceSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EdgeTpuDeviceSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EdgeTpuDeviceSpec) ProtoMessage() {}

func (x *EdgeTpuDeviceSpec) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EdgeTpuDeviceSpec.ProtoReflect.Descriptor instead.
func (*EdgeTpuDeviceSpec) Descriptor() ([]byte, []int) {
	return file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_rawDescGZIP(), []int{7}
}

func (x *EdgeTpuDeviceSpec) GetPlatformType() EdgeTpuDeviceSpec_PlatformType {
	if x != nil && x.PlatformType != nil {
		return *x.PlatformType
	}
	return EdgeTpuDeviceSpec_MMIO
}

func (x *EdgeTpuDeviceSpec) GetNumChips() int32 {
	if x != nil && x.NumChips != nil {
		return *x.NumChips
	}
	return 0
}

func (x *EdgeTpuDeviceSpec) GetDevicePaths() []string {
	if x != nil {
		return x.DevicePaths
	}
	return nil
}

func (x *EdgeTpuDeviceSpec) GetChipFamily() int32 {
	if x != nil && x.ChipFamily != nil {
		return *x.ChipFamily
	}
	return 0
}

type EdgeTpuInactivePowerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Inactive power states between inferences.
	InactivePowerState *EdgeTpuPowerState `protobuf:"varint,1,opt,name=inactive_power_state,json=inactivePowerState,enum=tflite.proto.EdgeTpuPowerState" json:"inactive_power_state,omitempty"`
	// Inactive timeout in microseconds between inferences.
	InactiveTimeoutUs *int64 `protobuf:"varint,2,opt,name=inactive_timeout_us,json=inactiveTimeoutUs" json:"inactive_timeout_us,omitempty"`
}

func (x *EdgeTpuInactivePowerConfig) Reset() {
	*x = EdgeTpuInactivePowerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EdgeTpuInactivePowerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EdgeTpuInactivePowerConfig) ProtoMessage() {}

func (x *EdgeTpuInactivePowerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EdgeTpuInactivePowerConfig.ProtoReflect.Descriptor instead.
func (*EdgeTpuInactivePowerConfig) Descriptor() ([]byte, []int) {
	return file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_rawDescGZIP(), []int{8}
}

func (x *EdgeTpuInactivePowerConfig) GetInactivePowerState() EdgeTpuPowerState {
	if x != nil && x.InactivePowerState != nil {
		return *x.InactivePowerState
	}
	return EdgeTpuPowerState_UNDEFINED_POWERSTATE
}

func (x *EdgeTpuInactivePowerConfig) GetInactiveTimeoutUs() int64 {
	if x != nil && x.InactiveTimeoutUs != nil {
		return *x.InactiveTimeoutUs
	}
	return 0
}

// EdgeTPU Delegate settings.
type EdgeTpuSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Target inference power state for running the model.
	InferencePowerState *EdgeTpuPowerState `protobuf:"varint,1,opt,name=inference_power_state,json=inferencePowerState,enum=tflite.proto.EdgeTpuPowerState" json:"inference_power_state,omitempty"`
	// Inactive power states between inferences.
	InactivePowerConfigs []*EdgeTpuInactivePowerConfig `protobuf:"bytes,2,rep,name=inactive_power_configs,json=inactivePowerConfigs" json:"inactive_power_configs,omitempty"`
	// Priority for the inference request.
	InferencePriority *int32 `protobuf:"varint,3,opt,name=inference_priority,json=inferencePriority,def=-1" json:"inference_priority,omitempty"`
	// Device spec for creating the EdgeTpu device.
	EdgetpuDeviceSpec *EdgeTpuDeviceSpec `protobuf:"bytes,4,opt,name=edgetpu_device_spec,json=edgetpuDeviceSpec" json:"edgetpu_device_spec,omitempty"`
	// A unique identifier of the input TfLite model.
	ModelToken *string `protobuf:"bytes,5,opt,name=model_token,json=modelToken" json:"model_token,omitempty"`
	// Float truncation type for EdgeTPU.
	FloatTruncationType *EdgeTpuSettings_FloatTruncationType `protobuf:"varint,6,opt,name=float_truncation_type,json=floatTruncationType,enum=tflite.proto.EdgeTpuSettings_FloatTruncationType" json:"float_truncation_type,omitempty"`
	// QoS class to determine chunking size for PRO onward.
	QosClass *EdgeTpuSettings_QosClass `protobuf:"varint,7,opt,name=qos_class,json=qosClass,enum=tflite.proto.EdgeTpuSettings_QosClass,def=0" json:"qos_class,omitempty"`
}

// Default values for EdgeTpuSettings fields.
const (
	Default_EdgeTpuSettings_InferencePriority = int32(-1)
	Default_EdgeTpuSettings_QosClass          = EdgeTpuSettings_QOS_UNDEFINED
)

func (x *EdgeTpuSettings) Reset() {
	*x = EdgeTpuSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EdgeTpuSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EdgeTpuSettings) ProtoMessage() {}

func (x *EdgeTpuSettings) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EdgeTpuSettings.ProtoReflect.Descriptor instead.
func (*EdgeTpuSettings) Descriptor() ([]byte, []int) {
	return file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_rawDescGZIP(), []int{9}
}

func (x *EdgeTpuSettings) GetInferencePowerState() EdgeTpuPowerState {
	if x != nil && x.InferencePowerState != nil {
		return *x.InferencePowerState
	}
	return EdgeTpuPowerState_UNDEFINED_POWERSTATE
}

func (x *EdgeTpuSettings) GetInactivePowerConfigs() []*EdgeTpuInactivePowerConfig {
	if x != nil {
		return x.InactivePowerConfigs
	}
	return nil
}

func (x *EdgeTpuSettings) GetInferencePriority() int32 {
	if x != nil && x.InferencePriority != nil {
		return *x.InferencePriority
	}
	return Default_EdgeTpuSettings_InferencePriority
}

func (x *EdgeTpuSettings) GetEdgetpuDeviceSpec() *EdgeTpuDeviceSpec {
	if x != nil {
		return x.EdgetpuDeviceSpec
	}
	return nil
}

func (x *EdgeTpuSettings) GetModelToken() string {
	if x != nil && x.ModelToken != nil {
		return *x.ModelToken
	}
	return ""
}

func (x *EdgeTpuSettings) GetFloatTruncationType() EdgeTpuSettings_FloatTruncationType {
	if x != nil && x.FloatTruncationType != nil {
		return *x.FloatTruncationType
	}
	return EdgeTpuSettings_UNSPECIFIED
}

func (x *EdgeTpuSettings) GetQosClass() EdgeTpuSettings_QosClass {
	if x != nil && x.QosClass != nil {
		return *x.QosClass
	}
	return Default_EdgeTpuSettings_QosClass
}

// Coral Dev Board / USB accelerator delegate settings.
//
// See
// https://github.com/google-coral/edgetpu/blob/master/libedgetpu/edgetpu_c.h
type CoralSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Edge Tpu device to be used. See
	// https://github.com/google-coral/libcoral/blob/982426546dfa10128376d0c24fd8a8b161daac97/coral/tflite_utils.h#L131-L137
	Device *string `protobuf:"bytes,1,opt,name=device" json:"device,omitempty"`
	// The desired performance level. This setting adjusts the internal clock
	// rate to achieve different performance / power balance. Higher performance
	// values improve speed, but increase power usage.
	Performance *CoralSettings_Performance `protobuf:"varint,2,opt,name=performance,enum=tflite.proto.CoralSettings_Performance,def=1" json:"performance,omitempty"`
	// If true, always perform device firmware update (DFU) after reset. DFU is
	// usually only necessary after power cycle.
	UsbAlwaysDfu *bool `protobuf:"varint,3,opt,name=usb_always_dfu,json=usbAlwaysDfu" json:"usb_always_dfu,omitempty"`
	// The maximum bulk in queue length. Larger queue length may improve USB
	// performance on the direction from device to host. When not specified (or
	// zero), `usb_max_bulk_in_queue_length` will default to 32 according to the
	// current EdgeTpu Coral implementation.
	UsbMaxBulkInQueueLength *int32 `protobuf:"varint,4,opt,name=usb_max_bulk_in_queue_length,json=usbMaxBulkInQueueLength" json:"usb_max_bulk_in_queue_length,omitempty"`
}

// Default values for CoralSettings fields.
const (
	Default_CoralSettings_Performance = CoralSettings_MAXIMUM
)

func (x *CoralSettings) Reset() {
	*x = CoralSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoralSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoralSettings) ProtoMessage() {}

func (x *CoralSettings) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoralSettings.ProtoReflect.Descriptor instead.
func (*CoralSettings) Descriptor() ([]byte, []int) {
	return file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_rawDescGZIP(), []int{10}
}

func (x *CoralSettings) GetDevice() string {
	if x != nil && x.Device != nil {
		return *x.Device
	}
	return ""
}

func (x *CoralSettings) GetPerformance() CoralSettings_Performance {
	if x != nil && x.Performance != nil {
		return *x.Performance
	}
	return Default_CoralSettings_Performance
}

func (x *CoralSettings) GetUsbAlwaysDfu() bool {
	if x != nil && x.UsbAlwaysDfu != nil {
		return *x.UsbAlwaysDfu
	}
	return false
}

func (x *CoralSettings) GetUsbMaxBulkInQueueLength() int32 {
	if x != nil && x.UsbMaxBulkInQueueLength != nil {
		return *x.UsbMaxBulkInQueueLength
	}
	return 0
}

type CPUSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Set to -1 to let the interpreter choose. Otherwise, must be > 0.
	NumThreads *int32 `protobuf:"varint,1,opt,name=num_threads,json=numThreads,def=-1" json:"num_threads,omitempty"`
}

// Default values for CPUSettings fields.
const (
	Default_CPUSettings_NumThreads = int32(-1)
)

func (x *CPUSettings) Reset() {
	*x = CPUSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CPUSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CPUSettings) ProtoMessage() {}

func (x *CPUSettings) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CPUSettings.ProtoReflect.Descriptor instead.
func (*CPUSettings) Descriptor() ([]byte, []int) {
	return file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_rawDescGZIP(), []int{11}
}

func (x *CPUSettings) GetNumThreads() int32 {
	if x != nil && x.NumThreads != nil {
		return *x.NumThreads
	}
	return Default_CPUSettings_NumThreads
}

// How to configure TFLite.
type TFLiteSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Which delegate to use.
	Delegate *Delegate `protobuf:"varint,1,opt,name=delegate,enum=tflite.proto.Delegate" json:"delegate,omitempty"`
	// How to configure the chosen delegate.
	// (In principle we would like to use 'oneof', but flatc turns that into an
	// nested anonymous table rather than a union. See
	// https://github.com/google/flatbuffers/issues/4628).
	NnapiSettings   *NNAPISettings   `protobuf:"bytes,2,opt,name=nnapi_settings,json=nnapiSettings" json:"nnapi_settings,omitempty"`
	GpuSettings     *GPUSettings     `protobuf:"bytes,3,opt,name=gpu_settings,json=gpuSettings" json:"gpu_settings,omitempty"`
	HexagonSettings *HexagonSettings `protobuf:"bytes,4,opt,name=hexagon_settings,json=hexagonSettings" json:"hexagon_settings,omitempty"`
	XnnpackSettings *XNNPackSettings `protobuf:"bytes,5,opt,name=xnnpack_settings,json=xnnpackSettings" json:"xnnpack_settings,omitempty"`
	CoremlSettings  *CoreMLSettings  `protobuf:"bytes,11,opt,name=coreml_settings,json=coremlSettings" json:"coreml_settings,omitempty"`
	// How to configure CPU execution.
	CpuSettings *CPUSettings `protobuf:"bytes,6,opt,name=cpu_settings,json=cpuSettings" json:"cpu_settings,omitempty"`
	// Shared delegation settings.
	MaxDelegatedPartitions *int32 `protobuf:"varint,7,opt,name=max_delegated_partitions,json=maxDelegatedPartitions" json:"max_delegated_partitions,omitempty"`
	// For configuring the EdgeTpuDelegate.
	EdgetpuSettings *EdgeTpuSettings `protobuf:"bytes,8,opt,name=edgetpu_settings,json=edgetpuSettings" json:"edgetpu_settings,omitempty"`
	// For configuring the Coral EdgeTpu Delegate.
	CoralSettings *CoralSettings `protobuf:"bytes,10,opt,name=coral_settings,json=coralSettings" json:"coral_settings,omitempty"`
	// Whether to automatically fall back to TFLite CPU path.
	FallbackSettings *FallbackSettings `protobuf:"bytes,9,opt,name=fallback_settings,json=fallbackSettings" json:"fallback_settings,omitempty"`
	// Whether to disable default delegates (XNNPack).
	// TODO(b/260405596): Update the comment to clarify the interaction between
	// `disable_default_delegates` and `fallback_settings`.
	DisableDefaultDelegates *bool `protobuf:"varint,12,opt,name=disable_default_delegates,json=disableDefaultDelegates" json:"disable_default_delegates,omitempty"`
	// For loading a stable delegate. If an app supplies a delegate shared library
	// (e.g. packaged with the app, or downloaded separately), the app can use
	// this field for passing the path to the delegate shared library.
	//
	// The stable delegate loader settings field works together with the settings
	// of other concrete stable delegates; the stable delegate loader is not a
	// concrete delegate type but a mechanism for initializing the TF Lite stable
	// delegates.
	//
	// See
	// tensorflow/lite/delegates/utils/experimental/sample_stable_delegate
	StableDelegateLoaderSettings *StableDelegateLoaderSettings `protobuf:"bytes,13,opt,name=stable_delegate_loader_settings,json=stableDelegateLoaderSettings" json:"stable_delegate_loader_settings,omitempty"`
}

func (x *TFLiteSettings) Reset() {
	*x = TFLiteSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TFLiteSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TFLiteSettings) ProtoMessage() {}

func (x *TFLiteSettings) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TFLiteSettings.ProtoReflect.Descriptor instead.
func (*TFLiteSettings) Descriptor() ([]byte, []int) {
	return file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_rawDescGZIP(), []int{12}
}

func (x *TFLiteSettings) GetDelegate() Delegate {
	if x != nil && x.Delegate != nil {
		return *x.Delegate
	}
	return Delegate_NONE
}

func (x *TFLiteSettings) GetNnapiSettings() *NNAPISettings {
	if x != nil {
		return x.NnapiSettings
	}
	return nil
}

func (x *TFLiteSettings) GetGpuSettings() *GPUSettings {
	if x != nil {
		return x.GpuSettings
	}
	return nil
}

func (x *TFLiteSettings) GetHexagonSettings() *HexagonSettings {
	if x != nil {
		return x.HexagonSettings
	}
	return nil
}

func (x *TFLiteSettings) GetXnnpackSettings() *XNNPackSettings {
	if x != nil {
		return x.XnnpackSettings
	}
	return nil
}

func (x *TFLiteSettings) GetCoremlSettings() *CoreMLSettings {
	if x != nil {
		return x.CoremlSettings
	}
	return nil
}

func (x *TFLiteSettings) GetCpuSettings() *CPUSettings {
	if x != nil {
		return x.CpuSettings
	}
	return nil
}

func (x *TFLiteSettings) GetMaxDelegatedPartitions() int32 {
	if x != nil && x.MaxDelegatedPartitions != nil {
		return *x.MaxDelegatedPartitions
	}
	return 0
}

func (x *TFLiteSettings) GetEdgetpuSettings() *EdgeTpuSettings {
	if x != nil {
		return x.EdgetpuSettings
	}
	return nil
}

func (x *TFLiteSettings) GetCoralSettings() *CoralSettings {
	if x != nil {
		return x.CoralSettings
	}
	return nil
}

func (x *TFLiteSettings) GetFallbackSettings() *FallbackSettings {
	if x != nil {
		return x.FallbackSettings
	}
	return nil
}

func (x *TFLiteSettings) GetDisableDefaultDelegates() bool {
	if x != nil && x.DisableDefaultDelegates != nil {
		return *x.DisableDefaultDelegates
	}
	return false
}

func (x *TFLiteSettings) GetStableDelegateLoaderSettings() *StableDelegateLoaderSettings {
	if x != nil {
		return x.StableDelegateLoaderSettings
	}
	return nil
}

// Whether to automatically fallback to TFLite CPU path on delegation errors.
//
// Typically fallback is enabled in production use but disabled in tests and
// benchmarks to ensure they test the intended path.
type FallbackSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether to allow automatically falling back to TfLite CPU path on
	// compilation failure. Default is not allowing automatic fallback.
	//
	// This is useful in naive production usecases where the caller would prefer
	// for the model to run even if it's not accelerated. More advanced users will
	// implement fallback themselves; e.g., by using a different model on CPU.
	//
	// Note that compilation errors may occur either at initial
	// ModifyGraphWithDelegate() time, or when calling AllocateTensors() after
	// resizing.
	AllowAutomaticFallbackOnCompilationError *bool `protobuf:"varint,7,opt,name=allow_automatic_fallback_on_compilation_error,json=allowAutomaticFallbackOnCompilationError" json:"allow_automatic_fallback_on_compilation_error,omitempty"`
	// Whether to allow automatically falling back to TfLite CPU path on
	// execution error. Default is not allowing automatic fallback.
	//
	// Experimental, use with care (only when you have complete control over the
	// client code).
	//
	// The caveat above for compilation error holds.  Additionally, execution-time
	// errors are harder to handle automatically as they require invalidating the
	// TfLite interpreter which most client code has not been designed to deal
	// with.
	AllowAutomaticFallbackOnExecutionError *bool `protobuf:"varint,8,opt,name=allow_automatic_fallback_on_execution_error,json=allowAutomaticFallbackOnExecutionError" json:"allow_automatic_fallback_on_execution_error,omitempty"`
}

func (x *FallbackSettings) Reset() {
	*x = FallbackSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FallbackSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FallbackSettings) ProtoMessage() {}

func (x *FallbackSettings) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FallbackSettings.ProtoReflect.Descriptor instead.
func (*FallbackSettings) Descriptor() ([]byte, []int) {
	return file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_rawDescGZIP(), []int{13}
}

func (x *FallbackSettings) GetAllowAutomaticFallbackOnCompilationError() bool {
	if x != nil && x.AllowAutomaticFallbackOnCompilationError != nil {
		return *x.AllowAutomaticFallbackOnCompilationError
	}
	return false
}

func (x *FallbackSettings) GetAllowAutomaticFallbackOnExecutionError() bool {
	if x != nil && x.AllowAutomaticFallbackOnExecutionError != nil {
		return *x.AllowAutomaticFallbackOnExecutionError
	}
	return false
}

// A correctness metric from a benchmark, for example KL-divergence between
// known-good CPU output and on-device output. These are primarily used for
// telemetry and monitored server-side.
type BenchmarkMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   *string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Values []float32 `protobuf:"fixed32,2,rep,packed,name=values" json:"values,omitempty"`
}

func (x *BenchmarkMetric) Reset() {
	*x = BenchmarkMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BenchmarkMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BenchmarkMetric) ProtoMessage() {}

func (x *BenchmarkMetric) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BenchmarkMetric.ProtoReflect.Descriptor instead.
func (*BenchmarkMetric) Descriptor() ([]byte, []int) {
	return file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_rawDescGZIP(), []int{14}
}

func (x *BenchmarkMetric) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *BenchmarkMetric) GetValues() []float32 {
	if x != nil {
		return x.Values
	}
	return nil
}

// Outcome of a successfully complete benchmark run. This information is
// intended to both be used on-device to select best compute configuration as
// well as sent to server for monitoring.
//
// Used with event type END.
// Next ID: 7
type BenchmarkResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time to load model and apply acceleration. Initialization may get run
	// multiple times to get information on variance.
	InitializationTimeUs []int64 `protobuf:"varint,1,rep,packed,name=initialization_time_us,json=initializationTimeUs" json:"initialization_time_us,omitempty"`
	// Time to run inference (call Invoke()). Inference may get run multiple times
	// to get information on variance.
	InferenceTimeUs []int64 `protobuf:"varint,2,rep,packed,name=inference_time_us,json=inferenceTimeUs" json:"inference_time_us,omitempty"`
	// Maximum memory used. Measures size of application heap (does not
	// necessarily take into account driver-side allocation.
	MaxMemoryKb *int32 `protobuf:"varint,3,opt,name=max_memory_kb,json=maxMemoryKb" json:"max_memory_kb,omitempty"`
	// Whether the inference produced correct results (validation graph output
	// 'ok' for all test inputs). Used on-device to disallow configurations that
	// produce incorrect results (e.g., due to OpenCL driver bugs).
	Ok *bool `protobuf:"varint,4,opt,name=ok" json:"ok,omitempty"`
	// Metrics that were used to determine the 'ok' status.
	Metrics []*BenchmarkMetric `protobuf:"bytes,5,rep,name=metrics" json:"metrics,omitempty"`
	// Model output in byte format. Each InferenceOutput comes from one output
	// tensor. It is ordered the same as tflite::Interpreter::output_tensor(),
	// i.e. the value of output_tensor(i) is stored in actual_output[i]. Only
	// populated in custom validation case.
	ActualOutput []*BenchmarkResult_InferenceOutput `protobuf:"bytes,6,rep,name=actual_output,json=actualOutput" json:"actual_output,omitempty"`
}

func (x *BenchmarkResult) Reset() {
	*x = BenchmarkResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BenchmarkResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BenchmarkResult) ProtoMessage() {}

func (x *BenchmarkResult) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BenchmarkResult.ProtoReflect.Descriptor instead.
func (*BenchmarkResult) Descriptor() ([]byte, []int) {
	return file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_rawDescGZIP(), []int{15}
}

func (x *BenchmarkResult) GetInitializationTimeUs() []int64 {
	if x != nil {
		return x.InitializationTimeUs
	}
	return nil
}

func (x *BenchmarkResult) GetInferenceTimeUs() []int64 {
	if x != nil {
		return x.InferenceTimeUs
	}
	return nil
}

func (x *BenchmarkResult) GetMaxMemoryKb() int32 {
	if x != nil && x.MaxMemoryKb != nil {
		return *x.MaxMemoryKb
	}
	return 0
}

func (x *BenchmarkResult) GetOk() bool {
	if x != nil && x.Ok != nil {
		return *x.Ok
	}
	return false
}

func (x *BenchmarkResult) GetMetrics() []*BenchmarkMetric {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *BenchmarkResult) GetActualOutput() []*BenchmarkResult_InferenceOutput {
	if x != nil {
		return x.ActualOutput
	}
	return nil
}

// A handled error.
type ErrorCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Which delegate the error comes from (or NONE, if it comes from the tflite
	// framework).
	Source *Delegate `protobuf:"varint,1,opt,name=source,enum=tflite.proto.Delegate" json:"source,omitempty"`
	// What the tflite level error is.
	TfliteError *int32 `protobuf:"varint,2,opt,name=tflite_error,json=tfliteError" json:"tflite_error,omitempty"`
	// What the underlying error is (e.g., NNAPI or OpenGL error).
	UnderlyingApiError *int64 `protobuf:"varint,3,opt,name=underlying_api_error,json=underlyingApiError" json:"underlying_api_error,omitempty"`
}

func (x *ErrorCode) Reset() {
	*x = ErrorCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorCode) ProtoMessage() {}

func (x *ErrorCode) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorCode.ProtoReflect.Descriptor instead.
func (*ErrorCode) Descriptor() ([]byte, []int) {
	return file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_rawDescGZIP(), []int{16}
}

func (x *ErrorCode) GetSource() Delegate {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return Delegate_NONE
}

func (x *ErrorCode) GetTfliteError() int32 {
	if x != nil && x.TfliteError != nil {
		return *x.TfliteError
	}
	return 0
}

func (x *ErrorCode) GetUnderlyingApiError() int64 {
	if x != nil && x.UnderlyingApiError != nil {
		return *x.UnderlyingApiError
	}
	return 0
}

// An error that occurred during benchmarking.
//
// Used with event type ERROR.
type BenchmarkError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// How far benchmarking got.
	Stage *BenchmarkStage `protobuf:"varint,1,opt,name=stage,enum=tflite.proto.BenchmarkStage" json:"stage,omitempty"`
	// Process exit code.
	ExitCode *int32 `protobuf:"varint,2,opt,name=exit_code,json=exitCode" json:"exit_code,omitempty"`
	// Signal the process received.
	Signal *int32 `protobuf:"varint,3,opt,name=signal" json:"signal,omitempty"`
	// Handled tflite error.
	ErrorCode []*ErrorCode `protobuf:"bytes,4,rep,name=error_code,json=errorCode" json:"error_code,omitempty"`
	// Mini-benchmark error code.
	MiniBenchmarkErrorCode *int32 `protobuf:"varint,5,opt,name=mini_benchmark_error_code,json=miniBenchmarkErrorCode" json:"mini_benchmark_error_code,omitempty"`
}

func (x *BenchmarkError) Reset() {
	*x = BenchmarkError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BenchmarkError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BenchmarkError) ProtoMessage() {}

func (x *BenchmarkError) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BenchmarkError.ProtoReflect.Descriptor instead.
func (*BenchmarkError) Descriptor() ([]byte, []int) {
	return file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_rawDescGZIP(), []int{17}
}

func (x *BenchmarkError) GetStage() BenchmarkStage {
	if x != nil && x.Stage != nil {
		return *x.Stage
	}
	return BenchmarkStage_UNKNOWN
}

func (x *BenchmarkError) GetExitCode() int32 {
	if x != nil && x.ExitCode != nil {
		return *x.ExitCode
	}
	return 0
}

func (x *BenchmarkError) GetSignal() int32 {
	if x != nil && x.Signal != nil {
		return *x.Signal
	}
	return 0
}

func (x *BenchmarkError) GetErrorCode() []*ErrorCode {
	if x != nil {
		return x.ErrorCode
	}
	return nil
}

func (x *BenchmarkError) GetMiniBenchmarkErrorCode() int32 {
	if x != nil && x.MiniBenchmarkErrorCode != nil {
		return *x.MiniBenchmarkErrorCode
	}
	return 0
}

// Top-level benchmarking event stored on-device. All events for a model are
// parsed to detect the status.
type BenchmarkEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Which settings were used for benchmarking.
	TfliteSettings *TFLiteSettings `protobuf:"bytes,1,opt,name=tflite_settings,json=tfliteSettings" json:"tflite_settings,omitempty"`
	// Type of the event.
	EventType *BenchmarkEventType `protobuf:"varint,2,opt,name=event_type,json=eventType,enum=tflite.proto.BenchmarkEventType" json:"event_type,omitempty"`
	// Result of benchmark, used when type is END.
	Result *BenchmarkResult `protobuf:"bytes,3,opt,name=result" json:"result,omitempty"`
	// Error during benchmark, used when type is ERROR.
	Error *BenchmarkError `protobuf:"bytes,4,opt,name=error" json:"error,omitempty"`
	// Start timestamps. These are used for
	// 1. Checking whether a test was started but not completed within a given
	// deadline.
	// 2. Optionally, telemetry timestamps.
	BoottimeUs  *int64 `protobuf:"varint,5,opt,name=boottime_us,json=boottimeUs" json:"boottime_us,omitempty"`
	WallclockUs *int64 `protobuf:"varint,6,opt,name=wallclock_us,json=wallclockUs" json:"wallclock_us,omitempty"`
}

func (x *BenchmarkEvent) Reset() {
	*x = BenchmarkEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BenchmarkEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BenchmarkEvent) ProtoMessage() {}

func (x *BenchmarkEvent) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BenchmarkEvent.ProtoReflect.Descriptor instead.
func (*BenchmarkEvent) Descriptor() ([]byte, []int) {
	return file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_rawDescGZIP(), []int{18}
}

func (x *BenchmarkEvent) GetTfliteSettings() *TFLiteSettings {
	if x != nil {
		return x.TfliteSettings
	}
	return nil
}

func (x *BenchmarkEvent) GetEventType() BenchmarkEventType {
	if x != nil && x.EventType != nil {
		return *x.EventType
	}
	return BenchmarkEventType_UNDEFINED_BENCHMARK_EVENT_TYPE
}

func (x *BenchmarkEvent) GetResult() *BenchmarkResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *BenchmarkEvent) GetError() *BenchmarkError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *BenchmarkEvent) GetBoottimeUs() int64 {
	if x != nil && x.BoottimeUs != nil {
		return *x.BoottimeUs
	}
	return 0
}

func (x *BenchmarkEvent) GetWallclockUs() int64 {
	if x != nil && x.WallclockUs != nil {
		return *x.WallclockUs
	}
	return 0
}

// Represent the decision on the best acceleration from the mini-benchmark.
type BestAccelerationDecision struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of events used to take the decision.
	// Using just the size instaed of the full list of events to save space.
	NumberOfSourceEvents *int32 `protobuf:"varint,1,opt,name=number_of_source_events,json=numberOfSourceEvents" json:"number_of_source_events,omitempty"`
	// Event with min latency in the source ones.
	MinLatencyEvent *BenchmarkEvent `protobuf:"bytes,2,opt,name=min_latency_event,json=minLatencyEvent" json:"min_latency_event,omitempty"`
	// Min latency as read from min_latency_event.
	MinInferenceTimeUs *int64 `protobuf:"varint,3,opt,name=min_inference_time_us,json=minInferenceTimeUs" json:"min_inference_time_us,omitempty"`
}

func (x *BestAccelerationDecision) Reset() {
	*x = BestAccelerationDecision{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BestAccelerationDecision) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BestAccelerationDecision) ProtoMessage() {}

func (x *BestAccelerationDecision) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BestAccelerationDecision.ProtoReflect.Descriptor instead.
func (*BestAccelerationDecision) Descriptor() ([]byte, []int) {
	return file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_rawDescGZIP(), []int{19}
}

func (x *BestAccelerationDecision) GetNumberOfSourceEvents() int32 {
	if x != nil && x.NumberOfSourceEvents != nil {
		return *x.NumberOfSourceEvents
	}
	return 0
}

func (x *BestAccelerationDecision) GetMinLatencyEvent() *BenchmarkEvent {
	if x != nil {
		return x.MinLatencyEvent
	}
	return nil
}

func (x *BestAccelerationDecision) GetMinInferenceTimeUs() int64 {
	if x != nil && x.MinInferenceTimeUs != nil {
		return *x.MinInferenceTimeUs
	}
	return 0
}

// Represent a failure during the initialization of the mini-benchmark.
type BenchmarkInitializationFailure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status code returned by the mini-benchmark initialization function.
	InitializationStatus *int32 `protobuf:"varint,1,opt,name=initialization_status,json=initializationStatus" json:"initialization_status,omitempty"`
}

func (x *BenchmarkInitializationFailure) Reset() {
	*x = BenchmarkInitializationFailure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BenchmarkInitializationFailure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BenchmarkInitializationFailure) ProtoMessage() {}

func (x *BenchmarkInitializationFailure) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BenchmarkInitializationFailure.ProtoReflect.Descriptor instead.
func (*BenchmarkInitializationFailure) Descriptor() ([]byte, []int) {
	return file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_rawDescGZIP(), []int{20}
}

func (x *BenchmarkInitializationFailure) GetInitializationStatus() int32 {
	if x != nil && x.InitializationStatus != nil {
		return *x.InitializationStatus
	}
	return 0
}

// Events generated by the mini-benchmark before and after triggering
// the different configuration-specific benchmarks
type MiniBenchmarkEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If set to true, this event is used to mark all previous events in the
	// mini-benchmark internal storage as read and one of the other fields
	// in this message will have a value.
	IsLogFlushingEvent *bool `protobuf:"varint,1,opt,name=is_log_flushing_event,json=isLogFlushingEvent" json:"is_log_flushing_event,omitempty"`
	// Event generated when a best acceleration decision is taken.
	BestAccelerationDecision *BestAccelerationDecision `protobuf:"bytes,2,opt,name=best_acceleration_decision,json=bestAccelerationDecision" json:"best_acceleration_decision,omitempty"`
	// Reports a failure during mini-benchmark initialization.
	InitializationFailure *BenchmarkInitializationFailure `protobuf:"bytes,3,opt,name=initialization_failure,json=initializationFailure" json:"initialization_failure,omitempty"`
	// Event generated while benchmarking the different settings to test locally.
	BenchmarkEvent *BenchmarkEvent `protobuf:"bytes,4,opt,name=benchmark_event,json=benchmarkEvent" json:"benchmark_event,omitempty"`
}

func (x *MiniBenchmarkEvent) Reset() {
	*x = MiniBenchmarkEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiniBenchmarkEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiniBenchmarkEvent) ProtoMessage() {}

func (x *MiniBenchmarkEvent) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiniBenchmarkEvent.ProtoReflect.Descriptor instead.
func (*MiniBenchmarkEvent) Descriptor() ([]byte, []int) {
	return file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_rawDescGZIP(), []int{21}
}

func (x *MiniBenchmarkEvent) GetIsLogFlushingEvent() bool {
	if x != nil && x.IsLogFlushingEvent != nil {
		return *x.IsLogFlushingEvent
	}
	return false
}

func (x *MiniBenchmarkEvent) GetBestAccelerationDecision() *BestAccelerationDecision {
	if x != nil {
		return x.BestAccelerationDecision
	}
	return nil
}

func (x *MiniBenchmarkEvent) GetInitializationFailure() *BenchmarkInitializationFailure {
	if x != nil {
		return x.InitializationFailure
	}
	return nil
}

func (x *MiniBenchmarkEvent) GetBenchmarkEvent() *BenchmarkEvent {
	if x != nil {
		return x.BenchmarkEvent
	}
	return nil
}

// How to access the model for mini-benchmark.
// Since mini-benchmark runs in a separate process, it can not access an
// in-memory model. It can read the model either from a file or from a file
// descriptor. The file descriptor typically comes from the Android asset
// manager.
//
// Users should set either filename, or all of fd, offset and length.
type ModelFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Filename for reading model from.
	Filename *string `protobuf:"bytes,1,opt,name=filename" json:"filename,omitempty"`
	// File descriptor to read model from.
	Fd *int64 `protobuf:"varint,2,opt,name=fd" json:"fd,omitempty"`
	// Offset for model in file descriptor.
	Offset *int64 `protobuf:"varint,3,opt,name=offset" json:"offset,omitempty"`
	// Length of model in file descriptor.
	Length       *int64        `protobuf:"varint,4,opt,name=length" json:"length,omitempty"`
	ModelIdGroup *ModelIdGroup `protobuf:"bytes,5,opt,name=model_id_group,json=modelIdGroup" json:"model_id_group,omitempty"`
}

func (x *ModelFile) Reset() {
	*x = ModelFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelFile) ProtoMessage() {}

func (x *ModelFile) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelFile.ProtoReflect.Descriptor instead.
func (*ModelFile) Descriptor() ([]byte, []int) {
	return file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_rawDescGZIP(), []int{22}
}

func (x *ModelFile) GetFilename() string {
	if x != nil && x.Filename != nil {
		return *x.Filename
	}
	return ""
}

func (x *ModelFile) GetFd() int64 {
	if x != nil && x.Fd != nil {
		return *x.Fd
	}
	return 0
}

func (x *ModelFile) GetOffset() int64 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *ModelFile) GetLength() int64 {
	if x != nil && x.Length != nil {
		return *x.Length
	}
	return 0
}

func (x *ModelFile) GetModelIdGroup() *ModelIdGroup {
	if x != nil {
		return x.ModelIdGroup
	}
	return nil
}

type ModelIdGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelNamespace *string `protobuf:"bytes,1,opt,name=model_namespace,json=modelNamespace" json:"model_namespace,omitempty"`
	ModelId        *string `protobuf:"bytes,2,opt,name=model_id,json=modelId" json:"model_id,omitempty"`
}

func (x *ModelIdGroup) Reset() {
	*x = ModelIdGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelIdGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelIdGroup) ProtoMessage() {}

func (x *ModelIdGroup) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelIdGroup.ProtoReflect.Descriptor instead.
func (*ModelIdGroup) Descriptor() ([]byte, []int) {
	return file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_rawDescGZIP(), []int{23}
}

func (x *ModelIdGroup) GetModelNamespace() string {
	if x != nil && x.ModelNamespace != nil {
		return *x.ModelNamespace
	}
	return ""
}

func (x *ModelIdGroup) GetModelId() string {
	if x != nil && x.ModelId != nil {
		return *x.ModelId
	}
	return ""
}

// Where to store mini-benchmark state.
type BenchmarkStoragePaths struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Base path to the files used to store benchmark results in. Two files
	// will be generated: one with the given path and an extra file to store
	// events related to best acceleration results at path storage_file_path +
	// ".extra.fb". Must be specific to the model.
	// Note on Android, this should be the code cache directory.
	StorageFilePath *string `protobuf:"bytes,1,opt,name=storage_file_path,json=storageFilePath" json:"storage_file_path,omitempty"`
	// Path to a directory for intermediate files (lock files, extracted
	// binaries).
	// Note on Android, this typically is the data cache directory (i.e. the one
	// returned by `getCacheDir()`).
	DataDirectoryPath *string `protobuf:"bytes,2,opt,name=data_directory_path,json=dataDirectoryPath" json:"data_directory_path,omitempty"`
}

func (x *BenchmarkStoragePaths) Reset() {
	*x = BenchmarkStoragePaths{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BenchmarkStoragePaths) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BenchmarkStoragePaths) ProtoMessage() {}

func (x *BenchmarkStoragePaths) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BenchmarkStoragePaths.ProtoReflect.Descriptor instead.
func (*BenchmarkStoragePaths) Descriptor() ([]byte, []int) {
	return file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_rawDescGZIP(), []int{24}
}

func (x *BenchmarkStoragePaths) GetStorageFilePath() string {
	if x != nil && x.StorageFilePath != nil {
		return *x.StorageFilePath
	}
	return ""
}

func (x *BenchmarkStoragePaths) GetDataDirectoryPath() string {
	if x != nil && x.DataDirectoryPath != nil {
		return *x.DataDirectoryPath
	}
	return ""
}

// Validation related settings.
// Next ID: 2
type ValidationSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timeout for one settings under test. If test didn't finish within this
	// timeout, this setting is considered hanging.
	PerTestTimeoutMs *int64 `protobuf:"varint,1,opt,name=per_test_timeout_ms,json=perTestTimeoutMs" json:"per_test_timeout_ms,omitempty"`
}

func (x *ValidationSettings) Reset() {
	*x = ValidationSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidationSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidationSettings) ProtoMessage() {}

func (x *ValidationSettings) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidationSettings.ProtoReflect.Descriptor instead.
func (*ValidationSettings) Descriptor() ([]byte, []int) {
	return file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_rawDescGZIP(), []int{25}
}

func (x *ValidationSettings) GetPerTestTimeoutMs() int64 {
	if x != nil && x.PerTestTimeoutMs != nil {
		return *x.PerTestTimeoutMs
	}
	return 0
}

// How to run a minibenchmark.
// Next ID: 5
type MinibenchmarkSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Which settings to test. This would typically be filled in from an
	// allowlist.
	SettingsToTest []*TFLiteSettings `protobuf:"bytes,1,rep,name=settings_to_test,json=settingsToTest" json:"settings_to_test,omitempty"`
	// How to access the model. This would typically be set dynamically, as it
	// depends on the application folder and/or runtime state.
	ModelFile *ModelFile `protobuf:"bytes,2,opt,name=model_file,json=modelFile" json:"model_file,omitempty"`
	// Where to store state. This would typically be set dynamically, as it
	// depends on the application folder.
	StoragePaths *BenchmarkStoragePaths `protobuf:"bytes,3,opt,name=storage_paths,json=storagePaths" json:"storage_paths,omitempty"`
	// Validation test related settings.
	ValidationSettings *ValidationSettings `protobuf:"bytes,4,opt,name=validation_settings,json=validationSettings" json:"validation_settings,omitempty"`
}

func (x *MinibenchmarkSettings) Reset() {
	*x = MinibenchmarkSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MinibenchmarkSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MinibenchmarkSettings) ProtoMessage() {}

func (x *MinibenchmarkSettings) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MinibenchmarkSettings.ProtoReflect.Descriptor instead.
func (*MinibenchmarkSettings) Descriptor() ([]byte, []int) {
	return file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_rawDescGZIP(), []int{26}
}

func (x *MinibenchmarkSettings) GetSettingsToTest() []*TFLiteSettings {
	if x != nil {
		return x.SettingsToTest
	}
	return nil
}

func (x *MinibenchmarkSettings) GetModelFile() *ModelFile {
	if x != nil {
		return x.ModelFile
	}
	return nil
}

func (x *MinibenchmarkSettings) GetStoragePaths() *BenchmarkStoragePaths {
	if x != nil {
		return x.StoragePaths
	}
	return nil
}

func (x *MinibenchmarkSettings) GetValidationSettings() *ValidationSettings {
	if x != nil {
		return x.ValidationSettings
	}
	return nil
}

// Schema used for cache Benchmark result.
type BenchmarkEventStorage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModelIdGroup   *ModelIdGroup   `protobuf:"bytes,1,opt,name=model_id_group,json=modelIdGroup" json:"model_id_group,omitempty"`
	BenchmarkEvent *BenchmarkEvent `protobuf:"bytes,2,opt,name=benchmark_event,json=benchmarkEvent" json:"benchmark_event,omitempty"`
}

func (x *BenchmarkEventStorage) Reset() {
	*x = BenchmarkEventStorage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BenchmarkEventStorage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BenchmarkEventStorage) ProtoMessage() {}

func (x *BenchmarkEventStorage) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BenchmarkEventStorage.ProtoReflect.Descriptor instead.
func (*BenchmarkEventStorage) Descriptor() ([]byte, []int) {
	return file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_rawDescGZIP(), []int{27}
}

func (x *BenchmarkEventStorage) GetModelIdGroup() *ModelIdGroup {
	if x != nil {
		return x.ModelIdGroup
	}
	return nil
}

func (x *BenchmarkEventStorage) GetBenchmarkEvent() *BenchmarkEvent {
	if x != nil {
		return x.BenchmarkEvent
	}
	return nil
}

type BenchmarkResult_InferenceOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The matching Flatbuffer type is ubyte.
	Value []byte `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (x *BenchmarkResult_InferenceOutput) Reset() {
	*x = BenchmarkResult_InferenceOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BenchmarkResult_InferenceOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BenchmarkResult_InferenceOutput) ProtoMessage() {}

func (x *BenchmarkResult_InferenceOutput) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BenchmarkResult_InferenceOutput.ProtoReflect.Descriptor instead.
func (*BenchmarkResult_InferenceOutput) Descriptor() ([]byte, []int) {
	return file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_rawDescGZIP(), []int{15, 0}
}

func (x *BenchmarkResult_InferenceOutput) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

var File_tensorflow_lite_experimental_acceleration_configuration_configuration_proto protoreflect.FileDescriptor

var file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_rawDesc = []byte{
	0x0a, 0x4b, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x6c, 0x69, 0x74,
	0x65, 0x2f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x74,
	0x66, 0x6c, 0x69, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x85, 0x03, 0x0a, 0x0f,
	0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x41, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x74, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x45, 0x0a, 0x0f, 0x74, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x66,
	0x6c, 0x69, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x46, 0x4c, 0x69, 0x74,
	0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0e, 0x74, 0x66, 0x6c, 0x69, 0x74,
	0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x43, 0x0a, 0x1e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x66, 0x6f, 0x72,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x1b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x46, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x45,
	0x0a, 0x1f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x5c, 0x0a, 0x18, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x6c,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x66, 0x6c, 0x69, 0x74, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x69, 0x6e, 0x69, 0x62, 0x65, 0x6e, 0x63, 0x68,
	0x6d, 0x61, 0x72, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x15, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x54, 0x6f, 0x54, 0x65, 0x73, 0x74, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x6c, 0x79, 0x22, 0xf8, 0x05, 0x0a, 0x0d, 0x4e, 0x4e, 0x41, 0x50, 0x49, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x59, 0x0a, 0x14, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x74, 0x66, 0x6c, 0x69, 0x74,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x4e, 0x41, 0x50, 0x49, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x13, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x1e, 0x6e, 0x6f, 0x5f, 0x6f, 0x66, 0x5f, 0x6e,
	0x6e, 0x61, 0x70, 0x69, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x5f, 0x74,
	0x6f, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x6e,
	0x6f, 0x4f, 0x66, 0x4e, 0x6e, 0x61, 0x70, 0x69, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x54, 0x6f, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x4f, 0x0a, 0x11, 0x66, 0x61, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x46, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x42, 0x02, 0x18, 0x01, 0x52, 0x10, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x48, 0x0a, 0x22, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x5f, 0x6e, 0x6e, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x70, 0x75, 0x5f, 0x6f, 0x6e, 0x5f,
	0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x5f, 0x31, 0x30, 0x5f, 0x70, 0x6c, 0x75, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4e, 0x6e, 0x61, 0x70,
	0x69, 0x43, 0x70, 0x75, 0x4f, 0x6e, 0x41, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x31, 0x30, 0x50,
	0x6c, 0x75, 0x73, 0x12, 0x53, 0x0a, 0x12, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x24, 0x2e, 0x74, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e,
	0x4e, 0x41, 0x50, 0x49, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x52, 0x11, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x38, 0x0a, 0x18, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x5f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x40, 0x0a, 0x1d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x66, 0x70, 0x31, 0x36,
	0x5f, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x66,
	0x70, 0x33, 0x32, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x46, 0x70, 0x31, 0x36, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72,
	0x46, 0x70, 0x33, 0x32, 0x12, 0x32, 0x0a, 0x15, 0x75, 0x73, 0x65, 0x5f, 0x62, 0x75, 0x72, 0x73,
	0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x13, 0x75, 0x73, 0x65, 0x42, 0x75, 0x72, 0x73, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x68, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x22, 0xa1,
	0x05, 0x0a, 0x0b, 0x47, 0x50, 0x55, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x39,
	0x0a, 0x19, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6c,
	0x6f, 0x73, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x16, 0x69, 0x73, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x6f,
	0x73, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x42, 0x0a, 0x1a, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x69, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74,
	0x72, 0x75, 0x65, 0x52, 0x18, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x7a, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3d, 0x0a,
	0x0d, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x74, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x50, 0x55, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x52, 0x0c,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x12, 0x66, 0x0a, 0x13,
	0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x31, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x74, 0x66, 0x6c, 0x69,
	0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x50, 0x55, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x3a, 0x11, 0x47,
	0x50, 0x55, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x55, 0x54, 0x4f,
	0x52, 0x12, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x31, 0x12, 0x66, 0x0a, 0x13, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x22, 0x2e, 0x74, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x50, 0x55, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x3a, 0x11, 0x47, 0x50, 0x55, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52,
	0x49, 0x54, 0x59, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x52, 0x12, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x32, 0x12, 0x66, 0x0a, 0x13,
	0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x33, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x74, 0x66, 0x6c, 0x69,
	0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x50, 0x55, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x3a, 0x11, 0x47,
	0x50, 0x55, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x55, 0x54, 0x4f,
	0x52, 0x12, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x33, 0x12, 0x52, 0x0a, 0x14, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x74, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x47, 0x50, 0x55, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x13, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x22, 0xb7, 0x01, 0x0a, 0x0f, 0x48, 0x65, 0x78, 0x61, 0x67, 0x6f, 0x6e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x73, 0x61, 0x76, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x73, 0x61, 0x76, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x2e, 0x0a, 0x13, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x70,
	0x72, 0x69, 0x6e, 0x74, 0x47, 0x72, 0x61, 0x70, 0x68, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x12, 0x2a, 0x0a, 0x11, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f,
	0x64, 0x65, 0x62, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x70, 0x72, 0x69,
	0x6e, 0x74, 0x47, 0x72, 0x61, 0x70, 0x68, 0x44, 0x65, 0x62, 0x75, 0x67, 0x22, 0x86, 0x01, 0x0a,
	0x0f, 0x58, 0x4e, 0x4e, 0x50, 0x61, 0x63, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x73, 0x12, 0x52, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1a, 0x2e, 0x74, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x58, 0x4e, 0x4e, 0x50, 0x61, 0x63, 0x6b, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x3a, 0x20, 0x54, 0x46,
	0x4c, 0x49, 0x54, 0x45, 0x5f, 0x58, 0x4e, 0x4e, 0x50, 0x41, 0x43, 0x4b, 0x5f, 0x44, 0x45, 0x4c,
	0x45, 0x47, 0x41, 0x54, 0x45, 0x5f, 0x4e, 0x4f, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x53, 0x52, 0x05,
	0x66, 0x6c, 0x61, 0x67, 0x73, 0x22, 0xc7, 0x02, 0x0a, 0x0e, 0x43, 0x6f, 0x72, 0x65, 0x4d, 0x4c,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x54, 0x0a, 0x0f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2b, 0x2e, 0x74, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x72, 0x65, 0x4d, 0x4c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x0e,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x25,
	0x0a, 0x0e, 0x63, 0x6f, 0x72, 0x65, 0x6d, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x6f, 0x72, 0x65, 0x6d, 0x6c, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x18, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x65, 0x6c,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x16, 0x6d, 0x61, 0x78, 0x44,
	0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x38, 0x0a, 0x17, 0x6d, 0x69, 0x6e, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5f,
	0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x3a, 0x01, 0x32, 0x52, 0x14, 0x6d, 0x69, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x50, 0x65, 0x72, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x41, 0x0a, 0x0e,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x0f,
	0x0a, 0x0b, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x53, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x00, 0x12,
	0x1e, 0x0a, 0x1a, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x53, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f,
	0x4e, 0x45, 0x55, 0x52, 0x41, 0x4c, 0x5f, 0x45, 0x4e, 0x47, 0x49, 0x4e, 0x45, 0x10, 0x01, 0x22,
	0x43, 0x0a, 0x1c, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x4c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x23, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x22, 0x95, 0x02, 0x0a, 0x11, 0x45, 0x64, 0x67, 0x65, 0x54, 0x70, 0x75,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x51, 0x0a, 0x0d, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2c, 0x2e, 0x74, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x64, 0x67, 0x65, 0x54, 0x70, 0x75, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x70,
	0x65, 0x63, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x68, 0x69, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x6e, 0x75, 0x6d, 0x43, 0x68, 0x69, 0x70, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x68, 0x69, 0x70, 0x5f, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x63, 0x68, 0x69, 0x70, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x22, 0x4c,
	0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08,
	0x0a, 0x04, 0x4d, 0x4d, 0x49, 0x4f, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x46, 0x45,
	0x52, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x49, 0x4d, 0x55, 0x4c,
	0x41, 0x54, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45,
	0x5f, 0x53, 0x49, 0x4d, 0x55, 0x4c, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x03, 0x22, 0x9f, 0x01, 0x0a,
	0x1a, 0x45, 0x64, 0x67, 0x65, 0x54, 0x70, 0x75, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x51, 0x0a, 0x14, 0x69,
	0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x74, 0x66, 0x6c, 0x69,
	0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x54, 0x70, 0x75,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x12, 0x69, 0x6e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2e,
	0x0a, 0x13, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x5f, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x69, 0x6e, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x55, 0x73, 0x22, 0xb7,
	0x05, 0x0a, 0x0f, 0x45, 0x64, 0x67, 0x65, 0x54, 0x70, 0x75, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x53, 0x0a, 0x15, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1f, 0x2e, 0x74, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x45, 0x64, 0x67, 0x65, 0x54, 0x70, 0x75, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x13, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x5e, 0x0a, 0x16, 0x69, 0x6e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x74, 0x66, 0x6c, 0x69, 0x74, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x54, 0x70, 0x75, 0x49, 0x6e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x14, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x31, 0x0a, 0x12, 0x69, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x3a, 0x02, 0x2d, 0x31, 0x52, 0x11, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x4f, 0x0a, 0x13, 0x65, 0x64,
	0x67, 0x65, 0x74, 0x70, 0x75, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x70, 0x65,
	0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x66, 0x6c, 0x69, 0x74, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x54, 0x70, 0x75, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x52, 0x11, 0x65, 0x64, 0x67, 0x65, 0x74, 0x70,
	0x75, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1f, 0x0a, 0x0b, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x65, 0x0a, 0x15,
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x74, 0x66,
	0x6c, 0x69, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x54,
	0x70, 0x75, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x13,
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x52, 0x0a, 0x09, 0x71, 0x6f, 0x73, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x74, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x54, 0x70, 0x75, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x51, 0x6f, 0x73, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x3a, 0x0d,
	0x51, 0x4f, 0x53, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x52, 0x08, 0x71,
	0x6f, 0x73, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x22, 0x51, 0x0a, 0x13, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f,
	0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x11, 0x0a, 0x0d, 0x4e, 0x4f, 0x5f, 0x54, 0x52, 0x55, 0x4e, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x42, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x31, 0x36, 0x10, 0x02,
	0x12, 0x08, 0x0a, 0x04, 0x48, 0x41, 0x4c, 0x46, 0x10, 0x03, 0x22, 0x3c, 0x0a, 0x08, 0x51, 0x6f,
	0x73, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x11, 0x0a, 0x0d, 0x51, 0x4f, 0x53, 0x5f, 0x55, 0x4e,
	0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x45, 0x53,
	0x54, 0x5f, 0x45, 0x46, 0x46, 0x4f, 0x52, 0x54, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45,
	0x41, 0x4c, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x02, 0x22, 0xaa, 0x02, 0x0a, 0x0d, 0x43, 0x6f, 0x72,
	0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x52, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x74, 0x66, 0x6c, 0x69, 0x74, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x72, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65,
	0x3a, 0x07, 0x4d, 0x41, 0x58, 0x49, 0x4d, 0x55, 0x4d, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x75, 0x73, 0x62, 0x5f, 0x61, 0x6c,
	0x77, 0x61, 0x79, 0x73, 0x5f, 0x64, 0x66, 0x75, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x75, 0x73, 0x62, 0x41, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x44, 0x66, 0x75, 0x12, 0x3d, 0x0a, 0x1c,
	0x75, 0x73, 0x62, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x75, 0x6c, 0x6b, 0x5f, 0x69, 0x6e, 0x5f,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x17, 0x75, 0x73, 0x62, 0x4d, 0x61, 0x78, 0x42, 0x75, 0x6c, 0x6b, 0x49, 0x6e,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0x48, 0x0a, 0x0b, 0x50,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e,
	0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x41, 0x58,
	0x49, 0x4d, 0x55, 0x4d, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x49, 0x47, 0x48, 0x10, 0x02,
	0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03,
	0x4c, 0x4f, 0x57, 0x10, 0x04, 0x22, 0x32, 0x0a, 0x0b, 0x43, 0x50, 0x55, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x23, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x74, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x02, 0x2d, 0x31, 0x52, 0x0a, 0x6e,
	0x75, 0x6d, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x22, 0xa3, 0x07, 0x0a, 0x0e, 0x54, 0x46,
	0x4c, 0x69, 0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x32, 0x0a, 0x08,
	0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x74, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x08, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x12, 0x42, 0x0a, 0x0e, 0x6e, 0x6e, 0x61, 0x70, 0x69, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x66, 0x6c, 0x69, 0x74,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x4e, 0x41, 0x50, 0x49, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0d, 0x6e, 0x6e, 0x61, 0x70, 0x69, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x3c, 0x0a, 0x0c, 0x67, 0x70, 0x75, 0x5f, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x66, 0x6c,
	0x69, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x50, 0x55, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0b, 0x67, 0x70, 0x75, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x48, 0x0a, 0x10, 0x68, 0x65, 0x78, 0x61, 0x67, 0x6f, 0x6e, 0x5f, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74,
	0x66, 0x6c, 0x69, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x65, 0x78, 0x61,
	0x67, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0f, 0x68, 0x65, 0x78,
	0x61, 0x67, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x48, 0x0a, 0x10,
	0x78, 0x6e, 0x6e, 0x70, 0x61, 0x63, 0x6b, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x58, 0x4e, 0x4e, 0x50, 0x61, 0x63, 0x6b, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0f, 0x78, 0x6e, 0x6e, 0x70, 0x61, 0x63, 0x6b, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x45, 0x0a, 0x0f, 0x63, 0x6f, 0x72, 0x65, 0x6d, 0x6c,
	0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x74, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x72, 0x65, 0x4d, 0x4c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0e, 0x63,
	0x6f, 0x72, 0x65, 0x6d, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3c, 0x0a,
	0x0c, 0x63, 0x70, 0x75, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x50, 0x55, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0b,
	0x63, 0x70, 0x75, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x6d,
	0x61, 0x78, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x6d,
	0x61, 0x78, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x48, 0x0a, 0x10, 0x65, 0x64, 0x67, 0x65, 0x74, 0x70, 0x75,
	0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x74, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45,
	0x64, 0x67, 0x65, 0x54, 0x70, 0x75, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0f,
	0x65, 0x64, 0x67, 0x65, 0x74, 0x70, 0x75, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x42, 0x0a, 0x0e, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x66, 0x6c, 0x69, 0x74, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x72, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x0d, 0x63, 0x6f, 0x72, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x4b, 0x0a, 0x11, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x5f,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x74, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x61,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x10,
	0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x3a, 0x0a, 0x19, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x17, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x73, 0x12, 0x71, 0x0a, 0x1f,
	0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f,
	0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x74, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x1c, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x4c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22,
	0xd0, 0x01, 0x0a, 0x10, 0x46, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x5f, 0x0a, 0x2d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x61, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x5f, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x28, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x46, 0x61, 0x6c, 0x6c, 0x62,
	0x61, 0x63, 0x6b, 0x4f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x5b, 0x0a, 0x2b, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x61,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x5f, 0x6f, 0x6e, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x26, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x46, 0x61, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x4f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0x41, 0x0a, 0x0f, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x02, 0x42, 0x02, 0x10, 0x01, 0x52, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xe5, 0x02, 0x0a, 0x0f, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d,
	0x61, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x38, 0x0a, 0x16, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x75, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x42, 0x02, 0x10, 0x01, 0x52, 0x14, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x55, 0x73, 0x12, 0x2e, 0x0a, 0x11, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x42, 0x02,
	0x10, 0x01, 0x52, 0x0f, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x55, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x5f, 0x6b, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x4d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4b, 0x62, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x12, 0x37, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x66, 0x6c, 0x69, 0x74,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72,
	0x6b, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x12, 0x52, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x74, 0x66, 0x6c, 0x69, 0x74, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x1a, 0x27, 0x0a, 0x0f, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x90, 0x01,
	0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x74, 0x66,
	0x6c, 0x69, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74,
	0x66, 0x6c, 0x69, 0x74, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x74, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x30,
	0x0a, 0x14, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x69,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x75, 0x6e,
	0x64, 0x65, 0x72, 0x6c, 0x79, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x69, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x22, 0xec, 0x01, 0x0a, 0x0e, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x74, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x67, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78, 0x69, 0x74, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x78, 0x69, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x36, 0x0a, 0x0a,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x74, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x6d, 0x69, 0x6e, 0x69, 0x5f, 0x62, 0x65, 0x6e,
	0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x6d, 0x69, 0x6e, 0x69, 0x42, 0x65, 0x6e,
	0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0xc7, 0x02, 0x0a, 0x0e, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x45, 0x0a, 0x0f, 0x74, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x66,
	0x6c, 0x69, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x46, 0x4c, 0x69, 0x74,
	0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0e, 0x74, 0x66, 0x6c, 0x69, 0x74,
	0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3f, 0x0a, 0x0a, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e,
	0x74, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x65, 0x6e,
	0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x66, 0x6c,
	0x69, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d,
	0x61, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x74, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x6f, 0x6f, 0x74, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x62, 0x6f, 0x6f, 0x74,
	0x74, 0x69, 0x6d, 0x65, 0x55, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x6c, 0x6c, 0x63, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x77, 0x61,
	0x6c, 0x6c, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x22, 0xce, 0x01, 0x0a, 0x18, 0x42, 0x65,
	0x73, 0x74, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x17, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f,
	0x66, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x48, 0x0a,
	0x11, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x66, 0x6c, 0x69, 0x74,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72,
	0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0f, 0x6d, 0x69, 0x6e, 0x4c, 0x61, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x6d, 0x69, 0x6e, 0x5f, 0x69,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x6d, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x73, 0x22, 0x55, 0x0a, 0x1e, 0x42, 0x65,
	0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x33, 0x0a, 0x15,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0xd9, 0x02, 0x0a, 0x12, 0x4d, 0x69, 0x6e, 0x69, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d,
	0x61, 0x72, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x15, 0x69, 0x73, 0x5f, 0x6c,
	0x6f, 0x67, 0x5f, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x73, 0x4c, 0x6f, 0x67, 0x46, 0x6c,
	0x75, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x64, 0x0a, 0x1a, 0x62,
	0x65, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x74, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42,
	0x65, 0x73, 0x74, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x18, 0x62, 0x65, 0x73, 0x74, 0x41, 0x63, 0x63,
	0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x63, 0x0a, 0x16, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x74, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52,
	0x15, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x45, 0x0a, 0x0f, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d,
	0x61, 0x72, 0x6b, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x74, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42,
	0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0e, 0x62,
	0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0xa9, 0x01,
	0x0a, 0x09, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x66, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x66, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x40, 0x0a, 0x0e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x5f, 0x69, 0x64, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x74, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0c, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x49, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x52, 0x0a, 0x0c, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x49, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x73, 0x0a,
	0x15, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x64, 0x61, 0x74, 0x61, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x61,
	0x74, 0x68, 0x22, 0x43, 0x0a, 0x12, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x70, 0x65, 0x72, 0x5f,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x70, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x73, 0x22, 0xb4, 0x02, 0x0a, 0x15, 0x4d, 0x69, 0x6e, 0x69,
	0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x46, 0x0a, 0x10, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x74, 0x6f,
	0x5f, 0x74, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x66,
	0x6c, 0x69, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x46, 0x4c, 0x69, 0x74,
	0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0e, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x54, 0x6f, 0x54, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x0a, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x74, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x46, 0x69, 0x6c,
	0x65, 0x12, 0x48, 0x0a, 0x0d, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x66, 0x6c, 0x69, 0x74,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72,
	0x6b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x52, 0x0c, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x51, 0x0a, 0x13, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x66, 0x6c, 0x69, 0x74,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x12, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xa0,
	0x01, 0x0a, 0x15, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x5f, 0x69, 0x64, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x74, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0c, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x49, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x45, 0x0a, 0x0f, 0x62, 0x65,
	0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x0e, 0x62, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x2a, 0x4d, 0x0a, 0x13, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4e, 0x59, 0x10,
	0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x4f, 0x57, 0x5f, 0x4c, 0x41, 0x54, 0x45, 0x4e, 0x43, 0x59,
	0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x4f, 0x57, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x10,
	0x02, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x50, 0x55, 0x10, 0x03,
	0x2a, 0x6f, 0x0a, 0x08, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x08, 0x0a, 0x04,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x4e, 0x4e, 0x41, 0x50, 0x49, 0x10,
	0x01, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x50, 0x55, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x48, 0x45,
	0x58, 0x41, 0x47, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x58, 0x4e, 0x4e, 0x50, 0x41,
	0x43, 0x4b, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x44, 0x47, 0x45, 0x54, 0x50, 0x55, 0x10,
	0x05, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x44, 0x47, 0x45, 0x54, 0x50, 0x55, 0x5f, 0x43, 0x4f, 0x52,
	0x41, 0x4c, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x52, 0x45, 0x5f, 0x4d, 0x4c, 0x10,
	0x07, 0x2a, 0x77, 0x0a, 0x18, 0x4e, 0x4e, 0x41, 0x50, 0x49, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x0d, 0x0a,
	0x09, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f,
	0x4e, 0x4e, 0x41, 0x50, 0x49, 0x5f, 0x4c, 0x4f, 0x57, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x10,
	0x01, 0x12, 0x1c, 0x0a, 0x18, 0x4e, 0x4e, 0x41, 0x50, 0x49, 0x5f, 0x46, 0x41, 0x53, 0x54, 0x5f,
	0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x5f, 0x41, 0x4e, 0x53, 0x57, 0x45, 0x52, 0x10, 0x02, 0x12,
	0x19, 0x0a, 0x15, 0x4e, 0x4e, 0x41, 0x50, 0x49, 0x5f, 0x53, 0x55, 0x53, 0x54, 0x41, 0x49, 0x4e,
	0x45, 0x44, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x82, 0x01, 0x0a, 0x16, 0x4e,
	0x4e, 0x41, 0x50, 0x49, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x18, 0x4e, 0x4e, 0x41, 0x50, 0x49, 0x5f, 0x50,
	0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x4e, 0x41, 0x50, 0x49, 0x5f, 0x50, 0x52, 0x49,
	0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x4e,
	0x4e, 0x41, 0x50, 0x49, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x45,
	0x44, 0x49, 0x55, 0x4d, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x4e, 0x41, 0x50, 0x49, 0x5f,
	0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x03, 0x2a,
	0x2f, 0x0a, 0x0a, 0x47, 0x50, 0x55, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x12, 0x09, 0x0a,
	0x05, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x50, 0x45, 0x4e,
	0x43, 0x4c, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x50, 0x45, 0x4e, 0x47, 0x4c, 0x10, 0x02,
	0x2a, 0x8e, 0x01, 0x0a, 0x14, 0x47, 0x50, 0x55, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x50, 0x55,
	0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x10, 0x00,
	0x12, 0x1e, 0x0a, 0x1a, 0x47, 0x50, 0x55, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x50, 0x52, 0x45, 0x43, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x01,
	0x12, 0x1c, 0x0a, 0x18, 0x47, 0x50, 0x55, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x4d, 0x49, 0x4e, 0x5f, 0x4c, 0x41, 0x54, 0x45, 0x4e, 0x43, 0x59, 0x10, 0x02, 0x12, 0x21,
	0x0a, 0x1d, 0x47, 0x50, 0x55, 0x5f, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x4d,
	0x49, 0x4e, 0x5f, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x55, 0x53, 0x41, 0x47, 0x45, 0x10,
	0x03, 0x2a, 0x72, 0x0a, 0x11, 0x47, 0x50, 0x55, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2f, 0x0a, 0x2b, 0x47, 0x50, 0x55, 0x5f, 0x49, 0x4e,
	0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e,
	0x43, 0x45, 0x5f, 0x46, 0x41, 0x53, 0x54, 0x5f, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45, 0x5f, 0x41,
	0x4e, 0x53, 0x57, 0x45, 0x52, 0x10, 0x00, 0x12, 0x2c, 0x0a, 0x28, 0x47, 0x50, 0x55, 0x5f, 0x49,
	0x4e, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45,
	0x4e, 0x43, 0x45, 0x5f, 0x53, 0x55, 0x53, 0x54, 0x41, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x53, 0x50,
	0x45, 0x45, 0x44, 0x10, 0x01, 0x2a, 0xd7, 0x01, 0x0a, 0x0c, 0x58, 0x4e, 0x4e, 0x50, 0x61, 0x63,
	0x6b, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x24, 0x0a, 0x20, 0x54, 0x46, 0x4c, 0x49, 0x54, 0x45,
	0x5f, 0x58, 0x4e, 0x4e, 0x50, 0x41, 0x43, 0x4b, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x47, 0x41, 0x54,
	0x45, 0x5f, 0x4e, 0x4f, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x53, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20,
	0x54, 0x46, 0x4c, 0x49, 0x54, 0x45, 0x5f, 0x58, 0x4e, 0x4e, 0x50, 0x41, 0x43, 0x4b, 0x5f, 0x44,
	0x45, 0x4c, 0x45, 0x47, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x51, 0x53, 0x38,
	0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x54, 0x46, 0x4c, 0x49, 0x54, 0x45, 0x5f, 0x58, 0x4e, 0x4e,
	0x50, 0x41, 0x43, 0x4b, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x47, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x4c,
	0x41, 0x47, 0x5f, 0x51, 0x55, 0x38, 0x10, 0x02, 0x12, 0x28, 0x0a, 0x24, 0x54, 0x46, 0x4c, 0x49,
	0x54, 0x45, 0x5f, 0x58, 0x4e, 0x4e, 0x50, 0x41, 0x43, 0x4b, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x47,
	0x41, 0x54, 0x45, 0x5f, 0x46, 0x4c, 0x41, 0x47, 0x5f, 0x51, 0x53, 0x38, 0x5f, 0x51, 0x55, 0x38,
	0x10, 0x03, 0x12, 0x2b, 0x0a, 0x27, 0x54, 0x46, 0x4c, 0x49, 0x54, 0x45, 0x5f, 0x58, 0x4e, 0x4e,
	0x50, 0x41, 0x43, 0x4b, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x47, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x4c,
	0x41, 0x47, 0x5f, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x5f, 0x46, 0x50, 0x31, 0x36, 0x10, 0x04, 0x2a,
	0xad, 0x01, 0x0a, 0x11, 0x45, 0x64, 0x67, 0x65, 0x54, 0x70, 0x75, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e,
	0x45, 0x44, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x00, 0x12,
	0x10, 0x0a, 0x0c, 0x54, 0x50, 0x55, 0x5f, 0x43, 0x4f, 0x52, 0x45, 0x5f, 0x4f, 0x46, 0x46, 0x10,
	0x01, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52,
	0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x56, 0x45, 0x52,
	0x59, 0x5f, 0x4c, 0x4f, 0x57, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x10, 0x04, 0x12, 0x14, 0x0a,
	0x10, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x4c, 0x4f, 0x57, 0x5f, 0x50, 0x4f, 0x57, 0x45,
	0x52, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x06, 0x12,
	0x0e, 0x0a, 0x0a, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x44, 0x52, 0x49, 0x56, 0x45, 0x10, 0x07, 0x2a,
	0x78, 0x0a, 0x12, 0x42, 0x65, 0x6e, 0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e,
	0x45, 0x44, 0x5f, 0x42, 0x45, 0x4e, 0x43, 0x48, 0x4d, 0x41, 0x52, 0x4b, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x54, 0x41,
	0x52, 0x54, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x09, 0x0a,
	0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x4f, 0x47, 0x47,
	0x45, 0x44, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x45, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x45,
	0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x2a, 0x40, 0x0a, 0x0e, 0x42, 0x65, 0x6e,
	0x63, 0x68, 0x6d, 0x61, 0x72, 0x6b, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x49, 0x54,
	0x49, 0x41, 0x4c, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09,
	0x49, 0x4e, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x02, 0x42, 0xd1, 0x01, 0x0a, 0x10,
	0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x42, 0x12, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x48, 0x02, 0x50, 0x01, 0x5a, 0x56, 0x67, 0x69, 0x74, 0x65, 0x65, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x71, 0x63, 0x69, 0x69, 0x70, 0x2d, 0x69, 0x63, 0x70, 0x2f, 0x74, 0x66,
	0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2f, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66,
	0x6c, 0x6f, 0x77, 0x2f, 0x6c, 0x69, 0x74, 0x65, 0x2f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0xa2, 0x02, 0x03, 0x54, 0x50, 0x58, 0xaa, 0x02, 0x0c, 0x54, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0xca, 0x02, 0x0c, 0x54, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x5c, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0xe2, 0x02, 0x18, 0x54, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x5c, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,
	0x02, 0x0d, 0x54, 0x66, 0x6c, 0x69, 0x74, 0x65, 0x3a, 0x3a, 0x50, 0x72, 0x6f, 0x74, 0x6f,
}

var (
	file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_rawDescOnce sync.Once
	file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_rawDescData = file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_rawDesc
)

func file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_rawDescGZIP() []byte {
	file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_rawDescOnce.Do(func() {
		file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_rawDescData = protoimpl.X.CompressGZIP(file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_rawDescData)
	})
	return file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_rawDescData
}

var file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_enumTypes = make([]protoimpl.EnumInfo, 16)
var file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_goTypes = []interface{}{
	(ExecutionPreference)(0),                 // 0: tflite.proto.ExecutionPreference
	(Delegate)(0),                            // 1: tflite.proto.Delegate
	(NNAPIExecutionPreference)(0),            // 2: tflite.proto.NNAPIExecutionPreference
	(NNAPIExecutionPriority)(0),              // 3: tflite.proto.NNAPIExecutionPriority
	(GPUBackend)(0),                          // 4: tflite.proto.GPUBackend
	(GPUInferencePriority)(0),                // 5: tflite.proto.GPUInferencePriority
	(GPUInferenceUsage)(0),                   // 6: tflite.proto.GPUInferenceUsage
	(XNNPackFlags)(0),                        // 7: tflite.proto.XNNPackFlags
	(EdgeTpuPowerState)(0),                   // 8: tflite.proto.EdgeTpuPowerState
	(BenchmarkEventType)(0),                  // 9: tflite.proto.BenchmarkEventType
	(BenchmarkStage)(0),                      // 10: tflite.proto.BenchmarkStage
	(CoreMLSettings_EnabledDevices)(0),       // 11: tflite.proto.CoreMLSettings.EnabledDevices
	(EdgeTpuDeviceSpec_PlatformType)(0),      // 12: tflite.proto.EdgeTpuDeviceSpec.PlatformType
	(EdgeTpuSettings_FloatTruncationType)(0), // 13: tflite.proto.EdgeTpuSettings.FloatTruncationType
	(EdgeTpuSettings_QosClass)(0),            // 14: tflite.proto.EdgeTpuSettings.QosClass
	(CoralSettings_Performance)(0),           // 15: tflite.proto.CoralSettings.Performance
	(*ComputeSettings)(nil),                  // 16: tflite.proto.ComputeSettings
	(*NNAPISettings)(nil),                    // 17: tflite.proto.NNAPISettings
	(*GPUSettings)(nil),                      // 18: tflite.proto.GPUSettings
	(*HexagonSettings)(nil),                  // 19: tflite.proto.HexagonSettings
	(*XNNPackSettings)(nil),                  // 20: tflite.proto.XNNPackSettings
	(*CoreMLSettings)(nil),                   // 21: tflite.proto.CoreMLSettings
	(*StableDelegateLoaderSettings)(nil),     // 22: tflite.proto.StableDelegateLoaderSettings
	(*EdgeTpuDeviceSpec)(nil),                // 23: tflite.proto.EdgeTpuDeviceSpec
	(*EdgeTpuInactivePowerConfig)(nil),       // 24: tflite.proto.EdgeTpuInactivePowerConfig
	(*EdgeTpuSettings)(nil),                  // 25: tflite.proto.EdgeTpuSettings
	(*CoralSettings)(nil),                    // 26: tflite.proto.CoralSettings
	(*CPUSettings)(nil),                      // 27: tflite.proto.CPUSettings
	(*TFLiteSettings)(nil),                   // 28: tflite.proto.TFLiteSettings
	(*FallbackSettings)(nil),                 // 29: tflite.proto.FallbackSettings
	(*BenchmarkMetric)(nil),                  // 30: tflite.proto.BenchmarkMetric
	(*BenchmarkResult)(nil),                  // 31: tflite.proto.BenchmarkResult
	(*ErrorCode)(nil),                        // 32: tflite.proto.ErrorCode
	(*BenchmarkError)(nil),                   // 33: tflite.proto.BenchmarkError
	(*BenchmarkEvent)(nil),                   // 34: tflite.proto.BenchmarkEvent
	(*BestAccelerationDecision)(nil),         // 35: tflite.proto.BestAccelerationDecision
	(*BenchmarkInitializationFailure)(nil),   // 36: tflite.proto.BenchmarkInitializationFailure
	(*MiniBenchmarkEvent)(nil),               // 37: tflite.proto.MiniBenchmarkEvent
	(*ModelFile)(nil),                        // 38: tflite.proto.ModelFile
	(*ModelIdGroup)(nil),                     // 39: tflite.proto.ModelIdGroup
	(*BenchmarkStoragePaths)(nil),            // 40: tflite.proto.BenchmarkStoragePaths
	(*ValidationSettings)(nil),               // 41: tflite.proto.ValidationSettings
	(*MinibenchmarkSettings)(nil),            // 42: tflite.proto.MinibenchmarkSettings
	(*BenchmarkEventStorage)(nil),            // 43: tflite.proto.BenchmarkEventStorage
	(*BenchmarkResult_InferenceOutput)(nil),  // 44: tflite.proto.BenchmarkResult.InferenceOutput
}
var file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_depIdxs = []int32{
	0,  // 0: tflite.proto.ComputeSettings.preference:type_name -> tflite.proto.ExecutionPreference
	28, // 1: tflite.proto.ComputeSettings.tflite_settings:type_name -> tflite.proto.TFLiteSettings
	42, // 2: tflite.proto.ComputeSettings.settings_to_test_locally:type_name -> tflite.proto.MinibenchmarkSettings
	2,  // 3: tflite.proto.NNAPISettings.execution_preference:type_name -> tflite.proto.NNAPIExecutionPreference
	29, // 4: tflite.proto.NNAPISettings.fallback_settings:type_name -> tflite.proto.FallbackSettings
	3,  // 5: tflite.proto.NNAPISettings.execution_priority:type_name -> tflite.proto.NNAPIExecutionPriority
	4,  // 6: tflite.proto.GPUSettings.force_backend:type_name -> tflite.proto.GPUBackend
	5,  // 7: tflite.proto.GPUSettings.inference_priority1:type_name -> tflite.proto.GPUInferencePriority
	5,  // 8: tflite.proto.GPUSettings.inference_priority2:type_name -> tflite.proto.GPUInferencePriority
	5,  // 9: tflite.proto.GPUSettings.inference_priority3:type_name -> tflite.proto.GPUInferencePriority
	6,  // 10: tflite.proto.GPUSettings.inference_preference:type_name -> tflite.proto.GPUInferenceUsage
	7,  // 11: tflite.proto.XNNPackSettings.flags:type_name -> tflite.proto.XNNPackFlags
	11, // 12: tflite.proto.CoreMLSettings.enabled_devices:type_name -> tflite.proto.CoreMLSettings.EnabledDevices
	12, // 13: tflite.proto.EdgeTpuDeviceSpec.platform_type:type_name -> tflite.proto.EdgeTpuDeviceSpec.PlatformType
	8,  // 14: tflite.proto.EdgeTpuInactivePowerConfig.inactive_power_state:type_name -> tflite.proto.EdgeTpuPowerState
	8,  // 15: tflite.proto.EdgeTpuSettings.inference_power_state:type_name -> tflite.proto.EdgeTpuPowerState
	24, // 16: tflite.proto.EdgeTpuSettings.inactive_power_configs:type_name -> tflite.proto.EdgeTpuInactivePowerConfig
	23, // 17: tflite.proto.EdgeTpuSettings.edgetpu_device_spec:type_name -> tflite.proto.EdgeTpuDeviceSpec
	13, // 18: tflite.proto.EdgeTpuSettings.float_truncation_type:type_name -> tflite.proto.EdgeTpuSettings.FloatTruncationType
	14, // 19: tflite.proto.EdgeTpuSettings.qos_class:type_name -> tflite.proto.EdgeTpuSettings.QosClass
	15, // 20: tflite.proto.CoralSettings.performance:type_name -> tflite.proto.CoralSettings.Performance
	1,  // 21: tflite.proto.TFLiteSettings.delegate:type_name -> tflite.proto.Delegate
	17, // 22: tflite.proto.TFLiteSettings.nnapi_settings:type_name -> tflite.proto.NNAPISettings
	18, // 23: tflite.proto.TFLiteSettings.gpu_settings:type_name -> tflite.proto.GPUSettings
	19, // 24: tflite.proto.TFLiteSettings.hexagon_settings:type_name -> tflite.proto.HexagonSettings
	20, // 25: tflite.proto.TFLiteSettings.xnnpack_settings:type_name -> tflite.proto.XNNPackSettings
	21, // 26: tflite.proto.TFLiteSettings.coreml_settings:type_name -> tflite.proto.CoreMLSettings
	27, // 27: tflite.proto.TFLiteSettings.cpu_settings:type_name -> tflite.proto.CPUSettings
	25, // 28: tflite.proto.TFLiteSettings.edgetpu_settings:type_name -> tflite.proto.EdgeTpuSettings
	26, // 29: tflite.proto.TFLiteSettings.coral_settings:type_name -> tflite.proto.CoralSettings
	29, // 30: tflite.proto.TFLiteSettings.fallback_settings:type_name -> tflite.proto.FallbackSettings
	22, // 31: tflite.proto.TFLiteSettings.stable_delegate_loader_settings:type_name -> tflite.proto.StableDelegateLoaderSettings
	30, // 32: tflite.proto.BenchmarkResult.metrics:type_name -> tflite.proto.BenchmarkMetric
	44, // 33: tflite.proto.BenchmarkResult.actual_output:type_name -> tflite.proto.BenchmarkResult.InferenceOutput
	1,  // 34: tflite.proto.ErrorCode.source:type_name -> tflite.proto.Delegate
	10, // 35: tflite.proto.BenchmarkError.stage:type_name -> tflite.proto.BenchmarkStage
	32, // 36: tflite.proto.BenchmarkError.error_code:type_name -> tflite.proto.ErrorCode
	28, // 37: tflite.proto.BenchmarkEvent.tflite_settings:type_name -> tflite.proto.TFLiteSettings
	9,  // 38: tflite.proto.BenchmarkEvent.event_type:type_name -> tflite.proto.BenchmarkEventType
	31, // 39: tflite.proto.BenchmarkEvent.result:type_name -> tflite.proto.BenchmarkResult
	33, // 40: tflite.proto.BenchmarkEvent.error:type_name -> tflite.proto.BenchmarkError
	34, // 41: tflite.proto.BestAccelerationDecision.min_latency_event:type_name -> tflite.proto.BenchmarkEvent
	35, // 42: tflite.proto.MiniBenchmarkEvent.best_acceleration_decision:type_name -> tflite.proto.BestAccelerationDecision
	36, // 43: tflite.proto.MiniBenchmarkEvent.initialization_failure:type_name -> tflite.proto.BenchmarkInitializationFailure
	34, // 44: tflite.proto.MiniBenchmarkEvent.benchmark_event:type_name -> tflite.proto.BenchmarkEvent
	39, // 45: tflite.proto.ModelFile.model_id_group:type_name -> tflite.proto.ModelIdGroup
	28, // 46: tflite.proto.MinibenchmarkSettings.settings_to_test:type_name -> tflite.proto.TFLiteSettings
	38, // 47: tflite.proto.MinibenchmarkSettings.model_file:type_name -> tflite.proto.ModelFile
	40, // 48: tflite.proto.MinibenchmarkSettings.storage_paths:type_name -> tflite.proto.BenchmarkStoragePaths
	41, // 49: tflite.proto.MinibenchmarkSettings.validation_settings:type_name -> tflite.proto.ValidationSettings
	39, // 50: tflite.proto.BenchmarkEventStorage.model_id_group:type_name -> tflite.proto.ModelIdGroup
	34, // 51: tflite.proto.BenchmarkEventStorage.benchmark_event:type_name -> tflite.proto.BenchmarkEvent
	52, // [52:52] is the sub-list for method output_type
	52, // [52:52] is the sub-list for method input_type
	52, // [52:52] is the sub-list for extension type_name
	52, // [52:52] is the sub-list for extension extendee
	0,  // [0:52] is the sub-list for field type_name
}

func init() { file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_init() }
func file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_init() {
	if File_tensorflow_lite_experimental_acceleration_configuration_configuration_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComputeSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NNAPISettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GPUSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HexagonSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*XNNPackSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoreMLSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StableDelegateLoaderSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EdgeTpuDeviceSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EdgeTpuInactivePowerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EdgeTpuSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoralSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CPUSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TFLiteSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FallbackSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BenchmarkMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BenchmarkResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BenchmarkError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BenchmarkEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BestAccelerationDecision); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BenchmarkInitializationFailure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiniBenchmarkEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelIdGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BenchmarkStoragePaths); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidationSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MinibenchmarkSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BenchmarkEventStorage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BenchmarkResult_InferenceOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_rawDesc,
			NumEnums:      16,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_goTypes,
		DependencyIndexes: file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_depIdxs,
		EnumInfos:         file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_enumTypes,
		MessageInfos:      file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_msgTypes,
	}.Build()
	File_tensorflow_lite_experimental_acceleration_configuration_configuration_proto = out.File
	file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_rawDesc = nil
	file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_goTypes = nil
	file_tensorflow_lite_experimental_acceleration_configuration_configuration_proto_depIdxs = nil
}
