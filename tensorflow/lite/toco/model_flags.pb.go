// Copyright 2017 The TensorFlow Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: tensorflow/lite/toco/model_flags.proto

package toco

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The hlo file type enum.
type ModelFlags_HloFileType int32

const (
	ModelFlags_UNKNOWN   ModelFlags_HloFileType = 0
	ModelFlags_HLO_TEXT  ModelFlags_HloFileType = 1
	ModelFlags_HLO_PROTO ModelFlags_HloFileType = 2
)

// Enum value maps for ModelFlags_HloFileType.
var (
	ModelFlags_HloFileType_name = map[int32]string{
		0: "UNKNOWN",
		1: "HLO_TEXT",
		2: "HLO_PROTO",
	}
	ModelFlags_HloFileType_value = map[string]int32{
		"UNKNOWN":   0,
		"HLO_TEXT":  1,
		"HLO_PROTO": 2,
	}
)

func (x ModelFlags_HloFileType) Enum() *ModelFlags_HloFileType {
	p := new(ModelFlags_HloFileType)
	*p = x
	return p
}

func (x ModelFlags_HloFileType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ModelFlags_HloFileType) Descriptor() protoreflect.EnumDescriptor {
	return file_tensorflow_lite_toco_model_flags_proto_enumTypes[0].Descriptor()
}

func (ModelFlags_HloFileType) Type() protoreflect.EnumType {
	return &file_tensorflow_lite_toco_model_flags_proto_enumTypes[0]
}

func (x ModelFlags_HloFileType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *ModelFlags_HloFileType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = ModelFlags_HloFileType(num)
	return nil
}

// Deprecated: Use ModelFlags_HloFileType.Descriptor instead.
func (ModelFlags_HloFileType) EnumDescriptor() ([]byte, []int) {
	return file_tensorflow_lite_toco_model_flags_proto_rawDescGZIP(), []int{4, 0}
}

type InputArrayShape struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Dimensions of the tensor.
	Dims []int32 `protobuf:"varint,2,rep,name=dims" json:"dims,omitempty"`
	// If true, the number of dimensions in the shape is unknown.
	//
	// If true, "dims.size()" must be 0.
	UnknownRank *bool `protobuf:"varint,3,opt,name=unknown_rank,json=unknownRank" json:"unknown_rank,omitempty"`
}

func (x *InputArrayShape) Reset() {
	*x = InputArrayShape{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_lite_toco_model_flags_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputArrayShape) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputArrayShape) ProtoMessage() {}

func (x *InputArrayShape) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_lite_toco_model_flags_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputArrayShape.ProtoReflect.Descriptor instead.
func (*InputArrayShape) Descriptor() ([]byte, []int) {
	return file_tensorflow_lite_toco_model_flags_proto_rawDescGZIP(), []int{0}
}

func (x *InputArrayShape) GetDims() []int32 {
	if x != nil {
		return x.Dims
	}
	return nil
}

func (x *InputArrayShape) GetUnknownRank() bool {
	if x != nil && x.UnknownRank != nil {
		return *x.UnknownRank
	}
	return false
}

// Next ID to USE: 7.
type InputArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the input arrays, i.e. the arrays from which input activations
	// will be read.
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Shape of the input.  For many applications the dimensions are {batch,
	// height, width, depth}.  Often the batch is left "unspecified" by providing
	// a value of -1.
	//
	// The last dimension is typically called 'depth' or 'channels'. For example,
	// for an image model taking RGB images as input, this would have the value 3.
	Shape *InputArrayShape `protobuf:"bytes,6,opt,name=shape" json:"shape,omitempty"`
	// mean_value and std_value parameters control the interpretation of raw input
	// activation values (elements of the input array) as real numbers. The
	// mapping is given by:
	//
	//	real_value = (raw_input_value - mean_value) / std_value
	//
	// In particular, the defaults (mean_value=0, std_value=1) yield
	// real_value = raw_input_value. Often, non-default values are used in image
	// models. For example, an image model taking uint8 image channel values as
	// its raw inputs, in [0, 255] range, may use mean_value=128, std_value=128 to
	// map them into the interval [-1, 1).
	//
	// Note: this matches exactly the meaning of mean_value and std_value in
	// (TensorFlow via LegacyFedInput).
	MeanValue *float32 `protobuf:"fixed32,3,opt,name=mean_value,json=meanValue" json:"mean_value,omitempty"`
	StdValue  *float32 `protobuf:"fixed32,4,opt,name=std_value,json=stdValue,def=1" json:"std_value,omitempty"`
	// Data type of the input.
	//
	// In many graphs, the input arrays already have defined data types,
	// e.g. Placeholder nodes in a TensorFlow GraphDef have a dtype attribute.
	// In those cases, it is not needed to specify this data_type flag.
	// The purpose of this flag is only to define the data type of input
	// arrays whose type isn't defined in the input graph file. For example,
	// when specifying an arbitrary (not Placeholder) --input_array into
	// a TensorFlow GraphDef.
	//
	// When this data_type is quantized (e.g. QUANTIZED_UINT8), the
	// corresponding quantization parameters are the mean_value, std_value
	// fields.
	//
	// It is also important to understand the nuance between this data_type
	// flag and the inference_input_type in TocoFlags. The basic difference
	// is that this data_type (like all ModelFlags) describes a property
	// of the input graph, while inference_input_type (like all TocoFlags)
	// describes an aspect of the toco transformation process and thus of
	// the output file. The types of input arrays may be different between
	// the input and output files if quantization or dequantization occurred.
	// Such differences can only occur for real-number data i.e. only
	// between FLOAT and quantized types (e.g. QUANTIZED_UINT8).
	DataType *IODataType `protobuf:"varint,5,opt,name=data_type,json=dataType,enum=toco.IODataType" json:"data_type,omitempty"`
}

// Default values for InputArray fields.
const (
	Default_InputArray_StdValue = float32(1)
)

func (x *InputArray) Reset() {
	*x = InputArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_lite_toco_model_flags_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputArray) ProtoMessage() {}

func (x *InputArray) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_lite_toco_model_flags_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputArray.ProtoReflect.Descriptor instead.
func (*InputArray) Descriptor() ([]byte, []int) {
	return file_tensorflow_lite_toco_model_flags_proto_rawDescGZIP(), []int{1}
}

func (x *InputArray) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *InputArray) GetShape() *InputArrayShape {
	if x != nil {
		return x.Shape
	}
	return nil
}

func (x *InputArray) GetMeanValue() float32 {
	if x != nil && x.MeanValue != nil {
		return *x.MeanValue
	}
	return 0
}

func (x *InputArray) GetStdValue() float32 {
	if x != nil && x.StdValue != nil {
		return *x.StdValue
	}
	return Default_InputArray_StdValue
}

func (x *InputArray) GetDataType() IODataType {
	if x != nil && x.DataType != nil {
		return *x.DataType
	}
	return IODataType_IO_DATA_TYPE_UNKNOWN
}

type RnnState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StateArray          *string `protobuf:"bytes,1,opt,name=state_array,json=stateArray" json:"state_array,omitempty"`
	BackEdgeSourceArray *string `protobuf:"bytes,2,opt,name=back_edge_source_array,json=backEdgeSourceArray" json:"back_edge_source_array,omitempty"`
	Discardable         *bool   `protobuf:"varint,5,opt,name=discardable" json:"discardable,omitempty"`
	// size allows to specify a 1-D shape for the RNN state array.
	// Will be expanded with 1's to fit the model.
	// TODO(benoitjacob): should allow a generic, explicit shape.
	Size    *int32 `protobuf:"varint,3,opt,name=size" json:"size,omitempty"`
	NumDims *int32 `protobuf:"varint,4,opt,name=num_dims,json=numDims" json:"num_dims,omitempty"`
}

func (x *RnnState) Reset() {
	*x = RnnState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_lite_toco_model_flags_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RnnState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RnnState) ProtoMessage() {}

func (x *RnnState) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_lite_toco_model_flags_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RnnState.ProtoReflect.Descriptor instead.
func (*RnnState) Descriptor() ([]byte, []int) {
	return file_tensorflow_lite_toco_model_flags_proto_rawDescGZIP(), []int{2}
}

func (x *RnnState) GetStateArray() string {
	if x != nil && x.StateArray != nil {
		return *x.StateArray
	}
	return ""
}

func (x *RnnState) GetBackEdgeSourceArray() string {
	if x != nil && x.BackEdgeSourceArray != nil {
		return *x.BackEdgeSourceArray
	}
	return ""
}

func (x *RnnState) GetDiscardable() bool {
	if x != nil && x.Discardable != nil {
		return *x.Discardable
	}
	return false
}

func (x *RnnState) GetSize() int32 {
	if x != nil && x.Size != nil {
		return *x.Size
	}
	return 0
}

func (x *RnnState) GetNumDims() int32 {
	if x != nil && x.NumDims != nil {
		return *x.NumDims
	}
	return 0
}

// An ArraysExtraInfo message stores a collection of additional Information
// about arrays in a model, complementing the information in the model itself.
// It is intentionally a separate message so that it may be serialized and
// passed separately from the model. See --arrays_extra_info_file.
//
// A typical use case is to manually specify MinMax for specific arrays in a
// model that does not already contain such MinMax information.
type ArraysExtraInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries []*ArraysExtraInfo_Entry `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
}

func (x *ArraysExtraInfo) Reset() {
	*x = ArraysExtraInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_lite_toco_model_flags_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArraysExtraInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArraysExtraInfo) ProtoMessage() {}

func (x *ArraysExtraInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_lite_toco_model_flags_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArraysExtraInfo.ProtoReflect.Descriptor instead.
func (*ArraysExtraInfo) Descriptor() ([]byte, []int) {
	return file_tensorflow_lite_toco_model_flags_proto_rawDescGZIP(), []int{3}
}

func (x *ArraysExtraInfo) GetEntries() []*ArraysExtraInfo_Entry {
	if x != nil {
		return x.Entries
	}
	return nil
}

// ModelFlags encodes properties of a model that, depending on the file
// format, may or may not be recorded in the model file. The purpose of
// representing these properties in ModelFlags is to allow passing them
// separately from the input model file, for instance as command-line
// parameters, so that we can offer a single uniform interface that can
// handle files from different input formats.
//
// For each of these properties, and each supported file format, we
// detail in comments below whether the property exists in the given file
// format.
//
// Obsolete flags that have been removed:
//
//	optional int32 input_depth = 3;
//	optional int32 input_width = 4;
//	optional int32 input_height = 5;
//	optional int32 batch = 6 [ default = 1];
//	optional float mean_value = 7;
//	optional float std_value = 8 [default = 1.];
//	optional int32 input_dims = 11 [ default = 4];
//	repeated int32 input_shape = 13;
//
// Next ID to USE: 27.
type ModelFlags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Information about the input arrays, i.e. the arrays from which input
	// activations will be read.
	InputArrays []*InputArray `protobuf:"bytes,1,rep,name=input_arrays,json=inputArrays" json:"input_arrays,omitempty"`
	// Name of the output arrays, i.e. the arrays into which output activations
	// will be written.
	OutputArrays []string `protobuf:"bytes,2,rep,name=output_arrays,json=outputArrays" json:"output_arrays,omitempty"`
	// Name of the control outputs.
	ControlOutputArrays []string `protobuf:"bytes,24,rep,name=control_output_arrays,json=controlOutputArrays" json:"control_output_arrays,omitempty"`
	// If true, the model accepts an arbitrary batch size. Mutually exclusive with
	// the 'batch' field: at most one of these two fields can be set.
	VariableBatch *bool                    `protobuf:"varint,10,opt,name=variable_batch,json=variableBatch" json:"variable_batch,omitempty"`
	RnnStates     []*RnnState              `protobuf:"bytes,12,rep,name=rnn_states,json=rnnStates" json:"rnn_states,omitempty"`
	ModelChecks   []*ModelFlags_ModelCheck `protobuf:"bytes,14,rep,name=model_checks,json=modelChecks" json:"model_checks,omitempty"`
	// If true, will allow passing inexistent arrays in --input_arrays
	// and --output_arrays. This makes little sense, is only useful to
	// more easily get graph visualizations.
	AllowNonexistentArrays *bool `protobuf:"varint,16,opt,name=allow_nonexistent_arrays,json=allowNonexistentArrays" json:"allow_nonexistent_arrays,omitempty"`
	// If true, will allow passing non-ascii-printable characters in
	// --input_arrays and --output_arrays. By default (if false), only
	// ascii printable characters are allowed, i.e. character codes
	// ranging from 32 to 127. This is disallowed by default so as to
	// catch common copy-and-paste issues where invisible unicode
	// characters are unwittingly added to these strings.
	AllowNonasciiArrays *bool `protobuf:"varint,17,opt,name=allow_nonascii_arrays,json=allowNonasciiArrays" json:"allow_nonascii_arrays,omitempty"`
	// If set, this ArraysExtraInfo allows to pass extra information about arrays
	// not specified in the input model file, such as extra MinMax information.
	ArraysExtraInfo *ArraysExtraInfo `protobuf:"bytes,18,opt,name=arrays_extra_info,json=arraysExtraInfo" json:"arrays_extra_info,omitempty"`
	// When set to false, toco will not change the input ranges and the output
	// ranges of concat operator to the overlap of all input ranges.
	ChangeConcatInputRanges *bool `protobuf:"varint,19,opt,name=change_concat_input_ranges,json=changeConcatInputRanges,def=1" json:"change_concat_input_ranges,omitempty"`
	// Filepath of the saved model to be converted. This value will be non-empty
	// only when the saved model import path will be used. Otherwise, the graph
	// def-based conversion will be processed.
	SavedModelDir *string `protobuf:"bytes,20,opt,name=saved_model_dir,json=savedModelDir" json:"saved_model_dir,omitempty"`
	// SavedModel file format version of The saved model file to be converted.
	// This value will be set only when the SavedModel import path will be used.
	SavedModelVersion *int32 `protobuf:"varint,21,opt,name=saved_model_version,json=savedModelVersion" json:"saved_model_version,omitempty"`
	// Set of string saved model tags, formatted in the comma-separated value.
	// This value will be set only when the SavedModel import path will be used.
	SavedModelTags []string `protobuf:"bytes,22,rep,name=saved_model_tags,json=savedModelTags" json:"saved_model_tags,omitempty"`
	// Names to be exported (default: export all) when the saved model import path
	// is on. This value will be set only when the SavedModel import path will be
	// used.
	SavedModelExportedNames []string `protobuf:"bytes,23,rep,name=saved_model_exported_names,json=savedModelExportedNames" json:"saved_model_exported_names,omitempty"`
	// Whether or not to use hlo import.
	UseHloImport *bool `protobuf:"varint,25,opt,name=use_hlo_import,json=useHloImport" json:"use_hlo_import,omitempty"`
	// Hlo file type, this will be used for hlo import.
	HloFileType *ModelFlags_HloFileType `protobuf:"varint,26,opt,name=hlo_file_type,json=hloFileType,enum=toco.ModelFlags_HloFileType" json:"hlo_file_type,omitempty"`
}

// Default values for ModelFlags fields.
const (
	Default_ModelFlags_ChangeConcatInputRanges = bool(true)
)

func (x *ModelFlags) Reset() {
	*x = ModelFlags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_lite_toco_model_flags_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelFlags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelFlags) ProtoMessage() {}

func (x *ModelFlags) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_lite_toco_model_flags_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelFlags.ProtoReflect.Descriptor instead.
func (*ModelFlags) Descriptor() ([]byte, []int) {
	return file_tensorflow_lite_toco_model_flags_proto_rawDescGZIP(), []int{4}
}

func (x *ModelFlags) GetInputArrays() []*InputArray {
	if x != nil {
		return x.InputArrays
	}
	return nil
}

func (x *ModelFlags) GetOutputArrays() []string {
	if x != nil {
		return x.OutputArrays
	}
	return nil
}

func (x *ModelFlags) GetControlOutputArrays() []string {
	if x != nil {
		return x.ControlOutputArrays
	}
	return nil
}

func (x *ModelFlags) GetVariableBatch() bool {
	if x != nil && x.VariableBatch != nil {
		return *x.VariableBatch
	}
	return false
}

func (x *ModelFlags) GetRnnStates() []*RnnState {
	if x != nil {
		return x.RnnStates
	}
	return nil
}

func (x *ModelFlags) GetModelChecks() []*ModelFlags_ModelCheck {
	if x != nil {
		return x.ModelChecks
	}
	return nil
}

func (x *ModelFlags) GetAllowNonexistentArrays() bool {
	if x != nil && x.AllowNonexistentArrays != nil {
		return *x.AllowNonexistentArrays
	}
	return false
}

func (x *ModelFlags) GetAllowNonasciiArrays() bool {
	if x != nil && x.AllowNonasciiArrays != nil {
		return *x.AllowNonasciiArrays
	}
	return false
}

func (x *ModelFlags) GetArraysExtraInfo() *ArraysExtraInfo {
	if x != nil {
		return x.ArraysExtraInfo
	}
	return nil
}

func (x *ModelFlags) GetChangeConcatInputRanges() bool {
	if x != nil && x.ChangeConcatInputRanges != nil {
		return *x.ChangeConcatInputRanges
	}
	return Default_ModelFlags_ChangeConcatInputRanges
}

func (x *ModelFlags) GetSavedModelDir() string {
	if x != nil && x.SavedModelDir != nil {
		return *x.SavedModelDir
	}
	return ""
}

func (x *ModelFlags) GetSavedModelVersion() int32 {
	if x != nil && x.SavedModelVersion != nil {
		return *x.SavedModelVersion
	}
	return 0
}

func (x *ModelFlags) GetSavedModelTags() []string {
	if x != nil {
		return x.SavedModelTags
	}
	return nil
}

func (x *ModelFlags) GetSavedModelExportedNames() []string {
	if x != nil {
		return x.SavedModelExportedNames
	}
	return nil
}

func (x *ModelFlags) GetUseHloImport() bool {
	if x != nil && x.UseHloImport != nil {
		return *x.UseHloImport
	}
	return false
}

func (x *ModelFlags) GetHloFileType() ModelFlags_HloFileType {
	if x != nil && x.HloFileType != nil {
		return *x.HloFileType
	}
	return ModelFlags_UNKNOWN
}

type ArraysExtraInfo_Entry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Next ID to use: 8.
	Name               *string          `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	NameRegexp         *string          `protobuf:"bytes,7,opt,name=name_regexp,json=nameRegexp" json:"name_regexp,omitempty"`
	Min                *float64         `protobuf:"fixed64,2,opt,name=min" json:"min,omitempty"`
	Max                *float64         `protobuf:"fixed64,3,opt,name=max" json:"max,omitempty"`
	DataType           *IODataType      `protobuf:"varint,4,opt,name=data_type,json=dataType,enum=toco.IODataType" json:"data_type,omitempty"`
	Shape              *InputArrayShape `protobuf:"bytes,5,opt,name=shape" json:"shape,omitempty"`
	ConstantFloatValue *float32         `protobuf:"fixed32,6,opt,name=constant_float_value,json=constantFloatValue" json:"constant_float_value,omitempty"`
}

func (x *ArraysExtraInfo_Entry) Reset() {
	*x = ArraysExtraInfo_Entry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_lite_toco_model_flags_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArraysExtraInfo_Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArraysExtraInfo_Entry) ProtoMessage() {}

func (x *ArraysExtraInfo_Entry) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_lite_toco_model_flags_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArraysExtraInfo_Entry.ProtoReflect.Descriptor instead.
func (*ArraysExtraInfo_Entry) Descriptor() ([]byte, []int) {
	return file_tensorflow_lite_toco_model_flags_proto_rawDescGZIP(), []int{3, 0}
}

func (x *ArraysExtraInfo_Entry) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *ArraysExtraInfo_Entry) GetNameRegexp() string {
	if x != nil && x.NameRegexp != nil {
		return *x.NameRegexp
	}
	return ""
}

func (x *ArraysExtraInfo_Entry) GetMin() float64 {
	if x != nil && x.Min != nil {
		return *x.Min
	}
	return 0
}

func (x *ArraysExtraInfo_Entry) GetMax() float64 {
	if x != nil && x.Max != nil {
		return *x.Max
	}
	return 0
}

func (x *ArraysExtraInfo_Entry) GetDataType() IODataType {
	if x != nil && x.DataType != nil {
		return *x.DataType
	}
	return IODataType_IO_DATA_TYPE_UNKNOWN
}

func (x *ArraysExtraInfo_Entry) GetShape() *InputArrayShape {
	if x != nil {
		return x.Shape
	}
	return nil
}

func (x *ArraysExtraInfo_Entry) GetConstantFloatValue() float32 {
	if x != nil && x.ConstantFloatValue != nil {
		return *x.ConstantFloatValue
	}
	return 0
}

// Checks applied to the model, typically after toco's comprehensive
// graph transformations.
// Next ID to USE: 4.
type ModelFlags_ModelCheck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Use the name of a type of operator to check its counts.
	// Use "Total" for overall operator counts.
	// Use "Arrays" for overall array counts.
	CountType *string `protobuf:"bytes,1,opt,name=count_type,json=countType,def=None" json:"count_type,omitempty"`
	// A count of zero is a meaningful check, so negative used to mean disable.
	CountMin *int32 `protobuf:"varint,2,opt,name=count_min,json=countMin,def=-1" json:"count_min,omitempty"`
	// If count_max < count_min, then count_min is only allowed value.
	CountMax *int32 `protobuf:"varint,3,opt,name=count_max,json=countMax,def=-1" json:"count_max,omitempty"`
}

// Default values for ModelFlags_ModelCheck fields.
const (
	Default_ModelFlags_ModelCheck_CountType = string("None")
	Default_ModelFlags_ModelCheck_CountMin  = int32(-1)
	Default_ModelFlags_ModelCheck_CountMax  = int32(-1)
)

func (x *ModelFlags_ModelCheck) Reset() {
	*x = ModelFlags_ModelCheck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tensorflow_lite_toco_model_flags_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelFlags_ModelCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelFlags_ModelCheck) ProtoMessage() {}

func (x *ModelFlags_ModelCheck) ProtoReflect() protoreflect.Message {
	mi := &file_tensorflow_lite_toco_model_flags_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelFlags_ModelCheck.ProtoReflect.Descriptor instead.
func (*ModelFlags_ModelCheck) Descriptor() ([]byte, []int) {
	return file_tensorflow_lite_toco_model_flags_proto_rawDescGZIP(), []int{4, 0}
}

func (x *ModelFlags_ModelCheck) GetCountType() string {
	if x != nil && x.CountType != nil {
		return *x.CountType
	}
	return Default_ModelFlags_ModelCheck_CountType
}

func (x *ModelFlags_ModelCheck) GetCountMin() int32 {
	if x != nil && x.CountMin != nil {
		return *x.CountMin
	}
	return Default_ModelFlags_ModelCheck_CountMin
}

func (x *ModelFlags_ModelCheck) GetCountMax() int32 {
	if x != nil && x.CountMax != nil {
		return *x.CountMax
	}
	return Default_ModelFlags_ModelCheck_CountMax
}

var File_tensorflow_lite_toco_model_flags_proto protoreflect.FileDescriptor

var file_tensorflow_lite_toco_model_flags_proto_rawDesc = []byte{
	0x0a, 0x26, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x6c, 0x69, 0x74,
	0x65, 0x2f, 0x74, 0x6f, 0x63, 0x6f, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x74, 0x6f, 0x63, 0x6f, 0x1a, 0x20,
	0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x6c, 0x69, 0x74, 0x65, 0x2f,
	0x74, 0x6f, 0x63, 0x6f, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x48, 0x0a, 0x0f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x53, 0x68,
	0x61, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x69, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x04, 0x64, 0x69, 0x6d, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x6e, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x52, 0x61, 0x6e, 0x6b, 0x22, 0xbb, 0x01, 0x0a, 0x0a, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a,
	0x05, 0x73, 0x68, 0x61, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74,
	0x6f, 0x63, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x53, 0x68,
	0x61, 0x70, 0x65, 0x52, 0x05, 0x73, 0x68, 0x61, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65,
	0x61, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09,
	0x6d, 0x65, 0x61, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1e, 0x0a, 0x09, 0x73, 0x74, 0x64,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x3a, 0x01, 0x31, 0x52,
	0x08, 0x73, 0x74, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2d, 0x0a, 0x09, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x74,
	0x6f, 0x63, 0x6f, 0x2e, 0x49, 0x4f, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08,
	0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x22, 0xb1, 0x01, 0x0a, 0x08, 0x52, 0x6e, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x61,
	0x72, 0x72, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x33, 0x0a, 0x16, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x65,
	0x64, 0x67, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x62, 0x61, 0x63, 0x6b, 0x45, 0x64, 0x67, 0x65,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x75, 0x6d, 0x5f, 0x64, 0x69, 0x6d, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x6e, 0x75, 0x6d, 0x44, 0x69, 0x6d, 0x73, 0x22, 0xb9, 0x02, 0x0a,
	0x0f, 0x41, 0x72, 0x72, 0x61, 0x79, 0x73, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x35, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x6f, 0x63, 0x6f, 0x2e, 0x41, 0x72, 0x72, 0x61, 0x79, 0x73, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07,
	0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x1a, 0xee, 0x01, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x65,
	0x67, 0x65, 0x78, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x2d, 0x0a, 0x09, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e,
	0x74, 0x6f, 0x63, 0x6f, 0x2e, 0x49, 0x4f, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x73, 0x68, 0x61,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x6f, 0x63, 0x6f, 0x2e,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x53, 0x68, 0x61, 0x70, 0x65, 0x52,
	0x05, 0x73, 0x68, 0x61, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xf9, 0x07, 0x0a, 0x0a, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x33, 0x0a, 0x0c, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x74, 0x6f, 0x63, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52,
	0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x73, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x76,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x2d, 0x0a, 0x0a,
	0x72, 0x6e, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x74, 0x6f, 0x63, 0x6f, 0x2e, 0x52, 0x6e, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x09, 0x72, 0x6e, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0c, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x6f, 0x63, 0x6f, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x46, 0x6c,
	0x61, 0x67, 0x73, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x0b,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6e, 0x6f, 0x6e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74,
	0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x4e, 0x6f, 0x6e, 0x65, 0x78, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6e,
	0x6f, 0x6e, 0x61, 0x73, 0x63, 0x69, 0x69, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x73, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4e, 0x6f, 0x6e, 0x61, 0x73,
	0x63, 0x69, 0x69, 0x41, 0x72, 0x72, 0x61, 0x79, 0x73, 0x12, 0x41, 0x0a, 0x11, 0x61, 0x72, 0x72,
	0x61, 0x79, 0x73, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x6f, 0x63, 0x6f, 0x2e, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x73, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x61, 0x72, 0x72,
	0x61, 0x79, 0x73, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x41, 0x0a, 0x1a,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x61, 0x74, 0x5f, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08,
	0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x17, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f,
	0x6e, 0x63, 0x61, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12,
	0x26, 0x0a, 0x0f, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x64,
	0x69, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x61, 0x76, 0x65, 0x64, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x44, 0x69, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x61, 0x76, 0x65, 0x64,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x73, 0x61, 0x76, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x61, 0x76, 0x65, 0x64,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0e, 0x73, 0x61, 0x76, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x61, 0x67,
	0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x73, 0x61, 0x76, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18,
	0x17, 0x20, 0x03, 0x28, 0x09, 0x52, 0x17, 0x73, 0x61, 0x76, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x24,
	0x0a, 0x0e, 0x75, 0x73, 0x65, 0x5f, 0x68, 0x6c, 0x6f, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x48, 0x6c, 0x6f, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x68, 0x6c, 0x6f, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x74, 0x6f,
	0x63, 0x6f, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x2e, 0x48, 0x6c,
	0x6f, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x68, 0x6c, 0x6f, 0x46, 0x69,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x73, 0x0a, 0x0a, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x12, 0x23, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x52, 0x09,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x09, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x02, 0x2d, 0x31,
	0x52, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x09, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x02, 0x2d,
	0x31, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x78, 0x22, 0x37, 0x0a, 0x0b, 0x48,
	0x6c, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x48, 0x4c, 0x4f, 0x5f, 0x54,
	0x45, 0x58, 0x54, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x4c, 0x4f, 0x5f, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x10, 0x02, 0x42, 0x82, 0x01, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x6f, 0x63,
	0x6f, 0x42, 0x0f, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x48, 0x02, 0x50, 0x01, 0x5a, 0x33, 0x67, 0x69, 0x74, 0x65, 0x65, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x71, 0x63, 0x69, 0x69, 0x70, 0x2d, 0x69, 0x63, 0x70, 0x2f, 0x74, 0x66, 0x2d, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x2f, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x66, 0x6c, 0x6f,
	0x77, 0x2f, 0x6c, 0x69, 0x74, 0x65, 0x2f, 0x74, 0x6f, 0x63, 0x6f, 0xa2, 0x02, 0x03, 0x54, 0x58,
	0x58, 0xaa, 0x02, 0x04, 0x54, 0x6f, 0x63, 0x6f, 0xca, 0x02, 0x04, 0x54, 0x6f, 0x63, 0x6f, 0xe2,
	0x02, 0x10, 0x54, 0x6f, 0x63, 0x6f, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0xea, 0x02, 0x04, 0x54, 0x6f, 0x63, 0x6f,
}

var (
	file_tensorflow_lite_toco_model_flags_proto_rawDescOnce sync.Once
	file_tensorflow_lite_toco_model_flags_proto_rawDescData = file_tensorflow_lite_toco_model_flags_proto_rawDesc
)

func file_tensorflow_lite_toco_model_flags_proto_rawDescGZIP() []byte {
	file_tensorflow_lite_toco_model_flags_proto_rawDescOnce.Do(func() {
		file_tensorflow_lite_toco_model_flags_proto_rawDescData = protoimpl.X.CompressGZIP(file_tensorflow_lite_toco_model_flags_proto_rawDescData)
	})
	return file_tensorflow_lite_toco_model_flags_proto_rawDescData
}

var file_tensorflow_lite_toco_model_flags_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_tensorflow_lite_toco_model_flags_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_tensorflow_lite_toco_model_flags_proto_goTypes = []interface{}{
	(ModelFlags_HloFileType)(0),   // 0: toco.ModelFlags.HloFileType
	(*InputArrayShape)(nil),       // 1: toco.InputArrayShape
	(*InputArray)(nil),            // 2: toco.InputArray
	(*RnnState)(nil),              // 3: toco.RnnState
	(*ArraysExtraInfo)(nil),       // 4: toco.ArraysExtraInfo
	(*ModelFlags)(nil),            // 5: toco.ModelFlags
	(*ArraysExtraInfo_Entry)(nil), // 6: toco.ArraysExtraInfo.Entry
	(*ModelFlags_ModelCheck)(nil), // 7: toco.ModelFlags.ModelCheck
	(IODataType)(0),               // 8: toco.IODataType
}
var file_tensorflow_lite_toco_model_flags_proto_depIdxs = []int32{
	1,  // 0: toco.InputArray.shape:type_name -> toco.InputArrayShape
	8,  // 1: toco.InputArray.data_type:type_name -> toco.IODataType
	6,  // 2: toco.ArraysExtraInfo.entries:type_name -> toco.ArraysExtraInfo.Entry
	2,  // 3: toco.ModelFlags.input_arrays:type_name -> toco.InputArray
	3,  // 4: toco.ModelFlags.rnn_states:type_name -> toco.RnnState
	7,  // 5: toco.ModelFlags.model_checks:type_name -> toco.ModelFlags.ModelCheck
	4,  // 6: toco.ModelFlags.arrays_extra_info:type_name -> toco.ArraysExtraInfo
	0,  // 7: toco.ModelFlags.hlo_file_type:type_name -> toco.ModelFlags.HloFileType
	8,  // 8: toco.ArraysExtraInfo.Entry.data_type:type_name -> toco.IODataType
	1,  // 9: toco.ArraysExtraInfo.Entry.shape:type_name -> toco.InputArrayShape
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_tensorflow_lite_toco_model_flags_proto_init() }
func file_tensorflow_lite_toco_model_flags_proto_init() {
	if File_tensorflow_lite_toco_model_flags_proto != nil {
		return
	}
	file_tensorflow_lite_toco_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_tensorflow_lite_toco_model_flags_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputArrayShape); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_lite_toco_model_flags_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_lite_toco_model_flags_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RnnState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_lite_toco_model_flags_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArraysExtraInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_lite_toco_model_flags_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelFlags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_lite_toco_model_flags_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArraysExtraInfo_Entry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tensorflow_lite_toco_model_flags_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelFlags_ModelCheck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tensorflow_lite_toco_model_flags_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tensorflow_lite_toco_model_flags_proto_goTypes,
		DependencyIndexes: file_tensorflow_lite_toco_model_flags_proto_depIdxs,
		EnumInfos:         file_tensorflow_lite_toco_model_flags_proto_enumTypes,
		MessageInfos:      file_tensorflow_lite_toco_model_flags_proto_msgTypes,
	}.Build()
	File_tensorflow_lite_toco_model_flags_proto = out.File
	file_tensorflow_lite_toco_model_flags_proto_rawDesc = nil
	file_tensorflow_lite_toco_model_flags_proto_goTypes = nil
	file_tensorflow_lite_toco_model_flags_proto_depIdxs = nil
}
