// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: tensorflow/tsl/profiler/protobuf/profiler_service.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProfilerServiceClient is the client API for ProfilerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProfilerServiceClient interface {
	// Starts a profiling session, blocks until it completes, and returns data.
	Profile(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*ProfileResponse, error)
	// Signal to terminate the Profile rpc for a on-going profiling session,
	// The Profile rpc will return successfully and prematurely without timeout.
	// This is used by programmatic mode to end the session in workers.
	Terminate(ctx context.Context, in *TerminateRequest, opts ...grpc.CallOption) (*TerminateResponse, error)
	// Collects profiling data and returns user-friendly metrics.
	Monitor(ctx context.Context, in *MonitorRequest, opts ...grpc.CallOption) (*MonitorResponse, error)
}

type profilerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProfilerServiceClient(cc grpc.ClientConnInterface) ProfilerServiceClient {
	return &profilerServiceClient{cc}
}

func (c *profilerServiceClient) Profile(ctx context.Context, in *ProfileRequest, opts ...grpc.CallOption) (*ProfileResponse, error) {
	out := new(ProfileResponse)
	err := c.cc.Invoke(ctx, "/tensorflow.ProfilerService/Profile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profilerServiceClient) Terminate(ctx context.Context, in *TerminateRequest, opts ...grpc.CallOption) (*TerminateResponse, error) {
	out := new(TerminateResponse)
	err := c.cc.Invoke(ctx, "/tensorflow.ProfilerService/Terminate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profilerServiceClient) Monitor(ctx context.Context, in *MonitorRequest, opts ...grpc.CallOption) (*MonitorResponse, error) {
	out := new(MonitorResponse)
	err := c.cc.Invoke(ctx, "/tensorflow.ProfilerService/Monitor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProfilerServiceServer is the server API for ProfilerService service.
// All implementations must embed UnimplementedProfilerServiceServer
// for forward compatibility
type ProfilerServiceServer interface {
	// Starts a profiling session, blocks until it completes, and returns data.
	Profile(context.Context, *ProfileRequest) (*ProfileResponse, error)
	// Signal to terminate the Profile rpc for a on-going profiling session,
	// The Profile rpc will return successfully and prematurely without timeout.
	// This is used by programmatic mode to end the session in workers.
	Terminate(context.Context, *TerminateRequest) (*TerminateResponse, error)
	// Collects profiling data and returns user-friendly metrics.
	Monitor(context.Context, *MonitorRequest) (*MonitorResponse, error)
	mustEmbedUnimplementedProfilerServiceServer()
}

// UnimplementedProfilerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProfilerServiceServer struct {
}

func (UnimplementedProfilerServiceServer) Profile(context.Context, *ProfileRequest) (*ProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Profile not implemented")
}
func (UnimplementedProfilerServiceServer) Terminate(context.Context, *TerminateRequest) (*TerminateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Terminate not implemented")
}
func (UnimplementedProfilerServiceServer) Monitor(context.Context, *MonitorRequest) (*MonitorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Monitor not implemented")
}
func (UnimplementedProfilerServiceServer) mustEmbedUnimplementedProfilerServiceServer() {}

// UnsafeProfilerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProfilerServiceServer will
// result in compilation errors.
type UnsafeProfilerServiceServer interface {
	mustEmbedUnimplementedProfilerServiceServer()
}

func RegisterProfilerServiceServer(s grpc.ServiceRegistrar, srv ProfilerServiceServer) {
	s.RegisterService(&ProfilerService_ServiceDesc, srv)
}

func _ProfilerService_Profile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfilerServiceServer).Profile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tensorflow.ProfilerService/Profile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfilerServiceServer).Profile(ctx, req.(*ProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfilerService_Terminate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TerminateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfilerServiceServer).Terminate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tensorflow.ProfilerService/Terminate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfilerServiceServer).Terminate(ctx, req.(*TerminateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfilerService_Monitor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MonitorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfilerServiceServer).Monitor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tensorflow.ProfilerService/Monitor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfilerServiceServer).Monitor(ctx, req.(*MonitorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProfilerService_ServiceDesc is the grpc.ServiceDesc for ProfilerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProfilerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tensorflow.ProfilerService",
	HandlerType: (*ProfilerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Profile",
			Handler:    _ProfilerService_Profile_Handler,
		},
		{
			MethodName: "Terminate",
			Handler:    _ProfilerService_Terminate_Handler,
		},
		{
			MethodName: "Monitor",
			Handler:    _ProfilerService_Monitor_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tensorflow/tsl/profiler/protobuf/profiler_service.proto",
}
